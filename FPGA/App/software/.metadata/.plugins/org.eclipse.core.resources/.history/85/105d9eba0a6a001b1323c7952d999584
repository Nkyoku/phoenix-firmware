#include "stream_transmitter.hpp"
#include "driver/adc2.hpp"
#include "centralized_monitor.hpp"
#include <stream_data.hpp>
#include <peripheral/msgdma.hpp>

/**
 * mSGDMAで送信するメッセージを管理するベースクラス
 */
template<class T>
class StreamDataDesciptor {
public:
    /**
     * コンストラクタ
     * mSGMDAのディスクリプタを初期化する
     * @param data データへのポインタ
     * @param length データの長さ
     * @param channel チャンネル番号
     */
    constexpr StreamDataDesciptor(const void *data, int channel)
    : read_address(data), write_address(nullptr), transfer_length(sizeof(T)), control(ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK
        | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GENERATE_SOP_MASK
        | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MASK
        | (channel << ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSMIT_CHANNEL_OFFSET))
    {
    }

    /**
     * 非同期的に転送を開始する
     * @param device mSGDMAのハンドル
     * @return　転送の開始に成功したらtrueを返す
     */
    bool TransmitAsync(alt_msgdma_dev *device) const {
        return alt_msgdma_standard_descriptor_async_transfer(device, const_cast<alt_msgdma_standard_descriptor*>(reinterpret_cast<const alt_msgdma_standard_descriptor*>(this))) == 0;
    }

    /**
     * 同期的に転送を開始する
     * @param device mSGDMAのハンドル
     * @return　転送に成功したらtrueを返す
     */
    bool TransmitSync(alt_msgdma_dev *device) const {
        return alt_msgdma_standard_descriptor_sync_transfer(device, const_cast<alt_msgdma_standard_descriptor*>(reinterpret_cast<const alt_msgdma_standard_descriptor*>(this))) == 0;
    }

private:
    /**
     * mSGDMAのディスクリプタ
     * alt_msgdma_standard_descriptorをもとに作成
     */
    const void *read_address;
    void *write_address;
    uint32_t transfer_length;
    uint32_t control;
};

static StreamDataStatus_t StreamDataStatus;
static constexpr MsgdmaTransmitDescriptor StreamDataDesciptorStatus(StreamDataStatus, StreamIdStatus);
//static constexpr StreamDataDesciptor<StreamDataStatus_t> StreamDataDesciptorStatus(&StreamDataStatus, StreamIdStatus);

static StreamDataAdc2_t StreamDataAdc2;
//static constexpr StreamDataDesciptor<StreamDataAdc2_t> StreamDataDesciptorAdc2(&StreamDataAdc2, StreamIdAdc2);
static constexpr MsgdmaTransmitDescriptor StreamDataDesciptorAdc2(StreamDataAdc2, StreamIdAdc2);

void StreamTransmitter::TransmitStatus(void){
    __builtin_stwio(&StreamDataStatus.error_flags, CentralizedMonitor::GetErrorFlags());
    __builtin_stwio(&StreamDataStatus.fault_flags, CentralizedMonitor::GetFaultFlags());
    StreamDataDesciptorStatus.TransmitAsync(_Device);
}

void StreamTransmitter::TransmitAdc2(void) {
    __builtin_sthio(&StreamDataAdc2.dc48v_voltage, Adc2::GetDc48v());
    __builtin_sthio(&StreamDataAdc2.dribble_current, Adc2::GetDribbleCurrent());
    StreamDataDesciptorAdc2.TransmitAsync(_Device);
}

alt_msgdma_dev *StreamTransmitter::_Device;
