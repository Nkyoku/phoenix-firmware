
controller.elf:     file format elf32-littlenios2
controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000060dc memsz 0x000060dc flags r-x
    LOAD off    0x00008000 vaddr 0x00008000 paddr 0x000060fc align 2**12
         filesz 0x00000290 memsz 0x0000036c flags rw-
    LOAD off    0x00009000 vaddr 0x0000b000 paddr 0x0000b000 align 2**12
         filesz 0x00000028 memsz 0x00000028 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00009028  2**0
                  CONTENTS
  2 .shared       00000028  0000b000  0000b000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00005d00  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000003dc  00005d20  00005d20  00006d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00000290  00008000  000060fc  00008000  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          000000dc  00008290  0000638c  00008290  2**2
                  ALLOC, SMALL_DATA
  7 .instruction_rom_0 00000000  0000638c  0000638c  00009028  2**0
                  CONTENTS
  8 .data_ram_0   00000000  0000836c  0000836c  00009028  2**0
                  CONTENTS
  9 .data_ram_1   00000000  0000b028  0000b028  00009028  2**0
                  CONTENTS
 10 .comment      0000002d  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000fb8  00000000  00000000  00009058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00027bc2  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b392  00000000  00000000  00031bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010af4  00000000  00000000  0003cf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00002098  00000000  00000000  0004da58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000ae98  00000000  00000000  0004faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0000df1d  00000000  00000000  0005a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_alt_sim_info 00000040  00000000  00000000  000688a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002088  00000000  00000000  000688e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  0006ec3a  2**0
                  CONTENTS, READONLY
 21 .cpu          00000006  00000000  00000000  0006ec3d  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0006ec43  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0006ec44  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  0006ec45  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  0006ec49  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  0006ec4d  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   0000000b  00000000  00000000  0006ec51  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    0000000b  00000000  00000000  0006ec5c  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   0000000b  00000000  00000000  0006ec67  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 0000000a  00000000  00000000  0006ec72  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 00000029  00000000  00000000  0006ec7c  2**0
                  CONTENTS, READONLY
 32 .jdi          00004c4b  00000000  00000000  0006eca5  2**0
                  CONTENTS, READONLY
 33 .sopcinfo     000d98bc  00000000  00000000  000738f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000b000 l    d  .shared	00000000 .shared
00000020 l    d  .text	00000000 .text
00005d20 l    d  .rodata	00000000 .rodata
00008000 l    d  .rwdata	00000000 .rwdata
00008290 l    d  .bss	00000000 .bss
0000638c l    d  .instruction_rom_0	00000000 .instruction_rom_0
0000836c l    d  .data_ram_0	00000000 .data_ram_0
0000b028 l    d  .data_ram_1	00000000 .data_ram_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/work/Robocup/phoenix-firmware/FPGA/App/software/controller_bsp//obj/HAL/src/crt0.o
00000098 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 shared_memory.cpp
00000000 l    df *ABS*	00000000 microshell.c
0000009c l     F .text	00000068 print_buffer
00000104 l     F .text	00000034 print_return
00000138 l     F .text	00000068 cursor_left
000001a0 l     F .text	00000064 cursor_right
00000000 l    df *ABS*	00000000 mscore.c
00005d64 l     O .rodata	00000070 kmlist
00000000 l    df *ABS*	00000000 mscmd.c
00000000 l    df *ABS*	00000000 msopt.c
00000000 l    df *ABS*	00000000 ntlibc.c
00000000 l    df *ABS*	00000000 centralized_monitor.cpp
0000829c l     O .bss	00000004 _ZZN18CentralizedMonitor13Adc2KeepAliveEiE3cnt
00008298 l     O .bss	00000004 _ZZN18CentralizedMonitor20DoPeriodicCommonWorkEvE3cnt
00000000 l    df *ABS*	00000000 dribble_controller.cpp
00000000 l    df *ABS*	00000000 adc2.cpp
00000000 l    df *ABS*	00000000 imu.cpp
00000000 l    df *ABS*	00000000 main.cpp
00001850 l     F .text	00000010 _ZZ4mainENUlcE_4_FUNEc
00001860 l     F .text	00000018 _ZZ4mainENUlvE0_4_FUNEv
00001878 l     F .text	0000001c _ZL13command_faultP5MSOPTPv
00001894 l     F .text	00000014 _ZL13command_clearP5MSOPTPv
000018a8 l     F .text	0000002c _ZL12command_adc2P5MSOPTPv
000018d4 l     F .text	00000088 _ZL14command_statusP5MSOPTPv
0000195c l     F .text	00000050 _ZL11command_imuP5MSOPTPv
000019ac l     F .text	00000080 _ZL10command_kiP5MSOPTPv
00001a2c l     F .text	00000080 _ZL10command_kpP5MSOPTPv
00001aac l     F .text	00000098 _ZL14command_switchP5MSOPTPv
00005ee4 l     O .rodata	00000040 _ZZ4mainE13command_table
00000000 l    df *ABS*	00000000 msgdma.cpp
00000000 l    df *ABS*	00000000 stream_transmitter.cpp
000082bc l     O .bss	00000008 _ZL16StreamDataStatus
00005f44 l     O .rodata	00000010 _ZL25StreamDataDesciptorStatus
000082b8 l     O .bss	00000004 _ZL14StreamDataAdc2
00005f34 l     O .rodata	00000010 _ZL23StreamDataDesciptorAdc2
0000830c l     O .bss	00000030 _ZL16StreamDataMotion
00005f24 l     O .rodata	00000010 _ZL25StreamDataDesciptorMotion
00000000 l    df *ABS*	00000000 wheel_controller.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
0000236c l     F .text	00000090 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
000023fc l     F .text	000001e8 _ZL28read_encoded_value_with_basehjPKhPj
000025e4 l     F .text	00000070 _ZL21base_of_encoded_valuehP15_Unwind_Context
00002654 l     F .text	0000012c _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00002780 l     F .text	00000110 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
000031bc l     F .text	00000068 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000336c l     F .text	000000cc _ZN12_GLOBAL__N_14pool4freeEPv.constprop.0
0000835c l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
00003438 l     F .text	00000090 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.0
00003548 l     F .text	00000064 _GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
000082cc l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_ops.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 sf_fmax.c
00000000 l    df *ABS*	00000000 sf_fmin.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00003f98 l     F .text	00000114 _Unwind_ForcedUnwind_Phase2
000082d4 l     O .bss	00000004 fc_static
000040ac l     F .text	000000d8 _Unwind_RaiseException_Phase2
00004184 l     F .text	0000002c uw_install_context.constprop.0.isra.0
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000049e4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00008274 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008150 l     O .rwdata	0000009c vic_0
000080f0 l     O .rwdata	00000060 msgdma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
0000572c l     F .text	000000dc alt_msgdma_irq
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
000060d0 l     O .rodata	00000020 VEC_SIZE_ARRAY.0
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005b7c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 impure.c
00008000 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 int_errno.c
00003520 g     F .text	00000028 __cxa_free_exception
00003a6c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00003190 g     F .text	00000014 _ZSt10unexpectedv
000053dc g     F .text	00000030 alt_main
0000134c  w    F .text	00000014 _ZN4Adc213AwaitCompleteEv
00004230 g     F .text	00000020 .hidden _Unwind_GetIPInfo
000060fc g       *ABS*	00000000 __flash_rwdata_start
00000258 g     F .text	00000368 microshell_getline
000007d4 g     F .text	00000110 msopt_init
000032e8 g     F .text	00000084 __cxa_rethrow
000041c8 g     F .text	00000010 .hidden _Unwind_SjLj_Unregister
00004220 g     F .text	00000010 .hidden _Unwind_GetIP
0000836c g       *ABS*	00000000 __alt_heap_start
00004950 g     F .text	0000004c _kill_r
000082a2 g     O .bss	00000004 _ZN4Adc27_ResultE
000047fc g     F .text	00000048 printf
0000090c g     F .text	00000070 msopt_get_argv
000037a0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00005ff0  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000082b4 g     O .bss	00000004 _ZN17StreamTransmitter7_DeviceE
00001664 g     F .text	00000050 _ZN3Imu7SetBankEm
00005410 g     F .text	00000004 __malloc_unlock
0000451c g     F .text	00000060 memmove
000009dc g     F .text	000000bc ntlibc_atoi
000010d4 g     F .text	00000108 _ZN18CentralizedMonitor20DoPeriodicCommonWorkEv
00000b10 g     F .text	00000040 _ZN18CentralizedMonitor5StartEv
000016b4 g     F .text	00000060 _ZN3Imu12ReadRegisterEm
00005460 g     F .text	00000038 alt_putstr
00005fdc  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000 g     F .entry	0000000c __reset
000013e8 g     F .text	00000180 _ZN4Adc27HandlerEPv
0000426c g     F .text	00000008 .hidden _Unwind_GetRegionStart
00008290 g     O .bss	00000004 _ZN18CentralizedMonitor11_FaultFlagsE
00000020 g       *ABS*	00000000 __flash_exceptions_start
000082e0 g     O .bss	00000004 errno
0000834c g     O .bss	00000010 _ZN15WheelController15_LastSpeedErrorE
00004434 g     F .text	00000088 .hidden _Unwind_Backtrace
000082e8 g     O .bss	00000004 alt_argv
00010244 g       *ABS*	00000000 _gp
00005500 g     F .text	00000004 usleep
00001228 g     F .text	00000018 _ZN17DribbleController12StartControlEv
0000525c g     F .text	00000008 getpid
000082a8 g     O .bss	00000004 _ZN4Adc29_SequenceE
00002f28 g     F .text	0000017c __cxa_call_unexpected
000081ec g     O .rwdata	00000030 alt_fd_list
00004354 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00005928 g       .text	00000000 VIC_0_VECTOR_TABLE
000041f0 g     F .text	00000018 .hidden _Unwind_GetCFA
00005c38 g     F .text	00000070 alt_find_dev
000044f4 g     F .text	00000028 memcpy
00000204 g     F .text	00000054 microshell_init
00003aec g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
00003b04 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00001258 g     F .text	00000004 _ZN17DribbleController17Adc2UpdateCurrentEi
000055ac g     F .text	00000058 altera_avalon_jtag_uart_read
000044d4 g     F .text	00000010 malloc
0000515c g     F .text	00000064 .hidden __udivsi3
0000488c g     F .text	000000b4 _raise_r
00003ee4 g     F .text	000000b4 .hidden __lesf2
00001240 g     F .text	00000018 _ZN17DribbleController11StopControlEv
000082b0 g     O .bss	00000001 _ZN3Imu6_ValidE
0000499c g     F .text	00000004 _getpid_r
00003dd8 g     F .text	00000054 __fpclassifyf
00001dc8 g     F .text	000000a4 _ZN12SharedMemory16UpdateParametersEv
00003bb8 g     F .text	0000009c _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
000022f4 g     F .text	0000005c _ZN15WheelController8SetGainsEff
00004844 g     F .text	00000048 _sbrk_r
000006f0 g     F .text	00000014 mscmd_init
00006024  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00003b4c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00003d1c g     F .text	00000004 _ZdlPv
0000836c g       *ABS*	00000000 __bss_end
0000521c g     F .text	00000040 alt_getchar
000041b0 g     F .text	00000018 .hidden _Unwind_SjLj_Register
00005854 g     F .text	000000d4 alt_msgdma_init
000044bc g     F .text	00000018 abort
000082ac g     O .bss	00000004 _ZN4Adc26_StateE
000036bc g     F .text	000000b4 __cxa_end_catch
00003770 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00002074 g     F .text	0000007c _ZN15WheelController12StartControlEv
00001e6c g     F .text	00000040 _ZN12SharedMemory15ClearParametersEv
00002350 g     F .text	0000001c _ZN15WheelController8GetGainsEPfS0_
0000316c g     F .text	00000014 _ZSt9terminatev
0000821c g     O .rwdata	00000028 alt_dev_null
000082c8 g     O .bss	00000004 _ZN15WheelController11_SpeedGainPE
00006060  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00005b78 g     F .text	00000004 alt_dcache_flush_all
0000824c  w    O .rwdata	00000008 _ZTISt9exception
00000a98  w    F .text	0000001c _ZN15CriticalSectionC1Ev
000082a0 g     O .bss	00000001 _ZN4Adc26_ValidE
000059b8 g       .text	00000000 alt_shadow_non_preemptive_interrupt
00008290 g       *ABS*	00000000 __ram_rwdata_end
00003a68 g     F .text	00000004 _ZNSt9type_infoD1Ev
00008284 g     O .rwdata	00000008 alt_dev_list
00000ecc g     F .text	00000028 _ZN18CentralizedMonitor24ResetMotorInterruptFlagsEv
00005504 g     F .text	0000005c write
00003e2c g     F .text	000000b8 .hidden __gtsf2
000060fc g       *ABS*	00000000 __ram_rodata_end
00003d18 g     F .text	00000004 _ZdlPvj
00008278 g     O .rwdata	00000004 jtag_uart_0
00005264 g     F .text	000000f4 kill
000051c0 g     F .text	0000005c .hidden __umodsi3
00003224 g     F .text	00000064 __cxa_init_primary_exception
000031a4 g     F .text	0000000c _ZSt13get_terminatev
0000836c g       *ABS*	00000000 end
0000441c g     F .text	00000018 .hidden _Unwind_DeleteException
00003c54 g     F .text	000000c4 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00005d19 g       *ABS*	00000000 __CTOR_LIST__
00009000 g       *ABS*	00000000 __alt_stack_pointer
00003a74 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00005604 g     F .text	00000030 altera_avalon_jtag_uart_write
00005f78  w    O .rodata	00000012 _ZTSSt13bad_exception
00004a50 g     F .text	000004ec ___vfprintf_internal_r
0000459c g     F .text	00000100 _free_r
00000c64 g     F .text	000000a0 _ZN18CentralizedMonitor13SetFaultFlagsEm
00000b50 g     F .text	000000a0 _ZN18CentralizedMonitor13SetErrorFlagsEm
00000020 g     F .text	0000007c _start
00006050  w    O .rodata	0000000d _ZTSSt9type_info
00005658 g     F .text	000000d4 alt_avalon_spi_command
00008000 g       *ABS*	00000000 __alt_mem_data_ram_0
0000558c g     F .text	00000020 alt_sys_init
00003774 g     F .text	0000000c _ZGTtNKSt13bad_exception4whatEv
00000e5c g     F .text	00000070 _ZN18CentralizedMonitor22MotorControllerHandlerEPv
000037e8 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00000df0 g     F .text	0000006c _ZN18CentralizedMonitor23VectorControllerHandlerEPv
0000b000 g     O .shared	00000028 _ZN12SharedMemory13_SharedMemoryE
00008000 g       *ABS*	00000000 __ram_rwdata_start
0000428c g     F .text	000000c8 .hidden _Unwind_SjLj_RaiseException
00005d20 g       *ABS*	00000000 __ram_rodata_start
00000ef4 g     F .text	000000b4 _ZN18CentralizedMonitor10InitializeEv
00004398 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00003a68 g     F .text	00000004 _ZNSt9type_infoD2Ev
000039e4 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0000833c g     O .bss	00000010 _ZN15WheelController21_LastCurrentReferenceE
00005af4 g     F .text	00000084 alt_busy_sleep
0000825c  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
00005634 g     F .text	00000024 perf_get_section_time
00005cac g     F .text	00000030 memcmp
0000836c g       *ABS*	00000000 __alt_stack_base
000037a0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
000043dc g     F .text	00000040 .hidden _Unwind_SjLj_Resume_or_Rethrow
00003a6c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00008244 g     O .rwdata	00000004 _ZN18CentralizedMonitor12_Adc2TimeoutE
00000ab4  w    F .text	0000005c _ZN15CriticalSectionD1Ev
00005b84 g     F .text	0000006c alt_dev_llist_insert
0000540c g     F .text	00000004 __malloc_lock
00005498 g     F .text	00000068 sbrk
00006090  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00003288 g     F .text	00000060 __cxa_throw
00001eec g     F .text	00000188 _ZN17StreamTransmitter14TransmitMotionEi
00004250 g     F .text	00000010 .hidden _Unwind_SetIP
00004f54 g     F .text	000000a8 __sfvwrite_small_dev
00008290 g       *ABS*	00000000 __bss_start
00003d7c g     F .text	0000005c fminf
0000457c g     F .text	00000020 memset
00003d20 g     F .text	0000005c fmaxf
00005808 g     F .text	0000004c alt_msgdma_open
00001b44 g     F .text	0000012c main
00001778 g     F .text	000000d8 _ZN3Imu10InitializeEv
000082e4 g     O .bss	00000004 alt_envp
00003788 g     F .text	0000000c __cxa_get_globals_fast
00003ee4 g     F .text	000000b4 .hidden __ltsf2
00000a98  w    F .text	0000001c _ZN15CriticalSectionC2Ev
00000d04 g     F .text	000000ec _ZN18CentralizedMonitor11Pio1HandlerEPv
00009000 g       *ABS*	00000000 __alt_heap_limit
000082c4 g     O .bss	00000004 _ZN15WheelController11_SpeedGainIE
0000469c g     F .text	00000160 _malloc_r
00003774 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
00002130 g     F .text	000001c4 _ZN15WheelController6UpdateEb
0000828c g     O .rwdata	00000004 alt_errno
00000fa8 g     F .text	0000012c _ZN18CentralizedMonitor15ClearErrorFlagsEv
00006084  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00001568 g     F .text	00000068 _ZN4Adc212ReadRegisterEiPt
00003770 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00005068 g     F .text	00000080 .hidden __divsi3
00005d20 g       *ABS*	00000000 __CTOR_END__
000082f0 g     O .bss	00000004 alt_vic_dev_list
000049a0 g     F .text	00000044 strcmp
00005d20 g       *ABS*	00000000 __flash_rodata_start
000013ac g     F .text	0000003c _ZN4Adc25StartEv
00005560 g     F .text	0000002c alt_irq_init
000037b0 g     F .text	00000038 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0000125c g     F .text	000000f0 _ZN17DribbleController6UpdateEb
00003e2c g     F .text	000000b8 .hidden __gesf2
00005018 g     F .text	00000050 _write_r
00004284 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
000035ac g     F .text	00000058 __cxa_call_terminate
00008270 g     O .rwdata	00000004 _impure_ptr
00008254  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
000082ec g     O .bss	00000004 alt_argc
000005c0 g     F .text	00000034 mscore_init
000031b0 g     F .text	0000000c _ZSt14get_unexpectedv
000059dc g     F .text	0000009c alt_vic_irq_init
00004274 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00005fb8  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00004260 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00000bf0 g     F .text	00000074 _ZN18CentralizedMonitor13Adc2KeepAliveEi
00003604 g     F .text	000000b8 __cxa_begin_catch
00003b04 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00003180 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00000020 g       *ABS*	00000000 __ram_exceptions_start
00003780 g     F .text	00000008 _ZNSt13bad_exceptionD0Ev
00008264 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00005a78 g     F .text	0000007c alt_ic_isr_register
000034c8 g     F .text	00000058 __cxa_allocate_exception
00006018  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00008290 g       *ABS*	00000000 _edata
000020f0 g     F .text	00000040 _ZN15WheelController11StopControlEv
000082b1 g     O .bss	00000001 _ZN3Imu5_BankE
0000836c g       *ABS*	00000000 _end
00001ecc g     F .text	00000020 _ZN17StreamTransmitter12TransmitAdc2Ev
00002890 g     F .text	00000698 __gxx_personality_sj0
00000020 g       *ABS*	00000000 __ram_exceptions_end
000008e4 g     F .text	00000028 msopt_get_argc
00001714 g     F .text	00000064 _ZN3Imu13WriteRegisterEmh
00000ab4  w    F .text	0000005c _ZN15CriticalSectionD2Ev
0000b000 g       *ABS*	00000000 __alt_mem_data_ram_1
00004208 g     F .text	00000018 .hidden _Unwind_SetGR
00003948 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
000030a4 g     F .text	000000c8 _ZN10__cxxabiv111__terminateEPFvvE
000050e8 g     F .text	00000074 .hidden __modsi3
00009000 g       *ABS*	00000000 __alt_data_end
00005f8c  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_instruction_rom_0
00008294 g     O .bss	00000004 _ZN18CentralizedMonitor11_ErrorFlagsE
0000000c g       .entry	00000000 _exit
000041d8 g     F .text	00000018 .hidden _Unwind_GetGR
00003794 g     F .text	0000000c __cxa_get_globals
00008248 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0000827c g     O .rwdata	00000008 alt_msgdma_list
00004ffc g     F .text	0000001c strlen
00008268  w    O .rwdata	00000008 _ZTISt9type_info
00005414 g     F .text	0000004c alt_putchar
000015d0 g     F .text	0000003c _ZN4Adc210InitializeEv
00005f68  w    O .rodata	0000000d _ZTSSt9exception
000082d8 g     O .bss	00000004 __malloc_sbrk_start
00001c70 g     F .text	00000158 _ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev
00000704 g     F .text	000000d0 mscmd_execute
00001360 g     F .text	0000004c _ZN4Adc220StartConversionAsyncEi
00005ca8 g     F .text	00000004 alt_icache_flush_all
00001208 g     F .text	00000020 _ZN18CentralizedMonitor11Pio0HandlerEPv
0000427c g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00001eac g     F .text	00000020 _ZN17StreamTransmitter14TransmitStatusEv
000082dc g     O .bss	00000004 __malloc_free_list
00004f3c g     F .text	00000018 __vfprintf_internal
000011dc g     F .text	0000002c _ZN18CentralizedMonitor12TimerHandlerEPv
00005bf0 g     F .text	00000048 _do_ctors
0000160c g     F .text	00000058 _ZN3Imu8ReadDataEP11ImuResult_t
00005f98  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00005358 g     F .text	00000084 alt_load
0000097c g     F .text	00000060 ntlibc_strcmp
00004940 g     F .text	00000010 raise
000044e4 g     F .text	00000010 free
000005f4 g     F .text	000000fc mscore_push
00003b14 g     F .text	00000038 _ZN10__cxxabiv117__class_type_infoD0Ev
000082f4 g     O .bss	00000018 _ZN12SharedMemory11_ParametersE



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
      20:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
      24:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
      28:	10000426 	beq	r2,zero,3c <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
      2c:	07800014 	movui	sstatus,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
      30:	07400034 	movhi	ea,0
    ori ea, ea, %lo(0f)
      34:	ef400f14 	ori	ea,ea,60
    eret
      38:	ef80083a 	eret

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      3c:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      40:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
      44:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
      48:	d6809114 	ori	gp,gp,580
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
      4c:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
      50:	00c000d4 	movui	r3,3
    movhi r4, 1     /* Constant to increment STATUS.PRS */
      54:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
      58:	1105883a 	add	r2,r2,r4
    wrctl status, r2
      5c:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
      60:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
      64:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
      68:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
      6c:	183ffa1e 	bne	r3,zero,58 <_start+0x38>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      70:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      74:	10a0a414 	ori	r2,r2,33424

    movhi r3, %hi(__bss_end)
      78:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      7c:	18e0db14 	ori	r3,r3,33644

    beq r2, r3, 1f
      80:	10c00326 	beq	r2,r3,90 <_start+0x70>

0:
    stw zero, (r2)
      84:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      88:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      8c:	10fffd36 	bltu	r2,r3,84 <_start+0x64>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      90:	00053580 	call	5358 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      94:	00053dc0 	call	53dc <alt_main>

00000098 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      98:	003fff06 	br	98 <alt_after_alt_main>

0000009c <print_buffer>:
    }
    return buf;
}

static int print_buffer(MICROSHELL *handle, char *buf, int ofs)
{
      9c:	defffb04 	addi	sp,sp,-20
      a0:	dcc00315 	stw	r19,12(sp)
      a4:	dc800215 	stw	r18,8(sp)
      a8:	dc400115 	stw	r17,4(sp)
      ac:	dc000015 	stw	r16,0(sp)
      b0:	dfc00415 	stw	ra,16(sp)
      b4:	2027883a 	mov	r19,r4
      b8:	2823883a 	mov	r17,r5
      bc:	3025883a 	mov	r18,r6
    int cnt = 0;
      c0:	0021883a 	mov	r16,zero
    char *p = buf + ofs;
    while (*p) {
      c4:	8485883a 	add	r2,r16,r18
      c8:	8885883a 	add	r2,r17,r2
      cc:	11000007 	ldb	r4,0(r2)
      d0:	2000081e 	bne	r4,zero,f4 <print_buffer+0x58>
        handle->uart_putc(*p++);
        cnt++;
    }
    return cnt;
}
      d4:	8005883a 	mov	r2,r16
      d8:	dfc00417 	ldw	ra,16(sp)
      dc:	dcc00317 	ldw	r19,12(sp)
      e0:	dc800217 	ldw	r18,8(sp)
      e4:	dc400117 	ldw	r17,4(sp)
      e8:	dc000017 	ldw	r16,0(sp)
      ec:	dec00504 	addi	sp,sp,20
      f0:	f800283a 	ret
        handle->uart_putc(*p++);
      f4:	98800317 	ldw	r2,12(r19)
        cnt++;
      f8:	84000044 	addi	r16,r16,1
        handle->uart_putc(*p++);
      fc:	103ee83a 	callr	r2
        cnt++;
     100:	003ff006 	br	c4 <print_buffer+0x28>

00000104 <print_return>:
    return 1;
}

static void print_return(MICROSHELL *handle)
{
    handle->uart_putc('\r');
     104:	20800317 	ldw	r2,12(r4)
{
     108:	defffe04 	addi	sp,sp,-8
     10c:	dc000015 	stw	r16,0(sp)
     110:	dfc00115 	stw	ra,4(sp)
     114:	2021883a 	mov	r16,r4
    handle->uart_putc('\r');
     118:	01000344 	movi	r4,13
     11c:	103ee83a 	callr	r2
    handle->uart_putc('\n');
     120:	80800317 	ldw	r2,12(r16)
     124:	01000284 	movi	r4,10
}
     128:	dfc00117 	ldw	ra,4(sp)
     12c:	dc000017 	ldw	r16,0(sp)
     130:	dec00204 	addi	sp,sp,8
    handle->uart_putc('\n');
     134:	1000683a 	jmp	r2

00000138 <cursor_left>:

static void cursor_left(MICROSHELL *handle, int n)
{
     138:	defffc04 	addi	sp,sp,-16
     13c:	dc800215 	stw	r18,8(sp)
     140:	dc400115 	stw	r17,4(sp)
     144:	dc000015 	stw	r16,0(sp)
     148:	dfc00315 	stw	ra,12(sp)
     14c:	2021883a 	mov	r16,r4
     150:	2823883a 	mov	r17,r5
    int i;
    for (i = 0; i < n; i++) {
     154:	0025883a 	mov	r18,zero
     158:	94400616 	blt	r18,r17,174 <cursor_left+0x3c>
        handle->uart_putc('\x1B');
        handle->uart_putc('[');
        handle->uart_putc('D');
    }
}
     15c:	dfc00317 	ldw	ra,12(sp)
     160:	dc800217 	ldw	r18,8(sp)
     164:	dc400117 	ldw	r17,4(sp)
     168:	dc000017 	ldw	r16,0(sp)
     16c:	dec00404 	addi	sp,sp,16
     170:	f800283a 	ret
        handle->uart_putc('\x1B');
     174:	80800317 	ldw	r2,12(r16)
     178:	010006c4 	movi	r4,27
    for (i = 0; i < n; i++) {
     17c:	94800044 	addi	r18,r18,1
        handle->uart_putc('\x1B');
     180:	103ee83a 	callr	r2
        handle->uart_putc('[');
     184:	80800317 	ldw	r2,12(r16)
     188:	010016c4 	movi	r4,91
     18c:	103ee83a 	callr	r2
        handle->uart_putc('D');
     190:	80800317 	ldw	r2,12(r16)
     194:	01001104 	movi	r4,68
     198:	103ee83a 	callr	r2
    for (i = 0; i < n; i++) {
     19c:	003fee06 	br	158 <cursor_left+0x20>

000001a0 <cursor_right>:

static void cursor_right(MICROSHELL *handle, int n)
{
     1a0:	defffc04 	addi	sp,sp,-16
     1a4:	dc800215 	stw	r18,8(sp)
     1a8:	dc400115 	stw	r17,4(sp)
     1ac:	dc000015 	stw	r16,0(sp)
     1b0:	dfc00315 	stw	ra,12(sp)
     1b4:	2021883a 	mov	r16,r4
     1b8:	2825883a 	mov	r18,r5
    int i;
    for (i = 0; i < n; i++) {
     1bc:	0023883a 	mov	r17,zero
        handle->uart_putc('\x1B');
     1c0:	80800317 	ldw	r2,12(r16)
     1c4:	010006c4 	movi	r4,27
    for (i = 0; i < n; i++) {
     1c8:	8c400044 	addi	r17,r17,1
        handle->uart_putc('\x1B');
     1cc:	103ee83a 	callr	r2
        handle->uart_putc('[');
     1d0:	80800317 	ldw	r2,12(r16)
     1d4:	010016c4 	movi	r4,91
     1d8:	103ee83a 	callr	r2
        handle->uart_putc('C');
     1dc:	80800317 	ldw	r2,12(r16)
     1e0:	010010c4 	movi	r4,67
     1e4:	103ee83a 	callr	r2
    for (i = 0; i < n; i++) {
     1e8:	947ff51e 	bne	r18,r17,1c0 <cursor_right+0x20>
    }
}
     1ec:	dfc00317 	ldw	ra,12(sp)
     1f0:	dc800217 	ldw	r18,8(sp)
     1f4:	dc400117 	ldw	r17,4(sp)
     1f8:	dc000017 	ldw	r16,0(sp)
     1fc:	dec00404 	addi	sp,sp,16
     200:	f800283a 	ret

00000204 <microshell_init>:

void microshell_init(MICROSHELL *handle, MICROSHELL_UART_PUTC uart_putc, MICROSHELL_UART_GETC uart_getc, MICROSHELL_ACTION_HOOK action_hook)
{
     204:	defffb04 	addi	sp,sp,-20
     208:	dcc00315 	stw	r19,12(sp)
     20c:	dc800215 	stw	r18,8(sp)
     210:	dc400115 	stw	r17,4(sp)
     214:	dc000015 	stw	r16,0(sp)
     218:	dfc00415 	stw	ra,16(sp)
     21c:	2021883a 	mov	r16,r4
     220:	2827883a 	mov	r19,r5
     224:	3025883a 	mov	r18,r6
     228:	3823883a 	mov	r17,r7
    mscore_init(&(handle->mscore));
     22c:	00005c00 	call	5c0 <mscore_init>
    handle->uart_putc = uart_putc;
     230:	84c00315 	stw	r19,12(r16)
    handle->uart_getc = uart_getc;
     234:	84800415 	stw	r18,16(r16)
    handle->action_hook = action_hook;
     238:	84400515 	stw	r17,20(r16)
}
     23c:	dfc00417 	ldw	ra,16(sp)
     240:	dcc00317 	ldw	r19,12(sp)
     244:	dc800217 	ldw	r18,8(sp)
     248:	dc400117 	ldw	r17,4(sp)
     24c:	dc000017 	ldw	r16,0(sp)
     250:	dec00504 	addi	sp,sp,20
     254:	f800283a 	ret

00000258 <microshell_getline>:

char *microshell_getline(MICROSHELL *handle, char *buf, int siz)
{
     258:	defff504 	addi	sp,sp,-44
     25c:	dd400615 	stw	r21,24(sp)
     260:	dc800315 	stw	r18,12(sp)
     264:	dc400215 	stw	r17,8(sp)
     268:	dfc00a15 	stw	ra,40(sp)
     26c:	df000915 	stw	fp,36(sp)
     270:	ddc00815 	stw	r23,32(sp)
     274:	dd800715 	stw	r22,28(sp)
     278:	dd000515 	stw	r20,20(sp)
     27c:	dcc00415 	stw	r19,16(sp)
     280:	dc000115 	stw	r16,4(sp)
     284:	2023883a 	mov	r17,r4
     288:	2825883a 	mov	r18,r5
     28c:	302b883a 	mov	r21,r6
        *p++ = 0;
     290:	3000330e 	bge	r6,zero,360 <microshell_getline+0x108>
     294:	002f883a 	mov	r23,zero
     298:	b80d883a 	mov	r6,r23
     29c:	000b883a 	mov	r5,zero
     2a0:	9009883a 	mov	r4,r18
     2a4:	000457c0 	call	457c <memset>
    char *ptr = buf;
     2a8:	9029883a 	mov	r20,r18
    int pos = 0;
    int len = 0;
     2ac:	0027883a 	mov	r19,zero
    int pos = 0;
     2b0:	0021883a 	mov	r16,zero
                    *ptr++ = c;
                    pos++;
                    len++;
                    n += print_buffer(handle, buf, pos);
                    cursor_left(handle, n);
                    if (len >= siz - 1) {
     2b4:	ad7fffc4 	addi	r21,r21,-1
        char c = handle->uart_getc();
     2b8:	88800417 	ldw	r2,16(r17)
     2bc:	103ee83a 	callr	r2
     2c0:	102d883a 	mov	r22,r2
        MSCORE_ACTION action = mscore_push(&(handle->mscore), c);
     2c4:	b7003fcc 	andi	fp,r22,255
     2c8:	e700201c 	xori	fp,fp,128
     2cc:	e73fe004 	addi	fp,fp,-128
     2d0:	8809883a 	mov	r4,r17
     2d4:	e00b883a 	mov	r5,fp
     2d8:	00005f40 	call	5f4 <mscore_push>
     2dc:	1009883a 	mov	r4,r2
        if (handle->action_hook) {
     2e0:	88800517 	ldw	r2,20(r17)
     2e4:	10000326 	beq	r2,zero,2f4 <microshell_getline+0x9c>
            handle->action_hook(action);
     2e8:	d9000015 	stw	r4,0(sp)
     2ec:	103ee83a 	callr	r2
     2f0:	d9000017 	ldw	r4,0(sp)
        switch (action) {
     2f4:	20800468 	cmpgeui	r2,r4,17
     2f8:	10001b1e 	bne	r2,zero,368 <microshell_getline+0x110>
     2fc:	203fee26 	beq	r4,zero,2b8 <microshell_getline+0x60>
     300:	213fffc4 	addi	r4,r4,-1
     304:	20800428 	cmpgeui	r2,r4,16
     308:	103feb1e 	bne	r2,zero,2b8 <microshell_getline+0x60>
     30c:	200890ba 	slli	r4,r4,2
     310:	00800034 	movhi	r2,0
     314:	2085883a 	add	r2,r4,r2
     318:	1080c817 	ldw	r2,800(r2)
     31c:	1000683a 	jmp	r2
     320:	0000042c 	andhi	zero,zero,16
     324:	000004bc 	xorhi	zero,zero,18
     328:	00000530 	cmpltui	zero,zero,20
     32c:	000002b8 	rdprs	zero,zero,10
     330:	000002b8 	rdprs	zero,zero,10
     334:	000003f0 	cmpltui	zero,zero,15
     338:	000005a4 	muli	zero,zero,22
     33c:	00000590 	cmplti	zero,zero,22
     340:	000003c8 	cmpgei	zero,zero,15
     344:	00000530 	cmpltui	zero,zero,20
     348:	000003ac 	andhi	zero,zero,14
     34c:	00000388 	cmpgei	zero,zero,14
     350:	000002b8 	rdprs	zero,zero,10
     354:	000004bc 	xorhi	zero,zero,18
     358:	000002b8 	rdprs	zero,zero,10
     35c:	000003f0 	cmpltui	zero,zero,15
     360:	302f883a 	mov	r23,r6
     364:	003fcc06 	br	298 <microshell_getline+0x40>
     368:	20800c60 	cmpeqi	r2,r4,49
     36c:	10008d1e 	bne	r2,zero,5a4 <microshell_getline+0x34c>
     370:	20800ca8 	cmpgeui	r2,r4,50
     374:	10000b1e 	bne	r2,zero,3a4 <microshell_getline+0x14c>
     378:	20800be0 	cmpeqi	r2,r4,47
     37c:	1000841e 	bne	r2,zero,590 <microshell_getline+0x338>
     380:	21000c20 	cmpeqi	r4,r4,48
     384:	203fcc26 	beq	r4,zero,2b8 <microshell_getline+0x60>
                    cursor_left(handle, 1);
                }
                break;
            case MSCORE_ACTION_ARROW_RIGHT:
            case MSCORE_ACTION_CTRL_F:
                if (pos < len) {
     388:	84ffcb0e 	bge	r16,r19,2b8 <microshell_getline+0x60>
                    ptr++;
                    pos++;
                    cursor_right(handle, 1);
     38c:	01400044 	movi	r5,1
     390:	8809883a 	mov	r4,r17
                    ptr++;
     394:	a5000044 	addi	r20,r20,1
                    pos++;
     398:	84000044 	addi	r16,r16,1
                    cursor_right(handle, 1);
     39c:	00001a00 	call	1a0 <cursor_right>
     3a0:	003fc506 	br	2b8 <microshell_getline+0x60>
        switch (action) {
     3a4:	21000ca0 	cmpeqi	r4,r4,50
     3a8:	203fc326 	beq	r4,zero,2b8 <microshell_getline+0x60>
                    cursor_left(handle, n);
                }
                break;
            case MSCORE_ACTION_END:
            case MSCORE_ACTION_CTRL_E:
                if (pos < len) {
     3ac:	84ffc20e 	bge	r16,r19,2b8 <microshell_getline+0x60>
                    int n = len - pos;
     3b0:	9c0bc83a 	sub	r5,r19,r16
                    ptr += n;
                    pos = len;
                    cursor_right(handle, n);
     3b4:	8809883a 	mov	r4,r17
                    ptr += n;
     3b8:	a169883a 	add	r20,r20,r5
                    cursor_right(handle, n);
     3bc:	9821883a 	mov	r16,r19
     3c0:	00001a00 	call	1a0 <cursor_right>
     3c4:	003fbc06 	br	2b8 <microshell_getline+0x60>
        *p++ = 0;
     3c8:	b80d883a 	mov	r6,r23
     3cc:	000b883a 	mov	r5,zero
     3d0:	9009883a 	mov	r4,r18
     3d4:	000457c0 	call	457c <memset>
    handle->uart_putc(c);
     3d8:	88800317 	ldw	r2,12(r17)
     3dc:	01001784 	movi	r4,94
     3e0:	103ee83a 	callr	r2
     3e4:	88800317 	ldw	r2,12(r17)
     3e8:	010010c4 	movi	r4,67
     3ec:	103ee83a 	callr	r2
                print_return(handle);
     3f0:	8809883a 	mov	r4,r17
     3f4:	00001040 	call	104 <print_return>
        }
    }

end:
    return buf;
}
     3f8:	9005883a 	mov	r2,r18
     3fc:	dfc00a17 	ldw	ra,40(sp)
     400:	df000917 	ldw	fp,36(sp)
     404:	ddc00817 	ldw	r23,32(sp)
     408:	dd800717 	ldw	r22,28(sp)
     40c:	dd400617 	ldw	r21,24(sp)
     410:	dd000517 	ldw	r20,20(sp)
     414:	dcc00417 	ldw	r19,16(sp)
     418:	dc800317 	ldw	r18,12(sp)
     41c:	dc400217 	ldw	r17,8(sp)
     420:	dc000117 	ldw	r16,4(sp)
     424:	dec00b04 	addi	sp,sp,44
     428:	f800283a 	ret
                    copy_backward(buf, pos - 1, pos - 0, len - pos + 1);
     42c:	9c05c83a 	sub	r2,r19,r16
        *p_des-- = *p_src--;
     430:	10ffffd0 	cmplti	r3,r2,-1
                    copy_backward(buf, pos - 1, pos - 0, len - pos + 1);
     434:	11000044 	addi	r4,r2,1
        *p_des-- = *p_src--;
     438:	18001c1e 	bne	r3,zero,4ac <microshell_getline+0x254>
     43c:	0085c83a 	sub	r2,zero,r2
     440:	18001c1e 	bne	r3,zero,4b4 <microshell_getline+0x25c>
     444:	200d883a 	mov	r6,r4
                    copy_backward(buf, pos - 1, pos - 0, len - pos + 1);
     448:	817fffc4 	addi	r5,r16,-1
    char *p_src = buf + ofs_src + siz;
     44c:	290b883a 	add	r5,r5,r4
    char *p_des = buf + ofs_des + siz;
     450:	8109883a 	add	r4,r16,r4
        *p_des-- = *p_src--;
     454:	288b883a 	add	r5,r5,r2
     458:	2089883a 	add	r4,r4,r2
     45c:	914b883a 	add	r5,r18,r5
     460:	9109883a 	add	r4,r18,r4
     464:	000451c0 	call	451c <memmove>
                    handle->uart_putc(c);
     468:	88800317 	ldw	r2,12(r17)
     46c:	e009883a 	mov	r4,fp
                    pos++;
     470:	84000044 	addi	r16,r16,1
                    handle->uart_putc(c);
     474:	103ee83a 	callr	r2
                    n += print_buffer(handle, buf, pos);
     478:	900b883a 	mov	r5,r18
     47c:	8809883a 	mov	r4,r17
                    *ptr++ = c;
     480:	a5800005 	stb	r22,0(r20)
                    n += print_buffer(handle, buf, pos);
     484:	800d883a 	mov	r6,r16
     488:	000009c0 	call	9c <print_buffer>
                    len++;
     48c:	9cc00044 	addi	r19,r19,1
                    cursor_left(handle, n);
     490:	100b883a 	mov	r5,r2
     494:	8809883a 	mov	r4,r17
                    *ptr++ = c;
     498:	a7000044 	addi	fp,r20,1
                    cursor_left(handle, n);
     49c:	00001380 	call	138 <cursor_left>
                    if (len >= siz - 1) {
     4a0:	9d7fd30e 	bge	r19,r21,3f0 <microshell_getline+0x198>
                    *ptr++ = c;
     4a4:	e029883a 	mov	r20,fp
     4a8:	003f8306 	br	2b8 <microshell_getline+0x60>
        *p_des-- = *p_src--;
     4ac:	00800044 	movi	r2,1
     4b0:	003fe306 	br	440 <microshell_getline+0x1e8>
     4b4:	000d883a 	mov	r6,zero
     4b8:	003fe306 	br	448 <microshell_getline+0x1f0>
                if (pos > 0) {
     4bc:	803f7e26 	beq	r16,zero,2b8 <microshell_getline+0x60>
                    copy_forward(buf, pos, pos - 1, len - pos + 1);
     4c0:	9c0dc83a 	sub	r6,r19,r16
        *p_des++ = *p_src++;
     4c4:	30bfffd0 	cmplti	r2,r6,-1
                    copy_forward(buf, pos, pos - 1, len - pos + 1);
     4c8:	85bfffc4 	addi	r22,r16,-1
        *p_des++ = *p_src++;
     4cc:	1000161e 	bne	r2,zero,528 <microshell_getline+0x2d0>
     4d0:	31800044 	addi	r6,r6,1
     4d4:	940b883a 	add	r5,r18,r16
     4d8:	9589883a 	add	r4,r18,r22
     4dc:	000451c0 	call	451c <memmove>
                    cursor_left(handle, 1);
     4e0:	01400044 	movi	r5,1
     4e4:	8809883a 	mov	r4,r17
     4e8:	00001380 	call	138 <cursor_left>
                    n += print_buffer(handle, buf, pos);
     4ec:	b00d883a 	mov	r6,r22
     4f0:	900b883a 	mov	r5,r18
     4f4:	8809883a 	mov	r4,r17
     4f8:	000009c0 	call	9c <print_buffer>
     4fc:	1021883a 	mov	r16,r2
    handle->uart_putc(c);
     500:	88800317 	ldw	r2,12(r17)
     504:	01000804 	movi	r4,32
                    ptr--;
     508:	a53fffc4 	addi	r20,r20,-1
    handle->uart_putc(c);
     50c:	103ee83a 	callr	r2
                    cursor_left(handle, n);
     510:	81400044 	addi	r5,r16,1
     514:	8809883a 	mov	r4,r17
                    len--;
     518:	9cffffc4 	addi	r19,r19,-1
                    cursor_left(handle, n);
     51c:	00001380 	call	138 <cursor_left>
                    pos--;
     520:	b021883a 	mov	r16,r22
     524:	003f6406 	br	2b8 <microshell_getline+0x60>
        *p_des++ = *p_src++;
     528:	000d883a 	mov	r6,zero
     52c:	003fe906 	br	4d4 <microshell_getline+0x27c>
                if (len > 0) {
     530:	04ff610e 	bge	zero,r19,2b8 <microshell_getline+0x60>
                    copy_forward(buf, pos + 1, pos + 0, len - pos + 1);
     534:	9c0dc83a 	sub	r6,r19,r16
        *p_des++ = *p_src++;
     538:	30bfffd0 	cmplti	r2,r6,-1
     53c:	1000121e 	bne	r2,zero,588 <microshell_getline+0x330>
     540:	31800044 	addi	r6,r6,1
                    copy_forward(buf, pos + 1, pos + 0, len - pos + 1);
     544:	81400044 	addi	r5,r16,1
        *p_des++ = *p_src++;
     548:	914b883a 	add	r5,r18,r5
     54c:	9409883a 	add	r4,r18,r16
     550:	000451c0 	call	451c <memmove>
                    n += print_buffer(handle, buf, pos);
     554:	900b883a 	mov	r5,r18
     558:	800d883a 	mov	r6,r16
     55c:	8809883a 	mov	r4,r17
     560:	000009c0 	call	9c <print_buffer>
     564:	102d883a 	mov	r22,r2
    handle->uart_putc(c);
     568:	88800317 	ldw	r2,12(r17)
     56c:	01000804 	movi	r4,32
                    len--;
     570:	9cffffc4 	addi	r19,r19,-1
    handle->uart_putc(c);
     574:	103ee83a 	callr	r2
                    cursor_left(handle, n);
     578:	b1400044 	addi	r5,r22,1
                    cursor_left(handle, 1);
     57c:	8809883a 	mov	r4,r17
     580:	00001380 	call	138 <cursor_left>
     584:	003f4c06 	br	2b8 <microshell_getline+0x60>
        *p_des++ = *p_src++;
     588:	000d883a 	mov	r6,zero
     58c:	003fed06 	br	544 <microshell_getline+0x2ec>
                if (pos > 0) {
     590:	803f4926 	beq	r16,zero,2b8 <microshell_getline+0x60>
                    ptr--;
     594:	a53fffc4 	addi	r20,r20,-1
                    pos--;
     598:	843fffc4 	addi	r16,r16,-1
                    cursor_left(handle, 1);
     59c:	01400044 	movi	r5,1
     5a0:	003ff606 	br	57c <microshell_getline+0x324>
                if (pos > 0) {
     5a4:	803f4426 	beq	r16,zero,2b8 <microshell_getline+0x60>
                    cursor_left(handle, n);
     5a8:	800b883a 	mov	r5,r16
     5ac:	8809883a 	mov	r4,r17
                    ptr -= n;
     5b0:	a429c83a 	sub	r20,r20,r16
                    cursor_left(handle, n);
     5b4:	00001380 	call	138 <cursor_left>
                    pos = 0;
     5b8:	0021883a 	mov	r16,zero
     5bc:	003f3e06 	br	2b8 <microshell_getline+0x60>

000005c0 <mscore_init>:
    }
    return 1;
}

void mscore_init(MSCORE *handle)
{
     5c0:	defffe04 	addi	sp,sp,-8
     5c4:	dc000015 	stw	r16,0(sp)
        buf[i] = 0;
     5c8:	01800204 	movi	r6,8
{
     5cc:	2021883a 	mov	r16,r4
        buf[i] = 0;
     5d0:	000b883a 	mov	r5,zero
     5d4:	21000104 	addi	r4,r4,4
{
     5d8:	dfc00115 	stw	ra,4(sp)
        buf[i] = 0;
     5dc:	000457c0 	call	457c <memset>
    buf_clear(handle->keybuf, MSCORE_BUFFER_SIZE);
    handle->keycnt = 0;
     5e0:	80000015 	stw	zero,0(r16)
}
     5e4:	dfc00117 	ldw	ra,4(sp)
     5e8:	dc000017 	ldw	r16,0(sp)
     5ec:	dec00204 	addi	sp,sp,8
     5f0:	f800283a 	ret

000005f4 <mscore_push>:

MSCORE_ACTION mscore_push(MSCORE *handle, char c)
{
    int match = 0;
    handle->keybuf[handle->keycnt++] = c;
     5f4:	20800017 	ldw	r2,0(r4)
{
     5f8:	defffd04 	addi	sp,sp,-12
     5fc:	dc400115 	stw	r17,4(sp)
     600:	dc000015 	stw	r16,0(sp)
     604:	dfc00215 	stw	ra,8(sp)
    handle->keybuf[handle->keycnt++] = c;
     608:	11c00044 	addi	r7,r2,1
     60c:	21c00015 	stw	r7,0(r4)
     610:	2085883a 	add	r2,r4,r2
    const MSCORE_KEYMAP *p = &kmlist[0];
     614:	04400034 	movhi	r17,0
    const int N = sizeof(kmlist) / sizeof(kmlist[0]);
    int i;
    for (i = 0; i < N; i++) {
     618:	01800034 	movhi	r6,0
{
     61c:	2007883a 	mov	r3,r4
     620:	2821883a 	mov	r16,r5
    handle->keybuf[handle->keycnt++] = c;
     624:	11400105 	stb	r5,4(r2)
    const MSCORE_KEYMAP *p = &kmlist[0];
     628:	8c575904 	addi	r17,r17,23908
        if (handle->keycnt == buf_length(p->stream))  {
            if (buf_match(p->stream, handle->keybuf, handle->keycnt)) {
     62c:	21000104 	addi	r4,r4,4
    for (i = 0; i < N; i++) {
     630:	31977504 	addi	r6,r6,24020
        if (handle->keycnt == buf_length(p->stream))  {
     634:	8a000017 	ldw	r8,0(r17)
    int n = 0;
     638:	000b883a 	mov	r5,zero
    while (*buf++) {
     63c:	4145883a 	add	r2,r8,r5
     640:	10800007 	ldb	r2,0(r2)
     644:	1000081e 	bne	r2,zero,668 <mscore_push+0x74>
        if (handle->keycnt == buf_length(p->stream))  {
     648:	39401626 	beq	r7,r5,6a4 <mscore_push+0xb0>
    for (i = 0; i < n; i++) {
     64c:	11c01716 	blt	r2,r7,6ac <mscore_push+0xb8>
        buf_clear(handle->keybuf, MSCORE_BUFFER_SIZE);
        if ((' ' <= c) && (c <= '~')) {
            return MSCORE_ACTION_DISPLAYABLE;
        }
    }
    return MSCORE_ACTION_IGNORE;
     650:	0005883a 	mov	r2,zero
}
     654:	dfc00217 	ldw	ra,8(sp)
     658:	dc400117 	ldw	r17,4(sp)
     65c:	dc000017 	ldw	r16,0(sp)
     660:	dec00304 	addi	sp,sp,12
     664:	f800283a 	ret
        n++;
     668:	29400044 	addi	r5,r5,1
     66c:	003ff306 	br	63c <mscore_push+0x48>
        if (*a++ != *b++) {
     670:	4095883a 	add	r10,r8,r2
     674:	1893883a 	add	r9,r3,r2
     678:	52800007 	ldb	r10,0(r10)
     67c:	4a400107 	ldb	r9,4(r9)
     680:	5240111e 	bne	r10,r9,6c8 <mscore_push+0xd4>
    for (i = 0; i < n; i++) {
     684:	10800044 	addi	r2,r2,1
     688:	28bff91e 	bne	r5,r2,670 <mscore_push+0x7c>
                handle->keycnt = 0;
     68c:	18000015 	stw	zero,0(r3)
        buf[i] = 0;
     690:	01800204 	movi	r6,8
     694:	000b883a 	mov	r5,zero
     698:	000457c0 	call	457c <memset>
                return p->action;
     69c:	88800117 	ldw	r2,4(r17)
     6a0:	003fec06 	br	654 <mscore_push+0x60>
    for (i = 0; i < n; i++) {
     6a4:	0005883a 	mov	r2,zero
     6a8:	003ff706 	br	688 <mscore_push+0x94>
        if (*a++ != *b++) {
     6ac:	4093883a 	add	r9,r8,r2
     6b0:	188b883a 	add	r5,r3,r2
     6b4:	4a400007 	ldb	r9,0(r9)
     6b8:	29400107 	ldb	r5,4(r5)
     6bc:	4940021e 	bne	r9,r5,6c8 <mscore_push+0xd4>
    for (i = 0; i < n; i++) {
     6c0:	10800044 	addi	r2,r2,1
     6c4:	003fe106 	br	64c <mscore_push+0x58>
        p++;
     6c8:	8c400204 	addi	r17,r17,8
    for (i = 0; i < N; i++) {
     6cc:	89bfd91e 	bne	r17,r6,634 <mscore_push+0x40>
        handle->keycnt = 0;
     6d0:	18000015 	stw	zero,0(r3)
        buf[i] = 0;
     6d4:	01800204 	movi	r6,8
     6d8:	000b883a 	mov	r5,zero
     6dc:	000457c0 	call	457c <memset>
        if ((' ' <= c) && (c <= '~')) {
     6e0:	80bff804 	addi	r2,r16,-32
     6e4:	10803fcc 	andi	r2,r2,255
     6e8:	108017f0 	cmpltui	r2,r2,95
     6ec:	003fd906 	br	654 <mscore_push+0x60>

000006f0 <mscmd_init>:
#include "mscmd.h"
#include "ntlibc.h"

int mscmd_init(MSCMD *handle, MSCMD_COMMAND_TABLE *command_table, int command_count, MSCMD_USER_OBJECT usrobj)
{
    handle->command_table = command_table;
     6f0:	21400015 	stw	r5,0(r4)
    handle->command_count = command_count;
     6f4:	21800115 	stw	r6,4(r4)
    handle->usrobj = usrobj;
     6f8:	21c00215 	stw	r7,8(r4)
    return 0;
}
     6fc:	0005883a 	mov	r2,zero
     700:	f800283a 	ret

00000704 <mscmd_execute>:

int mscmd_execute(MSCMD *handle, char *text, MSCMD_USER_RESULT *result)
{
     704:	deffd504 	addi	sp,sp,-172
     708:	dc402615 	stw	r17,152(sp)
     70c:	2023883a 	mov	r17,r4
    MSOPT msopt;
    int argc = 0;
    char argv0[MSCONF_MAX_INPUT_LENGTH];

    msopt_init(&msopt, text);
     710:	d9000904 	addi	r4,sp,36
{
     714:	dfc02a15 	stw	ra,168(sp)
     718:	dd002915 	stw	r20,164(sp)
     71c:	dcc02815 	stw	r19,160(sp)
     720:	3029883a 	mov	r20,r6
     724:	dc802715 	stw	r18,156(sp)
     728:	dc002515 	stw	r16,148(sp)
    int argc = 0;
     72c:	d8000015 	stw	zero,0(sp)
    msopt_init(&msopt, text);
     730:	00007d40 	call	7d4 <msopt_init>
    msopt_get_argc(&msopt, &argc);
     734:	d80b883a 	mov	r5,sp
     738:	d9000904 	addi	r4,sp,36
     73c:	00008e40 	call	8e4 <msopt_get_argc>
    if (argc == 0) {
     740:	d8800017 	ldw	r2,0(sp)
     744:	10002126 	beq	r2,zero,7cc <mscmd_execute+0xc8>
        return -1;
    }
    MSCMD_COMMAND_TABLE *p = handle->command_table;
     748:	8c800017 	ldw	r18,0(r17)
    int i;
    for (i = 0; i < handle->command_count; i++) {
     74c:	0027883a 	mov	r19,zero
     750:	88800117 	ldw	r2,4(r17)
     754:	98800216 	blt	r19,r2,760 <mscmd_execute+0x5c>
            *result = p->func(&msopt, handle->usrobj);
            return 0;
        }
        p++;
    }
    return -2;
     758:	043fff84 	movi	r16,-2
     75c:	00000f06 	br	79c <mscmd_execute+0x98>
        msopt_get_argv(&msopt, 0, argv0, sizeof(argv0));
     760:	01c00804 	movi	r7,32
     764:	d9800104 	addi	r6,sp,4
     768:	000b883a 	mov	r5,zero
     76c:	d9000904 	addi	r4,sp,36
     770:	000090c0 	call	90c <msopt_get_argv>
        if (ntlibc_strcmp(argv0, p->argv0) == 0) {
     774:	91400017 	ldw	r5,0(r18)
     778:	d9000104 	addi	r4,sp,4
     77c:	000097c0 	call	97c <ntlibc_strcmp>
     780:	1021883a 	mov	r16,r2
     784:	10000e1e 	bne	r2,zero,7c0 <mscmd_execute+0xbc>
            *result = p->func(&msopt, handle->usrobj);
     788:	90800117 	ldw	r2,4(r18)
     78c:	89400217 	ldw	r5,8(r17)
     790:	d9000904 	addi	r4,sp,36
     794:	103ee83a 	callr	r2
     798:	a0800015 	stw	r2,0(r20)
}
     79c:	8005883a 	mov	r2,r16
     7a0:	dfc02a17 	ldw	ra,168(sp)
     7a4:	dd002917 	ldw	r20,164(sp)
     7a8:	dcc02817 	ldw	r19,160(sp)
     7ac:	dc802717 	ldw	r18,156(sp)
     7b0:	dc402617 	ldw	r17,152(sp)
     7b4:	dc002517 	ldw	r16,148(sp)
     7b8:	dec02b04 	addi	sp,sp,172
     7bc:	f800283a 	ret
        p++;
     7c0:	94800204 	addi	r18,r18,8
    for (i = 0; i < handle->command_count; i++) {
     7c4:	9cc00044 	addi	r19,r19,1
     7c8:	003fe106 	br	750 <mscmd_execute+0x4c>
        return -1;
     7cc:	043fffc4 	movi	r16,-1
     7d0:	003ff206 	br	79c <mscmd_execute+0x98>

000007d4 <msopt_init>:
}

MSOPT_RESULT msopt_init(MSOPT *handle, char *text)
{
    char *src = text;
    char *des = handle->argv;
     7d4:	20c00204 	addi	r3,r4,8
     7d8:	1805883a 	mov	r2,r3
    while (*src) {
     7dc:	29800003 	ldbu	r6,0(r5)
     7e0:	31c03fcc 	andi	r7,r6,255
     7e4:	39c0201c 	xori	r7,r7,128
     7e8:	39ffe004 	addi	r7,r7,-128
     7ec:	38000a1e 	bne	r7,zero,818 <msopt_init+0x44>
        *des++ = *src++;
    }
    *des = 0;
     7f0:	10000005 	stb	zero,0(r2)
    while (IS_WHITE_SPACE(*p)) {
     7f4:	02002034 	movhi	r8,128
    handle->argc = 0;
     7f8:	20000115 	stw	zero,4(r4)
    while (IS_WHITE_SPACE(*p)) {
     7fc:	420004c4 	addi	r8,r8,19
        if (*p == 0) {
     800:	027ff7c4 	movi	r9,-33
    char *p = handle->argv;
    while (1) {
        if (handle->argc >= MSCONF_MAX_INPUT_ARGS) {
     804:	21400117 	ldw	r5,4(r4)
     808:	28800248 	cmpgei	r2,r5,9
     80c:	10000726 	beq	r2,zero,82c <msopt_init+0x58>
            return MSOPT_RESULT_ERROR_TOO_MUCH_ARGUMENTS;
     810:	008000c4 	movi	r2,3
        p = skip_text_string(p, &(handle->info[handle->argc].length));
        handle->argc++;
    }
    handle->initcode = INITCODE;
    return MSOPT_RESULT_OK;
}
     814:	f800283a 	ret
        *des++ = *src++;
     818:	10800044 	addi	r2,r2,1
     81c:	29400044 	addi	r5,r5,1
     820:	11bfffc5 	stb	r6,-1(r2)
     824:	003fed06 	br	7dc <msopt_init+0x8>
        p++;
     828:	18c00044 	addi	r3,r3,1
    while (IS_WHITE_SPACE(*p)) {
     82c:	19800003 	ldbu	r6,0(r3)
     830:	30bffdc4 	addi	r2,r6,-9
     834:	10803fcc 	andi	r2,r2,255
     838:	11c00630 	cmpltui	r7,r2,24
     83c:	3800081e 	bne	r7,zero,860 <msopt_init+0x8c>
        if (*p == 0) {
     840:	31803fcc 	andi	r6,r6,255
     844:	3180201c 	xori	r6,r6,128
     848:	31bfe004 	addi	r6,r6,-128
     84c:	3000071e 	bne	r6,zero,86c <msopt_init+0x98>
    handle->initcode = INITCODE;
     850:	00a5f014 	movui	r2,38848
     854:	20800015 	stw	r2,0(r4)
    return MSOPT_RESULT_OK;
     858:	0005883a 	mov	r2,zero
     85c:	f800283a 	ret
    while (IS_WHITE_SPACE(*p)) {
     860:	4084d83a 	srl	r2,r8,r2
     864:	1080004c 	andi	r2,r2,1
     868:	103fef1e 	bne	r2,zero,828 <msopt_init+0x54>
        handle->info[handle->argc].head = p;
     86c:	28800144 	addi	r2,r5,5
     870:	100490fa 	slli	r2,r2,3
    int count = 0;
     874:	000f883a 	mov	r7,zero
        handle->info[handle->argc].head = p;
     878:	2085883a 	add	r2,r4,r2
     87c:	10c00015 	stw	r3,0(r2)
    while (!IS_WHITE_SPACE(*p)) {
     880:	19d5883a 	add	r10,r3,r7
     884:	50800003 	ldbu	r2,0(r10)
     888:	11bffdc4 	addi	r6,r2,-9
     88c:	31803fcc 	andi	r6,r6,255
     890:	318000b0 	cmpltui	r6,r6,2
     894:	3000051e 	bne	r6,zero,8ac <msopt_init+0xd8>
     898:	11803fcc 	andi	r6,r2,255
     89c:	3180201c 	xori	r6,r6,128
     8a0:	31bfe004 	addi	r6,r6,-128
     8a4:	31800358 	cmpnei	r6,r6,13
     8a8:	3000071e 	bne	r6,zero,8c8 <msopt_init+0xf4>
    *length = count;
     8ac:	280490fa 	slli	r2,r5,3
        handle->argc++;
     8b0:	29400044 	addi	r5,r5,1
        if (handle->argc >= MSCONF_MAX_INPUT_ARGS) {
     8b4:	5007883a 	mov	r3,r10
    *length = count;
     8b8:	2085883a 	add	r2,r4,r2
     8bc:	11c00b15 	stw	r7,44(r2)
        handle->argc++;
     8c0:	21400115 	stw	r5,4(r4)
        if (handle->argc >= MSCONF_MAX_INPUT_ARGS) {
     8c4:	003fcf06 	br	804 <msopt_init+0x30>
        if (*p == 0) {
     8c8:	1244703a 	and	r2,r2,r9
     8cc:	10803fcc 	andi	r2,r2,255
     8d0:	1080201c 	xori	r2,r2,128
     8d4:	10bfe004 	addi	r2,r2,-128
     8d8:	103ff426 	beq	r2,zero,8ac <msopt_init+0xd8>
        count++;
     8dc:	39c00044 	addi	r7,r7,1
     8e0:	003fe706 	br	880 <msopt_init+0xac>

000008e4 <msopt_get_argc>:

MSOPT_RESULT msopt_get_argc(MSOPT *handle, int *argc)
{
    if (handle->initcode != INITCODE) {
     8e4:	20c00017 	ldw	r3,0(r4)
     8e8:	00a5f014 	movui	r2,38848
     8ec:	18800326 	beq	r3,r2,8fc <msopt_get_argc+0x18>
        *argc = 0;
     8f0:	28000015 	stw	zero,0(r5)
        return MSOPT_RESULT_ERROR_ILLEGAL_OBJECT;
     8f4:	00800044 	movi	r2,1
     8f8:	f800283a 	ret
    }
    *argc = handle->argc;
     8fc:	20800117 	ldw	r2,4(r4)
     900:	28800015 	stw	r2,0(r5)
    return MSOPT_RESULT_OK;
     904:	0005883a 	mov	r2,zero
}
     908:	f800283a 	ret

0000090c <msopt_get_argv>:

MSOPT_RESULT msopt_get_argv(MSOPT *handle, int index, char *bufptr, int bufsiz)
{
    *bufptr = 0;
     90c:	30000005 	stb	zero,0(r6)
    if (handle->argc <= index) {
     910:	20800117 	ldw	r2,4(r4)
     914:	2880170e 	bge	r5,r2,974 <msopt_get_argv+0x68>
        return MSOPT_RESULT_ERROR_ILLEGAL_INDEX_NUMBER;
    }
    char *src = handle->info[index].head;
     918:	28800144 	addi	r2,r5,5
     91c:	100490fa 	slli	r2,r2,3
    char *des = bufptr;
    int i;
    for (i = 0; i < handle->info[index].length; i++) {
     920:	280a90fa 	slli	r5,r5,3
        if (i >= bufsiz - 1) {
     924:	39ffffc4 	addi	r7,r7,-1
    char *src = handle->info[index].head;
     928:	2085883a 	add	r2,r4,r2
     92c:	12000017 	ldw	r8,0(r2)
    for (i = 0; i < handle->info[index].length; i++) {
     930:	2149883a 	add	r4,r4,r5
     934:	0005883a 	mov	r2,zero
     938:	21400b17 	ldw	r5,44(r4)
     93c:	3087883a 	add	r3,r6,r2
     940:	11400316 	blt	r2,r5,950 <msopt_get_argv+0x44>
            *des = 0;
            return MSOPT_RESULT_ERROR_BUFFER_SIZE;
        }
        *des++ = *src++;
    }
    *des = 0;
     944:	18000005 	stb	zero,0(r3)
    return MSOPT_RESULT_OK;
     948:	0005883a 	mov	r2,zero
     94c:	f800283a 	ret
        if (i >= bufsiz - 1) {
     950:	11c00316 	blt	r2,r7,960 <msopt_get_argv+0x54>
            *des = 0;
     954:	18000005 	stb	zero,0(r3)
            return MSOPT_RESULT_ERROR_BUFFER_SIZE;
     958:	00800104 	movi	r2,4
     95c:	f800283a 	ret
        *des++ = *src++;
     960:	408b883a 	add	r5,r8,r2
     964:	29400003 	ldbu	r5,0(r5)
    for (i = 0; i < handle->info[index].length; i++) {
     968:	10800044 	addi	r2,r2,1
        *des++ = *src++;
     96c:	19400005 	stb	r5,0(r3)
    for (i = 0; i < handle->info[index].length; i++) {
     970:	003ff106 	br	938 <msopt_get_argv+0x2c>
        return MSOPT_RESULT_ERROR_ILLEGAL_INDEX_NUMBER;
     974:	00800084 	movi	r2,2
}
     978:	f800283a 	ret

0000097c <ntlibc_strcmp>:

int ntlibc_strcmp(const char *s1, const char *s2)
{
    char *p1 = (char *)s1;
    char *p2 = (char *)s2;
    while (*p1 || *p2) {
     97c:	20c00003 	ldbu	r3,0(r4)
        if (*p1 != *p2) {
     980:	28800003 	ldbu	r2,0(r5)
    while (*p1 || *p2) {
     984:	188cb03a 	or	r6,r3,r2
     988:	31803fcc 	andi	r6,r6,255
     98c:	3180201c 	xori	r6,r6,128
     990:	31bfe004 	addi	r6,r6,-128
     994:	3000021e 	bne	r6,zero,9a0 <ntlibc_strcmp+0x24>
        }
        p1++;
        p2++;
    }
    if (*p1 == *p2) {
        return 0;
     998:	0005883a 	mov	r2,zero
     99c:	f800283a 	ret
        if (*p1 != *p2) {
     9a0:	18c03fcc 	andi	r3,r3,255
     9a4:	10803fcc 	andi	r2,r2,255
     9a8:	18c0201c 	xori	r3,r3,128
     9ac:	1080201c 	xori	r2,r2,128
     9b0:	18ffe004 	addi	r3,r3,-128
     9b4:	10bfe004 	addi	r2,r2,-128
     9b8:	18800326 	beq	r3,r2,9c8 <ntlibc_strcmp+0x4c>
            return (*p1 < *p2) ? -1 : 1;
     9bc:	18800516 	blt	r3,r2,9d4 <ntlibc_strcmp+0x58>
     9c0:	00800044 	movi	r2,1
     9c4:	f800283a 	ret
        p1++;
     9c8:	21000044 	addi	r4,r4,1
        p2++;
     9cc:	29400044 	addi	r5,r5,1
     9d0:	003fea06 	br	97c <ntlibc_strcmp>
            return (*p1 < *p2) ? -1 : 1;
     9d4:	00bfffc4 	movi	r2,-1
    } else {
        return (*p1 < *p2) ? -1 : 1;
    }
}
     9d8:	f800283a 	ret

000009dc <ntlibc_atoi>:
  int cnt;
  int num = 0;
  int ofs = 0;
  int sign = 0;
  int scnt = 0;
  char *p = (char *)nptr;
     9dc:	200f883a 	mov	r7,r4
  int scnt = 0;
     9e0:	000b883a 	mov	r5,zero
  int sign = 0;
     9e4:	000d883a 	mov	r6,zero
  int ofs = 0;
     9e8:	0005883a 	mov	r2,zero
  while (*p != '\0') {
     9ec:	38c00007 	ldb	r3,0(r7)
     9f0:	18000b1e 	bne	r3,zero,a20 <ntlibc_atoi+0x44>
     9f4:	2089883a 	add	r4,r4,r2
  int num = 0;
     9f8:	0005883a 	mov	r2,zero
        }
      }
    }
    p++;
  }
  for (cnt = ofs; (nptr[cnt] >= '0') && (nptr[cnt] <= '9'); cnt++) {
     9fc:	20c00003 	ldbu	r3,0(r4)
     a00:	21000044 	addi	r4,r4,1
     a04:	18fff404 	addi	r3,r3,-48
     a08:	19403fcc 	andi	r5,r3,255
     a0c:	294002b0 	cmpltui	r5,r5,10
     a10:	2800191e 	bne	r5,zero,a78 <ntlibc_atoi+0x9c>
    num = 10 * num + (nptr[cnt] - '0');
  }
  if (sign) {
     a14:	30001f26 	beq	r6,zero,a94 <ntlibc_atoi+0xb8>
    return -num;
     a18:	0085c83a 	sub	r2,zero,r2
     a1c:	f800283a 	ret
  if (('0' <= c) && (c <= '9')) {
     a20:	1a3ff404 	addi	r8,r3,-48
     a24:	420002b0 	cmpltui	r8,r8,10
     a28:	4000031e 	bne	r8,zero,a38 <ntlibc_atoi+0x5c>
      if (*p == ' ') {
     a2c:	1a000818 	cmpnei	r8,r3,32
     a30:	4000031e 	bne	r8,zero,a40 <ntlibc_atoi+0x64>
        ofs++;
     a34:	10800044 	addi	r2,r2,1
    p++;
     a38:	39c00044 	addi	r7,r7,1
     a3c:	003feb06 	br	9ec <ntlibc_atoi+0x10>
      if (*p == '+') {
     a40:	1a000ad8 	cmpnei	r8,r3,43
     a44:	4000051e 	bne	r8,zero,a5c <ntlibc_atoi+0x80>
        ofs++;
     a48:	10800044 	addi	r2,r2,1
        if (scnt++ > 0) {
     a4c:	2800101e 	bne	r5,zero,a90 <ntlibc_atoi+0xb4>
        sign = 0;
     a50:	000d883a 	mov	r6,zero
     a54:	01400044 	movi	r5,1
     a58:	003ff706 	br	a38 <ntlibc_atoi+0x5c>
      if (*p == '-') {
     a5c:	18c00b58 	cmpnei	r3,r3,45
     a60:	183ff51e 	bne	r3,zero,a38 <ntlibc_atoi+0x5c>
        ofs++;
     a64:	10800044 	addi	r2,r2,1
        if (scnt++ > 0) {
     a68:	2800091e 	bne	r5,zero,a90 <ntlibc_atoi+0xb4>
     a6c:	01400044 	movi	r5,1
        sign = 1;
     a70:	01800044 	movi	r6,1
     a74:	003ff006 	br	a38 <ntlibc_atoi+0x5c>
    num = 10 * num + (nptr[cnt] - '0');
     a78:	108002a4 	muli	r2,r2,10
     a7c:	18c03fcc 	andi	r3,r3,255
     a80:	18c0201c 	xori	r3,r3,128
     a84:	18ffe004 	addi	r3,r3,-128
     a88:	1885883a 	add	r2,r3,r2
  for (cnt = ofs; (nptr[cnt] >= '0') && (nptr[cnt] <= '9'); cnt++) {
     a8c:	003fdb06 	br	9fc <ntlibc_atoi+0x20>
          return 0;
     a90:	0005883a 	mov	r2,zero
  } else {
    return num;
  }
}
     a94:	f800283a 	ret

00000a98 <_ZN15CriticalSectionC1Ev>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     a98:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     a9c:	00bfff84 	movi	r2,-2
     aa0:	1884703a 	and	r2,r3,r2
     aa4:	1001703a 	wrctl	status,r2
 * クリティカルセクションを作り出す
 */
class CriticalSection {
public:
    CriticalSection(void) {
        _Context = alt_irq_disable_all();
     aa8:	20c00015 	stw	r3,0(r4)
        __builtin_sync();
     aac:	0001b03a 	sync
    }
     ab0:	f800283a 	ret

00000ab4 <_ZN15CriticalSectionD1Ev>:
    
    ~CriticalSection() {
     ab4:	defff104 	addi	sp,sp,-60
     ab8:	00800034 	movhi	r2,0
     abc:	dc000d15 	stw	r16,52(sp)
     ac0:	108a2404 	addi	r2,r2,10384
     ac4:	2021883a 	mov	r16,r4
     ac8:	d809883a 	mov	r4,sp
     acc:	dfc00e15 	stw	ra,56(sp)
     ad0:	d8800615 	stw	r2,24(sp)
     ad4:	d8000715 	stw	zero,28(sp)
     ad8:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
        alt_irq_enable_all(_Context);
     adc:	80800017 	ldw	r2,0(r16)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
     ae0:	0007303a 	rdctl	r3,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
     ae4:	013fff84 	movi	r4,-2
     ae8:	1906703a 	and	r3,r3,r4
  status |= (context & NIOS2_STATUS_PIE_MSK);
     aec:	1080004c 	andi	r2,r2,1
     af0:	10c4b03a 	or	r2,r2,r3
  
  NIOS2_WRITE_STATUS (status);
     af4:	1001703a 	wrctl	status,r2
     af8:	d809883a 	mov	r4,sp
     afc:	00041c80 	call	41c8 <_Unwind_SjLj_Unregister>
    }
     b00:	dfc00e17 	ldw	ra,56(sp)
     b04:	dc000d17 	ldw	r16,52(sp)
     b08:	dec00f04 	addi	sp,sp,60
     b0c:	f800283a 	ret

00000b10 <_ZN18CentralizedMonitor5StartEv>:
    ResetMotorInterruptFlags();
}

void CentralizedMonitor::Start(void) {
    // pio_0の割り込みを有効にする
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE, Pio0Pulse1kHz);
     b10:	00c00044 	movi	r3,1
     b14:	00b80214 	movui	r2,57352
     b18:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0);
     b1c:	00b80314 	movui	r2,57356
     b20:	10000035 	stwio	zero,0(r2)

    // pio_1のフォルト関連の割り込みを有効にする
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, Pio1Motor5SwitchFault | Pio1Motor4SwitchFault | Pio1Motor3SwitchFault | Pio1Motor2SwitchFault | Pio1Motor1SwitchFault | Pio1ModuleSleep | Pio1FpgaStop);
     b24:	00c03f84 	movi	r3,254
     b28:	00b84214 	movui	r2,57608
     b2c:	10c00035 	stwio	r3,0(r2)

    // timer_0を開始する
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
     b30:	00c001c4 	movi	r3,7
     b34:	00b20114 	movui	r2,51204
     b38:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     b3c:	00b20014 	movui	r2,51200
     b40:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIOD_0(TIMER_0_BASE, 0);
     b44:	00b20214 	movui	r2,51208
     b48:	10000035 	stwio	zero,0(r2)
}
     b4c:	f800283a 	ret

00000b50 <_ZN18CentralizedMonitor13SetErrorFlagsEm>:

    _ErrorFlags = new_error_flags;
    SharedMemory::WriteErrorFlags(new_error_flags);
}

void CentralizedMonitor::SetErrorFlags(uint32_t error_flags) {
     b50:	00800034 	movhi	r2,0
     b54:	deffef04 	addi	sp,sp,-68
     b58:	108a2404 	addi	r2,r2,10384
     b5c:	d8800715 	stw	r2,28(sp)
     b60:	00800034 	movhi	r2,0
     b64:	d9000015 	stw	r4,0(sp)
     b68:	1082f604 	addi	r2,r2,3032
     b6c:	d9000104 	addi	r4,sp,4
     b70:	dfc01015 	stw	ra,64(sp)
     b74:	d8800a15 	stw	r2,40(sp)
     b78:	df000f15 	stw	fp,60(sp)
     b7c:	d8000815 	stw	zero,32(sp)
     b80:	df000915 	stw	fp,36(sp)
     b84:	dec00b15 	stw	sp,44(sp)
     b88:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
    uint32_t previous = _ErrorFlags;
     b8c:	d0a01417 	ldw	r2,-32688(gp)
    uint32_t new_error_flags;
    {
        CriticalSection cs;
     b90:	d9000e04 	addi	r4,sp,56
     b94:	0000a980 	call	a98 <_ZN15CriticalSectionC1Ev>
        new_error_flags = _ErrorFlags | error_flags;
     b98:	d8c00017 	ldw	r3,0(sp)
     b9c:	d0a01417 	ldw	r2,-32688(gp)
     ba0:	10c4b03a 	or	r2,r2,r3
     ba4:	d8800015 	stw	r2,0(sp)
    /**
     * エラーフラグを書き込む
     * @param new_error_flags 書き込むフォルトフラグ
     */
    static void WriteErrorFlags(uint32_t new_error_flags){
        __builtin_stwio(&_SharedMemory.ErrorFlags, new_error_flags);
     ba8:	d8c00017 	ldw	r3,0(sp)
        _ErrorFlags = new_error_flags;
     bac:	d0a01415 	stw	r2,-32688(gp)
     bb0:	00800074 	movhi	r2,1
     bb4:	10ec0035 	stwio	r3,-20480(r2)
        CriticalSection cs;
     bb8:	d9000e04 	addi	r4,sp,56
     bbc:	0000ab40 	call	ab4 <_ZN15CriticalSectionD1Ev>
#if DEBUG_PRINTF
    if (new_error_flags != previous) {
        printf("Error=%08X\n", (unsigned int)new_error_flags);
    }
#endif
    if (new_error_flags != 0) {
     bc0:	d8800017 	ldw	r2,0(sp)
     bc4:	10000426 	beq	r2,zero,bd8 <_ZN18CentralizedMonitor13SetErrorFlagsEm+0x88>
        WheelController::StopControl();
     bc8:	00bfffc4 	movi	r2,-1
     bcc:	d8800215 	stw	r2,8(sp)
     bd0:	00020f00 	call	20f0 <_ZN15WheelController11StopControlEv>
        DribbleController::StopControl();
     bd4:	00012400 	call	1240 <_ZN17DribbleController11StopControlEv>
     bd8:	d9000104 	addi	r4,sp,4
     bdc:	00041c80 	call	41c8 <_Unwind_SjLj_Unregister>
    }
}
     be0:	dfc01017 	ldw	ra,64(sp)
     be4:	df000f17 	ldw	fp,60(sp)
     be8:	dec01104 	addi	sp,sp,68
     bec:	f800283a 	ret

00000bf0 <_ZN18CentralizedMonitor13Adc2KeepAliveEi>:
    _Adc2Timeout = ADC2_TIMEOUT_THRESHOLD;
     bf0:	00800c84 	movi	r2,50
void CentralizedMonitor::Adc2KeepAlive(int dc48v_voltage) {
     bf4:	deffff04 	addi	sp,sp,-4
    _Adc2Timeout = ADC2_TIMEOUT_THRESHOLD;
     bf8:	d0a00015 	stw	r2,-32768(gp)
void CentralizedMonitor::Adc2KeepAlive(int dc48v_voltage) {
     bfc:	dfc00015 	stw	ra,0(sp)
    if (dc48v_voltage < DC48V_UNDER_VOLTAGE_THRESHOLD) {
     c00:	209d4c08 	cmpgei	r2,r4,30000
     c04:	10000d1e 	bne	r2,zero,c3c <_ZN18CentralizedMonitor13Adc2KeepAliveEi+0x4c>
        SetErrorFlags(ErrorCauseDc48vUnderVoltage);
     c08:	01000104 	movi	r4,4
        SetErrorFlags(ErrorCauseDc48vOverVoltage);
     c0c:	0000b500 	call	b50 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    ++cnt;
     c10:	d0a01617 	ldw	r2,-32680(gp)
     c14:	10800044 	addi	r2,r2,1
     c18:	d0a01615 	stw	r2,-32680(gp)
    if (cnt == 5) {
     c1c:	10c00158 	cmpnei	r3,r2,5
     c20:	18000a1e 	bne	r3,zero,c4c <_ZN18CentralizedMonitor13Adc2KeepAliveEi+0x5c>
    static void SetMotor1Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1Led);
        }
        else {
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor1Led);
     c24:	00c00044 	movi	r3,1
     c28:	00b88414 	movui	r2,57872
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1Led);
     c2c:	10c00035 	stwio	r3,0(r2)
}
     c30:	dfc00017 	ldw	ra,0(sp)
     c34:	dec00104 	addi	sp,sp,4
     c38:	f800283a 	ret
    else if (DC48V_OVER_VOLTAGE_THRESHOLD < dc48v_voltage) {
     c3c:	00b34514 	movui	r2,52500
     c40:	113ff30e 	bge	r2,r4,c10 <_ZN18CentralizedMonitor13Adc2KeepAliveEi+0x20>
        SetErrorFlags(ErrorCauseDc48vOverVoltage);
     c44:	01000204 	movi	r4,8
     c48:	003ff006 	br	c0c <_ZN18CentralizedMonitor13Adc2KeepAliveEi+0x1c>
    else if (10 <= cnt) {
     c4c:	10800290 	cmplti	r2,r2,10
     c50:	103ff71e 	bne	r2,zero,c30 <_ZN18CentralizedMonitor13Adc2KeepAliveEi+0x40>
        cnt = 0;
     c54:	d0201615 	stw	zero,-32680(gp)
     c58:	00c00044 	movi	r3,1
     c5c:	00b88514 	movui	r2,57876
     c60:	003ff206 	br	c2c <_ZN18CentralizedMonitor13Adc2KeepAliveEi+0x3c>

00000c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>:

void CentralizedMonitor::SetFaultFlags(uint32_t fault_flags) {
     c64:	00800034 	movhi	r2,0
     c68:	deffef04 	addi	sp,sp,-68
     c6c:	108a2404 	addi	r2,r2,10384
     c70:	d8800715 	stw	r2,28(sp)
     c74:	00800034 	movhi	r2,0
     c78:	d9000015 	stw	r4,0(sp)
     c7c:	10833b04 	addi	r2,r2,3308
     c80:	d9000104 	addi	r4,sp,4
     c84:	dfc01015 	stw	ra,64(sp)
     c88:	d8800a15 	stw	r2,40(sp)
     c8c:	df000f15 	stw	fp,60(sp)
     c90:	d8000815 	stw	zero,32(sp)
     c94:	df000915 	stw	fp,36(sp)
     c98:	dec00b15 	stw	sp,44(sp)
     c9c:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
    uint32_t previous = _FaultFlags;
     ca0:	d0a01317 	ldw	r2,-32692(gp)
    uint32_t new_fault_flags;
    {
        CriticalSection cs;
     ca4:	d9000e04 	addi	r4,sp,56
     ca8:	0000a980 	call	a98 <_ZN15CriticalSectionC1Ev>
        new_fault_flags = _FaultFlags | fault_flags;
     cac:	d8c00017 	ldw	r3,0(sp)
     cb0:	d0a01317 	ldw	r2,-32692(gp)
     cb4:	10c4b03a 	or	r2,r2,r3
     cb8:	d8800015 	stw	r2,0(sp)
    /**
     * フォルトフラグを書き込む
     * @param new_fault_flags 書き込むフォルトフラグ
     */
    static void WriteFaultFlags(uint32_t new_fault_flags){
        __builtin_stwio(&_SharedMemory.FaultFlags, new_fault_flags);
     cbc:	d8c00017 	ldw	r3,0(sp)
        _FaultFlags = new_fault_flags;
     cc0:	d0a01315 	stw	r2,-32692(gp)
     cc4:	00800074 	movhi	r2,1
     cc8:	10ec0135 	stwio	r3,-20476(r2)
        CriticalSection cs;
     ccc:	d9000e04 	addi	r4,sp,56
     cd0:	0000ab40 	call	ab4 <_ZN15CriticalSectionD1Ev>
#if DEBUG_PRINTF
    if (new_fault_flags != previous) {
        printf("Fault=%08X\n", (unsigned int)new_fault_flags);
    }
#endif
    if (new_fault_flags != 0) {
     cd4:	d8800017 	ldw	r2,0(sp)
     cd8:	10000426 	beq	r2,zero,cec <_ZN18CentralizedMonitor13SetFaultFlagsEm+0x88>
        WheelController::StopControl();
     cdc:	00bfffc4 	movi	r2,-1
     ce0:	d8800215 	stw	r2,8(sp)
     ce4:	00020f00 	call	20f0 <_ZN15WheelController11StopControlEv>
        DribbleController::StopControl();
     ce8:	00012400 	call	1240 <_ZN17DribbleController11StopControlEv>
     cec:	d9000104 	addi	r4,sp,4
     cf0:	00041c80 	call	41c8 <_Unwind_SjLj_Unregister>
    }
}
     cf4:	dfc01017 	ldw	ra,64(sp)
     cf8:	df000f17 	ldw	fp,60(sp)
     cfc:	dec01104 	addi	sp,sp,68
     d00:	f800283a 	ret

00000d04 <_ZN18CentralizedMonitor11Pio1HandlerEPv>:

    // 定期的な処理を行う
    DoPeriodicCommonWork();
}

void CentralizedMonitor::Pio1Handler(void *context) {
     d04:	defffe04 	addi	sp,sp,-8
    // pio_1から割り込み要因のI/Oビットを取得し以降のその要因の割り込みを禁止する
    uint32_t irq_masks = IORD_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE);
     d08:	00b84214 	movui	r2,57608
void CentralizedMonitor::Pio1Handler(void *context) {
     d0c:	dfc00115 	stw	ra,4(sp)
     d10:	dc000015 	stw	r16,0(sp)
    uint32_t irq_masks = IORD_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE);
     d14:	10c00037 	ldwio	r3,0(r2)
    uint32_t irq_flags = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE) & irq_masks;
     d18:	00b84014 	movui	r2,57600
     d1c:	14000037 	ldwio	r16,0(r2)
     d20:	80e0703a 	and	r16,r16,r3
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, irq_masks & ~irq_flags);
     d24:	0404303a 	nor	r2,zero,r16
     d28:	10c4703a 	and	r2,r2,r3
     d2c:	00f84214 	movui	r3,57608
     d30:	18800035 	stwio	r2,0(r3)

    // エラーフラグを更新する
    if (irq_flags & Pio1ModuleSleep) {
     d34:	8080008c 	andi	r2,r16,2
     d38:	10000226 	beq	r2,zero,d44 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0x40>
        SetErrorFlags(ErrorCauseModuleSleep);
     d3c:	01000044 	movi	r4,1
     d40:	0000b500 	call	b50 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    }
    if (irq_flags & Pio1FpgaStop) {
     d44:	8080010c 	andi	r2,r16,4
     d48:	10000226 	beq	r2,zero,d54 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0x50>
        SetErrorFlags(ErrorCauseFpgaStop);
     d4c:	01000084 	movi	r4,2
     d50:	0000b500 	call	b50 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    }

    // フォルトフラグを更新する
    if (irq_flags & Pio1Motor1SwitchFault) {
     d54:	8080020c 	andi	r2,r16,8
     d58:	10000526 	beq	r2,zero,d70 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0x6c>
        SetFaultFlags(FaultCauseMotor1LoadSwitch);
     d5c:	01040004 	movi	r4,4096
     d60:	0000c640 	call	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
// ホールセンサーやエンコーダに電源を供給するロードスイッチを制御するクラス
class LoadSwitch {
public:
    static void SetMotor1Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
     d64:	00c00804 	movi	r3,32
     d68:	00b88514 	movui	r2,57876
     d6c:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor1Enabled(false);
    }
    if (irq_flags & Pio1Motor2SwitchFault) {
     d70:	8080040c 	andi	r2,r16,16
     d74:	10000526 	beq	r2,zero,d8c <_ZN18CentralizedMonitor11Pio1HandlerEPv+0x88>
        SetFaultFlags(FaultCauseMotor2LoadSwitch);
     d78:	01080004 	movi	r4,8192
     d7c:	0000c640 	call	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
        }
    }

    static void SetMotor2Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor2SwitchEnable);
     d80:	00c01004 	movi	r3,64
     d84:	00b88514 	movui	r2,57876
     d88:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor2Enabled(false);
    }
    if (irq_flags & Pio1Motor3SwitchFault) {
     d8c:	8080080c 	andi	r2,r16,32
     d90:	10000526 	beq	r2,zero,da8 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0xa4>
        SetFaultFlags(FaultCauseMotor3LoadSwitch);
     d94:	01100004 	movi	r4,16384
     d98:	0000c640 	call	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
        }
    }

    static void SetMotor3Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor3SwitchEnable);
     d9c:	00c02004 	movi	r3,128
     da0:	00b88514 	movui	r2,57876
     da4:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor3Enabled(false);
    }
    if (irq_flags & Pio1Motor4SwitchFault) {
     da8:	8080100c 	andi	r2,r16,64
     dac:	10000526 	beq	r2,zero,dc4 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0xc0>
        SetFaultFlags(FaultCauseMotor4LoadSwitch);
     db0:	01200014 	movui	r4,32768
     db4:	0000c640 	call	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
        }
    }

    static void SetMotor4Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor4SwitchEnable);
     db8:	00c04004 	movi	r3,256
     dbc:	00b88514 	movui	r2,57876
     dc0:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor4Enabled(false);
    }
    if (irq_flags & Pio1Motor5SwitchFault) {
     dc4:	8400200c 	andi	r16,r16,128
     dc8:	80000526 	beq	r16,zero,de0 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0xdc>
        SetFaultFlags(FaultCauseMotor5LoadSwitch);
     dcc:	01000074 	movhi	r4,1
     dd0:	0000c640 	call	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
        }
    }

    static void SetMotor5Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor5SwitchEnable);
     dd4:	00c08004 	movi	r3,512
     dd8:	00b88514 	movui	r2,57876
     ddc:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor5Enabled(false);
    }
}
     de0:	dfc00117 	ldw	ra,4(sp)
     de4:	dc000017 	ldw	r16,0(sp)
     de8:	dec00204 	addi	sp,sp,8
     dec:	f800283a 	ret

00000df0 <_ZN18CentralizedMonitor23VectorControllerHandlerEPv>:

void CentralizedMonitor::VectorControllerHandler(void *context) {
     df0:	defffe04 	addi	sp,sp,-8
	static VectorControllerStatus GetStatus(void) {
        return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
	}

	static VectorControllerStatus GetInterruptFlag(void) {
		return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
     df4:	00bc0094 	movui	r2,61442
     df8:	dfc00115 	stw	ra,4(sp)
     dfc:	dc000015 	stw	r16,0(sp)
     e00:	1400002b 	ldhuio	r16,0(r2)
        return (~Status >> 4) & 0xF;
     e04:	843fffcc 	andi	r16,r16,65535
     e08:	0420303a 	nor	r16,zero,r16
     e0c:	8008917a 	slli	r4,r16,5
    auto int_flags = VectorController::GetInterruptFlag();
#if DEBUG_PRINTF
    DEBUG_PRINTF("VC:INT=%04X,STA=%04X\n", int_flags.Status, VectorController::GetStatus().Status);
#endif
    int hall_fault = int_flags.HallSensorFault();
    SetErrorFlags(hall_fault * ErrorCauseMotor1HallSensor);
     e10:	2107800c 	andi	r4,r4,7680
     e14:	0000b500 	call	b50 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    if (~IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE) & Pio1FpgaStop) {
     e18:	00b84014 	movui	r2,57600
     e1c:	10800037 	ldwio	r2,0(r2)
     e20:	1080010c 	andi	r2,r2,4
     e24:	1000091e 	bne	r2,zero,e4c <_ZN18CentralizedMonitor23VectorControllerHandlerEPv+0x5c>
        return (~Status >> 12) & 0xF;
     e28:	8008d2ba 	srli	r4,r16,10
        return (~Status >> 8) & 0xF;
     e2c:	8020d07a 	srli	r16,r16,1
        // DRV8312のOTW, FAULTは12V電源が喪失するとアサートされてしまうのでFPGA_STOPがデアサートされている間のみ反応する
        int driver_otw = int_flags.OverTemperatureFault();
        int driver_fault = int_flags.OverCurrentFault();
        SetFaultFlags((driver_otw * FaultCauseMotor1OverTemperature) | (driver_fault * FaultCauseMotor1OverCurrent));
     e30:	21000f0c 	andi	r4,r4,60
     e34:	8401e00c 	andi	r16,r16,1920
     e38:	2408b03a 	or	r4,r4,r16
    }
}
     e3c:	dfc00117 	ldw	ra,4(sp)
     e40:	dc000017 	ldw	r16,0(sp)
     e44:	dec00204 	addi	sp,sp,8
        SetFaultFlags((driver_otw * FaultCauseMotor1OverTemperature) | (driver_fault * FaultCauseMotor1OverCurrent));
     e48:	0000c641 	jmpi	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
}
     e4c:	dfc00117 	ldw	ra,4(sp)
     e50:	dc000017 	ldw	r16,0(sp)
     e54:	dec00204 	addi	sp,sp,8
     e58:	f800283a 	ret

00000e5c <_ZN18CentralizedMonitor22MotorControllerHandlerEPv>:

void CentralizedMonitor::MotorControllerHandler(void *context) {
     e5c:	defffe04 	addi	sp,sp,-8
    static MotorControllerStatus GetStatus(void) {
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    }

    static MotorControllerStatus GetInterruptFlag(void) {
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
     e60:	00bc4094 	movui	r2,61698
     e64:	dfc00115 	stw	ra,4(sp)
     e68:	dc000015 	stw	r16,0(sp)
     e6c:	1100002b 	ldhuio	r4,0(r2)
     e70:	243fffcc 	andi	r16,r4,65535
        return ~Status & 0x1;
     e74:	0108303a 	nor	r4,zero,r4
     e78:	2100004c 	andi	r4,r4,1
    auto int_flags = MotorController::GetInterruptFlag();
#if DEBUG_PRINTF
    DEBUG_PRINTF("MC:INT=%04X,STA=%04X\n", int_flags.Status, MotorController::GetStatus().Status);
#endif
    int hall_fault = int_flags.HallSensorFault();
    SetErrorFlags(hall_fault * ErrorCauseMotor5HallSensor);
     e7c:	2008937a 	slli	r4,r4,13
     e80:	0000b500 	call	b50 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    if (~IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE) & Pio1FpgaStop) {
     e84:	00b84014 	movui	r2,57600
     e88:	10800037 	ldwio	r2,0(r2)
     e8c:	1080010c 	andi	r2,r2,4
     e90:	10000a1e 	bne	r2,zero,ebc <_ZN18CentralizedMonitor22MotorControllerHandlerEPv+0x60>
        return (~Status & 0x4) >> 2;
     e94:	0404303a 	nor	r2,zero,r16
     e98:	1008913a 	slli	r4,r2,4
        return (~Status & 0x2) >> 1;
     e9c:	100492ba 	slli	r2,r2,10
        // DRV8312のOTW, FAULTは12V電源が喪失するとアサートされてしまうのでFPGA_STOPがデアサートされている間のみ反応する
        int driver_otw = int_flags.OverTemperatureFault();
        int driver_fault = int_flags.OverCurrentFault();
        SetFaultFlags((driver_otw * FaultCauseMotor5OverTemperature) | (driver_fault * FaultCauseMotor5OverCurrent));
     ea0:	2100100c 	andi	r4,r4,64
     ea4:	1082000c 	andi	r2,r2,2048
     ea8:	2088b03a 	or	r4,r4,r2
    }
}
     eac:	dfc00117 	ldw	ra,4(sp)
     eb0:	dc000017 	ldw	r16,0(sp)
     eb4:	dec00204 	addi	sp,sp,8
        SetFaultFlags((driver_otw * FaultCauseMotor5OverTemperature) | (driver_fault * FaultCauseMotor5OverCurrent));
     eb8:	0000c641 	jmpi	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
}
     ebc:	dfc00117 	ldw	ra,4(sp)
     ec0:	dc000017 	ldw	r16,0(sp)
     ec4:	dec00204 	addi	sp,sp,8
     ec8:	f800283a 	ret

00000ecc <_ZN18CentralizedMonitor24ResetMotorInterruptFlagsEv>:
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
     ecc:	00bc4094 	movui	r2,61698
     ed0:	1080002b 	ldhuio	r2,0(r2)
    static void ClearFault(void) {
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x2);
    }

    static void ResetFault(void) {
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x3);
     ed4:	008000c4 	movi	r2,3
     ed8:	00fc4114 	movui	r3,61700
     edc:	1880002d 	sthio	r2,0(r3)
		return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
     ee0:	00fc0094 	movui	r3,61442
     ee4:	18c0002b 	ldhuio	r3,0(r3)
	static void ClearFault(void) {
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x2);
	}

	static void ResetFault(void) {
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x3);
     ee8:	00fc0114 	movui	r3,61444
     eec:	1880002d 	sthio	r2,0(r3)
    // GetInterruptFlag()で割り込みフラグがクリアされ、現在もフォルト状態が発生しているならResetFault()で割り込みフラグが再びセットされる
    (void)MotorController::GetInterruptFlag();
    MotorController::ResetFault();
    (void)VectorController::GetInterruptFlag();
    VectorController::ResetFault();
}
     ef0:	f800283a 	ret

00000ef4 <_ZN18CentralizedMonitor10InitializeEv>:
void CentralizedMonitor::Initialize(void) {
     ef4:	defffe04 	addi	sp,sp,-8
    alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, TimerHandler, nullptr, nullptr);
     ef8:	01800034 	movhi	r6,0
     efc:	d8000015 	stw	zero,0(sp)
     f00:	000f883a 	mov	r7,zero
     f04:	31847704 	addi	r6,r6,4572
     f08:	01400044 	movi	r5,1
     f0c:	0009883a 	mov	r4,zero
void CentralizedMonitor::Initialize(void) {
     f10:	dfc00115 	stw	ra,4(sp)
    alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, TimerHandler, nullptr, nullptr);
     f14:	0005a780 	call	5a78 <alt_ic_isr_register>
    alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ, Pio0Handler, nullptr, nullptr);
     f18:	01800034 	movhi	r6,0
     f1c:	d8000015 	stw	zero,0(sp)
     f20:	000f883a 	mov	r7,zero
     f24:	31848204 	addi	r6,r6,4616
     f28:	01400084 	movi	r5,2
     f2c:	0009883a 	mov	r4,zero
     f30:	0005a780 	call	5a78 <alt_ic_isr_register>
    alt_ic_isr_register(PIO_1_IRQ_INTERRUPT_CONTROLLER_ID, PIO_1_IRQ, Pio1Handler, nullptr, nullptr);
     f34:	01800034 	movhi	r6,0
     f38:	d8000015 	stw	zero,0(sp)
     f3c:	000f883a 	mov	r7,zero
     f40:	31834104 	addi	r6,r6,3332
     f44:	014000c4 	movi	r5,3
     f48:	0009883a 	mov	r4,zero
     f4c:	0005a780 	call	5a78 <alt_ic_isr_register>
    alt_ic_isr_register(VECTOR_CONTROLLER_MASTER_0_IRQ_INTERRUPT_CONTROLLER_ID, VECTOR_CONTROLLER_MASTER_0_IRQ, VectorControllerHandler, nullptr, nullptr);
     f50:	01800034 	movhi	r6,0
     f54:	d8000015 	stw	zero,0(sp)
     f58:	000f883a 	mov	r7,zero
     f5c:	31837c04 	addi	r6,r6,3568
     f60:	014001c4 	movi	r5,7
     f64:	0009883a 	mov	r4,zero
     f68:	0005a780 	call	5a78 <alt_ic_isr_register>
    alt_ic_isr_register(MOTOR_CONTROLLER_5_IRQ_INTERRUPT_CONTROLLER_ID, MOTOR_CONTROLLER_5_IRQ, MotorControllerHandler, nullptr, nullptr);
     f6c:	01800034 	movhi	r6,0
     f70:	d8000015 	stw	zero,0(sp)
     f74:	000f883a 	mov	r7,zero
     f78:	31839704 	addi	r6,r6,3676
     f7c:	01400204 	movi	r5,8
     f80:	0009883a 	mov	r4,zero
     f84:	0005a780 	call	5a78 <alt_ic_isr_register>
    static void SetAllOff(void) {
        IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor5SwitchEnable | Pio2Motor4SwitchEnable | Pio2Motor3SwitchEnable | Pio2Motor2SwitchEnable | Pio2Motor1SwitchEnable);
    }

    static void SetAllOn(void) {
        IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor5SwitchEnable | Pio2Motor4SwitchEnable | Pio2Motor3SwitchEnable | Pio2Motor2SwitchEnable | Pio2Motor1SwitchEnable);
     f88:	00c0f804 	movi	r3,992
     f8c:	00b88414 	movui	r2,57872
     f90:	10c00035 	stwio	r3,0(r2)
    usleep(1000);
     f94:	0100fa04 	movi	r4,1000
     f98:	00055000 	call	5500 <usleep>
}
     f9c:	dfc00117 	ldw	ra,4(sp)
     fa0:	dec00204 	addi	sp,sp,8
    ResetMotorInterruptFlags();
     fa4:	0000ecc1 	jmpi	ecc <_ZN18CentralizedMonitor24ResetMotorInterruptFlagsEv>

00000fa8 <_ZN18CentralizedMonitor15ClearErrorFlagsEv>:
void CentralizedMonitor::ClearErrorFlags(void) {
     fa8:	00800034 	movhi	r2,0
     fac:	deffef04 	addi	sp,sp,-68
     fb0:	108a2404 	addi	r2,r2,10384
     fb4:	d8800715 	stw	r2,28(sp)
     fb8:	00800034 	movhi	r2,0
     fbc:	10841b04 	addi	r2,r2,4204
     fc0:	d9000104 	addi	r4,sp,4
     fc4:	d8800a15 	stw	r2,40(sp)
     fc8:	dfc01015 	stw	ra,64(sp)
     fcc:	df000f15 	stw	fp,60(sp)
     fd0:	d8000815 	stw	zero,32(sp)
     fd4:	df000915 	stw	fp,36(sp)
     fd8:	dec00b15 	stw	sp,44(sp)
     fdc:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
    CriticalSection cs;
     fe0:	d9000e04 	addi	r4,sp,56
     fe4:	0000a980 	call	a98 <_ZN15CriticalSectionC1Ev>
    uint32_t new_error_flags = _ErrorFlags;
     fe8:	d0a01417 	ldw	r2,-32688(gp)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, Pio1Motor5SwitchFault | Pio1Motor4SwitchFault | Pio1Motor3SwitchFault | Pio1Motor2SwitchFault | Pio1Motor1SwitchFault | Pio1ModuleSleep | Pio1FpgaStop);
     fec:	00c03f84 	movi	r3,254
    uint32_t new_error_flags = _ErrorFlags;
     ff0:	d8800015 	stw	r2,0(sp)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, Pio1Motor5SwitchFault | Pio1Motor4SwitchFault | Pio1Motor3SwitchFault | Pio1Motor2SwitchFault | Pio1Motor1SwitchFault | Pio1ModuleSleep | Pio1FpgaStop);
     ff4:	00b84214 	movui	r2,57608
     ff8:	10c00035 	stwio	r3,0(r2)
    uint32_t pio_1_data = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE);
     ffc:	00b84014 	movui	r2,57600
    1000:	10800037 	ldwio	r2,0(r2)
    if (~pio_1_data & Pio1ModuleSleep) {
    1004:	10c0008c 	andi	r3,r2,2
    1008:	1800041e 	bne	r3,zero,101c <_ZN18CentralizedMonitor15ClearErrorFlagsEv+0x74>
        new_error_flags &= ~ErrorCauseModuleSleep;
    100c:	d9000017 	ldw	r4,0(sp)
    1010:	00ffff84 	movi	r3,-2
    1014:	20c6703a 	and	r3,r4,r3
    1018:	d8c00015 	stw	r3,0(sp)
    if (~pio_1_data & Pio1FpgaStop) {
    101c:	1080010c 	andi	r2,r2,4
    1020:	1000051e 	bne	r2,zero,1038 <_ZN18CentralizedMonitor15ClearErrorFlagsEv+0x90>
        new_error_flags &= ~ErrorCauseFpgaStop;
    1024:	d8c00017 	ldw	r3,0(sp)
    1028:	00bfff44 	movi	r2,-3
    102c:	1884703a 	and	r2,r3,r2
    1030:	d8800015 	stw	r2,0(sp)
        ResetMotorInterruptFlags();
    1034:	0000ecc0 	call	ecc <_ZN18CentralizedMonitor24ResetMotorInterruptFlagsEv>
    int dc48v_voltage = Adc2::GetDc48v();
    1038:	d0a0178b 	ldhu	r2,-32674(gp)
    if (DC48V_UNDER_VOLTAGE_THRESHOLD <= dc48v_voltage) {
    103c:	10dd4c10 	cmplti	r3,r2,30000
    1040:	1800061e 	bne	r3,zero,105c <_ZN18CentralizedMonitor15ClearErrorFlagsEv+0xb4>
        new_error_flags &= ~ErrorCauseDc48vUnderVoltage;
    1044:	d9000017 	ldw	r4,0(sp)
    1048:	00fffec4 	movi	r3,-5
    104c:	20c6703a 	and	r3,r4,r3
    1050:	d8c00015 	stw	r3,0(sp)
    if (dc48v_voltage <= DC48V_OVER_VOLTAGE_THRESHOLD) {
    1054:	00f34514 	movui	r3,52500
    1058:	18800416 	blt	r3,r2,106c <_ZN18CentralizedMonitor15ClearErrorFlagsEv+0xc4>
        new_error_flags &= ~ErrorCauseDc48vOverVoltage;
    105c:	d8c00017 	ldw	r3,0(sp)
    1060:	00bffdc4 	movi	r2,-9
    1064:	1884703a 	and	r2,r3,r2
    1068:	d8800015 	stw	r2,0(sp)
        return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    106c:	00bc0014 	movui	r2,61440
    1070:	10c0002b 	ldhuio	r3,0(r2)
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    1074:	00bc4014 	movui	r2,61696
    1078:	1080002b 	ldhuio	r2,0(r2)
        return (Status >> 4) & 0xF;
    107c:	1806d13a 	srli	r3,r3,4
        return Status & 0x1;
    1080:	1080004c 	andi	r2,r2,1
    uint32_t hall_fault_n = vcm_status.HallSensorFaultN() | (mc5_status.HallSensorFaultN() << 4);
    1084:	1004913a 	slli	r2,r2,4
    1088:	18c003cc 	andi	r3,r3,15
    108c:	10c4b03a 	or	r2,r2,r3
    new_error_flags &= ~(hall_fault_n * ErrorCauseMotor1HallSensor);
    1090:	1004927a 	slli	r2,r2,9
    1094:	d8c00017 	ldw	r3,0(sp)
    1098:	0084303a 	nor	r2,zero,r2
    109c:	10c4703a 	and	r2,r2,r3
    new_error_flags &= ~(ErrorCauseMotor5OverCurrent | ErrorCauseMotor4OverCurrent | ErrorCauseMotor3OverCurrent | ErrorCauseMotor2OverCurrent | ErrorCauseMotor1OverCurrent);
    10a0:	00ff83c4 	movi	r3,-497
    10a4:	10c4703a 	and	r2,r2,r3
        __builtin_stwio(&_SharedMemory.ErrorFlags, new_error_flags);
    10a8:	00c00074 	movhi	r3,1
    _ErrorFlags = new_error_flags;
    10ac:	d0a01415 	stw	r2,-32688(gp)
    10b0:	18ac0035 	stwio	r2,-20480(r3)
    CriticalSection cs;
    10b4:	d9000e04 	addi	r4,sp,56
    10b8:	0000ab40 	call	ab4 <_ZN15CriticalSectionD1Ev>
    10bc:	d9000104 	addi	r4,sp,4
    10c0:	00041c80 	call	41c8 <_Unwind_SjLj_Unregister>
}
    10c4:	dfc01017 	ldw	ra,64(sp)
    10c8:	df000f17 	ldw	fp,60(sp)
    10cc:	dec01104 	addi	sp,sp,68
    10d0:	f800283a 	ret

000010d4 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv>:
void CentralizedMonitor::DoPeriodicCommonWork(void) {
    10d4:	defffe04 	addi	sp,sp,-8
    10d8:	dfc00115 	stw	ra,4(sp)
    10dc:	dc000015 	stw	r16,0(sp)
    PERF_RESET(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE));
    10e0:	00c00044 	movi	r3,1
    10e4:	00b1c014 	movui	r2,50944
    10e8:	10c00035 	stwio	r3,0(r2)
    PERF_START_MEASURING(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE));
    10ec:	00b1c114 	movui	r2,50948
    10f0:	10000035 	stwio	zero,0(r2)
    PERF_BEGIN(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE), 1);
    10f4:	00b1c514 	movui	r2,50964
    10f8:	10000035 	stwio	zero,0(r2)
    ++cnt;
    10fc:	d0a01517 	ldw	r2,-32684(gp)
    1100:	10800044 	addi	r2,r2,1
    1104:	d0a01515 	stw	r2,-32684(gp)
    if (cnt == 50) {
    1108:	10c00c98 	cmpnei	r3,r2,50
    110c:	1800231e 	bne	r3,zero,119c <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xc8>
    static void SetMotor5Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor5Led);
        }
        else {
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor5Led);
    1110:	00c00404 	movi	r3,16
    1114:	00b88414 	movui	r2,57872
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor5Led);
    1118:	10c00035 	stwio	r3,0(r2)
    int adc2_timeout = _Adc2Timeout;
    111c:	d0a00017 	ldw	r2,-32768(gp)
    if (0 <= --adc2_timeout) {
    1120:	10bfffc4 	addi	r2,r2,-1
    1124:	10002316 	blt	r2,zero,11b4 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xe0>
        _Adc2Timeout = adc2_timeout;
    1128:	d0a00015 	stw	r2,-32768(gp)
    /**
     * 何らかの問題が発生しているか取得する
     * @return 問題が起きている場合にtrueを返す
     */
    static bool IsAnyProblemOccured(void){
        return (_ErrorFlags != 0) || (_FaultFlags != 0);
    112c:	d0a01417 	ldw	r2,-32688(gp)
    1130:	1000231e 	bne	r2,zero,11c0 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xec>
    1134:	d0a01317 	ldw	r2,-32692(gp)
    1138:	1000211e 	bne	r2,zero,11c0 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xec>
        bool new_parameters = SharedMemory::UpdateParameters();
    113c:	0001dc80 	call	1dc8 <_ZN12SharedMemory16UpdateParametersEv>
        WheelController::Update(new_parameters);
    1140:	14003fcc 	andi	r16,r2,255
    1144:	8009883a 	mov	r4,r16
    1148:	00021300 	call	2130 <_ZN15WheelController6UpdateEb>
        DribbleController::Update(new_parameters);
    114c:	8009883a 	mov	r4,r16
    1150:	000125c0 	call	125c <_ZN17DribbleController6UpdateEb>
    PERF_END(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE), 1);
    1154:	00b1c414 	movui	r2,50960
    1158:	10000035 	stwio	zero,0(r2)
    PERF_STOP_MEASURING(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE));
    115c:	00b1c014 	movui	r2,50944
    1160:	10000035 	stwio	zero,0(r2)
    uint64_t counter_64 = perf_get_section_time(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE), 1);
    1164:	01400044 	movi	r5,1
    1168:	0131c014 	movui	r4,50944
    116c:	00056340 	call	5634 <perf_get_section_time>
    1170:	1021883a 	mov	r16,r2
    int counter = (counter_64 & 0xFFFFFFFFFFFF0000ULL) ? 65535 : static_cast<int>(counter_64);
    1174:	10bfffec 	andhi	r2,r2,65535
    1178:	10c4b03a 	or	r2,r2,r3
    117c:	10000126 	beq	r2,zero,1184 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xb0>
    1180:	043fffd4 	movui	r16,65535
    StreamTransmitter::TransmitStatus();
    1184:	0001eac0 	call	1eac <_ZN17StreamTransmitter14TransmitStatusEv>
    StreamTransmitter::TransmitMotion(counter);
    1188:	8009883a 	mov	r4,r16
}
    118c:	dfc00117 	ldw	ra,4(sp)
    1190:	dc000017 	ldw	r16,0(sp)
    1194:	dec00204 	addi	sp,sp,8
    StreamTransmitter::TransmitMotion(counter);
    1198:	0001eec1 	jmpi	1eec <_ZN17StreamTransmitter14TransmitMotionEi>
    else if (100 <= cnt) {
    119c:	10801910 	cmplti	r2,r2,100
    11a0:	103fde1e 	bne	r2,zero,111c <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0x48>
        cnt = 0;
    11a4:	d0201515 	stw	zero,-32684(gp)
    11a8:	00c00404 	movi	r3,16
    11ac:	00b88514 	movui	r2,57876
    11b0:	003fd906 	br	1118 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0x44>
        SetFaultFlags(FaultCauseAdc2Timeout);
    11b4:	01000044 	movi	r4,1
    11b8:	0000c640 	call	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
    11bc:	003fdb06 	br	112c <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0x58>
        SharedMemory::ClearParameters();
    11c0:	0001e6c0 	call	1e6c <_ZN12SharedMemory15ClearParametersEv>
        return (static_cast<uint32_t>(__builtin_ldwio(&_SharedMemory.ErrorFlags)) == 0xFFFFFFFFUL);
    11c4:	00800074 	movhi	r2,1
    11c8:	10ac0037 	ldwio	r2,-20480(r2)
        if (SharedMemory::IsRequestedClearingErrorFlags() == true) {
    11cc:	10bfffd8 	cmpnei	r2,r2,-1
    11d0:	103fe01e 	bne	r2,zero,1154 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0x80>
            ClearErrorFlags();
    11d4:	0000fa80 	call	fa8 <_ZN18CentralizedMonitor15ClearErrorFlagsEv>
    11d8:	003fde06 	br	1154 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0x80>

000011dc <_ZN18CentralizedMonitor12TimerHandlerEPv>:
void CentralizedMonitor::TimerHandler(void *context) {
    11dc:	deffff04 	addi	sp,sp,-4
    11e0:	dfc00015 	stw	ra,0(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    11e4:	00b20014 	movui	r2,51200
    11e8:	10000035 	stwio	zero,0(r2)
    SetFaultFlags(FaultCauseImuTimeout);
    11ec:	01000084 	movi	r4,2
    11f0:	0000c640 	call	c64 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE, 0);
    11f4:	00b80214 	movui	r2,57352
    11f8:	10000035 	stwio	zero,0(r2)
}
    11fc:	dfc00017 	ldw	ra,0(sp)
    1200:	dec00104 	addi	sp,sp,4
    DoPeriodicCommonWork();
    1204:	00010d41 	jmpi	10d4 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv>

00001208 <_ZN18CentralizedMonitor11Pio0HandlerEPv>:
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0);
    1208:	00b80314 	movui	r2,57356
    120c:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIOD_0(TIMER_0_BASE, 0);
    1210:	00b20214 	movui	r2,51208
    1214:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    1218:	00c001c4 	movi	r3,7
    121c:	00b20114 	movui	r2,51204
    1220:	10c00035 	stwio	r3,0(r2)
    DoPeriodicCommonWork();
    1224:	00010d41 	jmpi	10d4 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv>

00001228 <_ZN17DribbleController12StartControlEv>:
    static int GetPower(void) {
        return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->POWER);
    }

    static void SetPower(int value) {
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->POWER, value);
    1228:	00bc4194 	movui	r2,61702
    122c:	1000002d 	sthio	zero,0(r2)
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x2);
    1230:	00c00084 	movi	r3,2
    1234:	00bc4114 	movui	r2,61700
    1238:	10c0002d 	sthio	r3,0(r2)
#include <math.h>

void DribbleController::StartControl(void) {
    MotorController::SetPower(0);
    MotorController::ClearFault();
}
    123c:	f800283a 	ret

00001240 <_ZN17DribbleController11StopControlEv>:
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x1);
    1240:	00c00044 	movi	r3,1
    1244:	00bc4114 	movui	r2,61700
    1248:	10c0002d 	sthio	r3,0(r2)
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->POWER, value);
    124c:	00bc4194 	movui	r2,61702
    1250:	1000002d 	sthio	zero,0(r2)

void DribbleController::StopControl(void) {
    MotorController::SetFault();
    MotorController::SetPower(0);
}
    1254:	f800283a 	ret

00001258 <_ZN17DribbleController17Adc2UpdateCurrentEi>:

void DribbleController::Adc2UpdateCurrent(int dribble_current) {
    /*if (OVER_CURRENT_THRESHOLD < dribble_current) {
        CentralizedMonitor::SetErrorFlags(ErrorCauseMotor5OverCurrent);
    }*/
}
    1258:	f800283a 	ret

0000125c <_ZN17DribbleController6UpdateEb>:

void DribbleController::Update(bool new_parameters) {
    125c:	defffc04 	addi	sp,sp,-16
    float dribble_power = SharedMemory::GetParameters().dribble_power;
    1260:	00800074 	movhi	r2,1
void DribbleController::Update(bool new_parameters) {
    1264:	dc400115 	stw	r17,4(sp)
    float dribble_power = SharedMemory::GetParameters().dribble_power;
    1268:	1460c217 	ldw	r17,-31992(r2)
        return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->FAULT) != 0;
    126c:	00bc4114 	movui	r2,61700
void DribbleController::Update(bool new_parameters) {
    1270:	dfc00315 	stw	ra,12(sp)
    1274:	dc800215 	stw	r18,8(sp)
    1278:	dc000015 	stw	r16,0(sp)
    127c:	1080002b 	ldhuio	r2,0(r2)
    1280:	10bfffcc 	andi	r2,r2,65535
    if (MotorController::IsFault() == false) {
    1284:	1000291e 	bne	r2,zero,132c <_ZN17DribbleController6UpdateEb+0xd0>
        if (fabsf(dribble_power) <= 1.0f) {
    1288:	8809f832 	custom	224,r4,r17,zero
    128c:	00cfe034 	movhi	r3,16256
    1290:	20c5f9b2 	custom	230,r2,r4,r3
    1294:	10001f26 	beq	r2,zero,1314 <_ZN17DribbleController6UpdateEb+0xb8>
        return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->POWER);
    1298:	00bc4194 	movui	r2,61702
    129c:	1400002f 	ldhio	r16,0(r2)
            int previous_power = MotorController::GetPower();
            float upper_limit = fminf(previous_power + SLEWRATE_LIMIT, MAXIMUM_POWER);
    12a0:	01514ef4 	movhi	r5,17723
    12a4:	81000d84 	addi	r4,r16,54
    12a8:	29640004 	addi	r5,r5,-28672
    12ac:	2009feb2 	custom	250,r4,r4,zero
    12b0:	0003d7c0 	call	3d7c <fminf>
            float lower_limit = fmaxf(previous_power - SLEWRATE_LIMIT, -MAXIMUM_POWER);
    12b4:	813ff284 	addi	r4,r16,-54
    12b8:	01714ef4 	movhi	r5,50491
    12bc:	29640004 	addi	r5,r5,-28672
    12c0:	2009feb2 	custom	250,r4,r4,zero
            float upper_limit = fminf(previous_power + SLEWRATE_LIMIT, MAXIMUM_POWER);
    12c4:	1025883a 	mov	r18,r2
            float lower_limit = fmaxf(previous_power - SLEWRATE_LIMIT, -MAXIMUM_POWER);
    12c8:	0003d200 	call	3d20 <fmaxf>
            float power = fmaxf(lower_limit, fminf(dribble_power * POWER_SCALE, upper_limit));
    12cc:	01114f34 	movhi	r4,17724
    12d0:	21200004 	addi	r4,r4,-32768
    12d4:	900b883a 	mov	r5,r18
    12d8:	8909ff32 	custom	252,r4,r17,r4
            float lower_limit = fmaxf(previous_power - SLEWRATE_LIMIT, -MAXIMUM_POWER);
    12dc:	1021883a 	mov	r16,r2
            float power = fmaxf(lower_limit, fminf(dribble_power * POWER_SCALE, upper_limit));
    12e0:	0003d7c0 	call	3d7c <fminf>
    12e4:	100b883a 	mov	r5,r2
    12e8:	8009883a 	mov	r4,r16
    12ec:	0003d200 	call	3d20 <fmaxf>
            MotorController::SetPower(static_cast<int>(power));
    12f0:	1005fe72 	custom	249,r2,r2,zero
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->POWER, value);
    12f4:	00fc4194 	movui	r3,61702
    12f8:	1880002d 	sthio	r2,0(r3)
        }
    }
    else if (new_parameters == true) {
        StartControl();
    }
}
    12fc:	dfc00317 	ldw	ra,12(sp)
    1300:	dc800217 	ldw	r18,8(sp)
    1304:	dc400117 	ldw	r17,4(sp)
    1308:	dc000017 	ldw	r16,0(sp)
    130c:	dec00404 	addi	sp,sp,16
    1310:	f800283a 	ret
    1314:	dfc00317 	ldw	ra,12(sp)
    1318:	dc800217 	ldw	r18,8(sp)
    131c:	dc400117 	ldw	r17,4(sp)
    1320:	dc000017 	ldw	r16,0(sp)
    1324:	dec00404 	addi	sp,sp,16
            StopControl();
    1328:	00012401 	jmpi	1240 <_ZN17DribbleController11StopControlEv>
    else if (new_parameters == true) {
    132c:	21003fcc 	andi	r4,r4,255
    1330:	203ff226 	beq	r4,zero,12fc <_ZN17DribbleController6UpdateEb+0xa0>
}
    1334:	dfc00317 	ldw	ra,12(sp)
    1338:	dc800217 	ldw	r18,8(sp)
    133c:	dc400117 	ldw	r17,4(sp)
    1340:	dc000017 	ldw	r16,0(sp)
    1344:	dec00404 	addi	sp,sp,16
        StartControl();
    1348:	00012281 	jmpi	1228 <_ZN17DribbleController12StartControlEv>

0000134c <_ZN4Adc213AwaitCompleteEv>:
    if (busy) *busy = (status & 0x1) ? true : false;
    if (acked) *acked = (status & 0x2) ? true : false;
}

static inline bool I2CM_IsBusy(uint32_t base) {
    int intflag = __builtin_ldhuio(&((I2CMasterRegisters*)base)->STATUS);
    134c:	00b90094 	movui	r2,58370
    1350:	1080002b 	ldhuio	r2,0(r2)
        I2CM_BusReset(I2C_BASE);
    }

    // 非同期アクセスの完了を待つ
    static void AwaitComplete(void) {
        while (I2CM_IsBusy(I2C_BASE)) {
    1354:	1080004c 	andi	r2,r2,1
    1358:	103ffc1e 	bne	r2,zero,134c <_ZN4Adc213AwaitCompleteEv>
        }
    }
    135c:	f800283a 	ret

00001360 <_ZN4Adc220StartConversionAsyncEi>:
    // 最初の変換を開始する
    StartConversionAsync(0);
}

void Adc2::StartConversionAsync(int sequence) {
    if ((uint32_t)NUMBER_OF_SEQUENCE <= (uint32_t)sequence) {
    1360:	208000b0 	cmpltui	r2,r4,2
    1364:	1000011e 	bne	r2,zero,136c <_ZN4Adc220StartConversionAsyncEi+0xc>
        sequence = 0;
    1368:	0009883a 	mov	r4,zero
    }
    _State = STATE_WriteConfig;
    136c:	d0201a15 	stw	zero,-32664(gp)
    _Sequence = sequence;
    1370:	d1201915 	stw	r4,-32668(gp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->TXDATA, data);
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0042);
}

static inline void I2CM_WriteRegister2Byte(uint32_t base, int address, int data) {
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    1374:	00c00044 	movi	r3,1
    1378:	00b90214 	movui	r2,58376
    if (sequence == 0) {
    137c:	2000081e 	bne	r4,zero,13a0 <_ZN4Adc220StartConversionAsyncEi+0x40>
    1380:	10c0002d 	sthio	r3,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->TXDATA, data);
    1384:	00c0ecc4 	movi	r3,947
    1388:	00b90294 	movui	r2,58378
    138c:	10c0002d 	sthio	r3,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0142);
    1390:	00c05084 	movi	r3,322
    1394:	00b90014 	movui	r2,58368
    1398:	10c0002d 	sthio	r3,0(r2)
    }
    else {
        // ドリブルモーターの電流測定
        ConvertAsync(MUX_AIN1_to_AIN0, FSR_256mV);
    }
}
    139c:	f800283a 	ret
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    13a0:	10c0002d 	sthio	r3,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->TXDATA, data);
    13a4:	00c0e2c4 	movi	r3,907
    13a8:	003ff706 	br	1388 <_ZN4Adc220StartConversionAsyncEi+0x28>

000013ac <_ZN4Adc25StartEv>:
void Adc2::Start(void) {
    13ac:	defffe04 	addi	sp,sp,-8
    13b0:	dfc00115 	stw	ra,4(sp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->INTFLAG, 0);
    13b4:	00b90114 	movui	r2,58372
    13b8:	1000002d 	sthio	zero,0(r2)
    alt_ic_isr_register(I2C_IC_ID, I2C_IRQ, Handler, nullptr, nullptr);
    13bc:	01800034 	movhi	r6,0
    13c0:	d8000015 	stw	zero,0(sp)
    13c4:	000f883a 	mov	r7,zero
    13c8:	3184fa04 	addi	r6,r6,5096
    13cc:	01400144 	movi	r5,5
    13d0:	0009883a 	mov	r4,zero
    13d4:	0005a780 	call	5a78 <alt_ic_isr_register>
    StartConversionAsync(0);
    13d8:	0009883a 	mov	r4,zero
}
    13dc:	dfc00117 	ldw	ra,4(sp)
    13e0:	dec00204 	addi	sp,sp,8
    StartConversionAsync(0);
    13e4:	00013601 	jmpi	1360 <_ZN4Adc220StartConversionAsyncEi>

000013e8 <_ZN4Adc27HandlerEPv>:
    I2CM_WriteRegister2Byte(I2C_BASE, address, txdata);
    AwaitComplete();
    return I2CM_IsAcked(I2C_BASE);
}

void Adc2::Handler(void *context) {
    13e8:	deffff04 	addi	sp,sp,-4
    13ec:	dfc00015 	stw	ra,0(sp)
    13f0:	00b90114 	movui	r2,58372
    13f4:	1000002d 	sthio	zero,0(r2)
    int intflag = __builtin_ldhuio(&((I2CMasterRegisters*)base)->STATUS);
    13f8:	00b90094 	movui	r2,58370
    13fc:	1080002b 	ldhuio	r2,0(r2)
    return (intflag & 0x2) ? true : false;
    1400:	1004d07a 	srli	r2,r2,1
    I2CM_ClearComplete(I2C_BASE);
    if (I2CM_IsAcked(I2C_BASE) == false) {
    1404:	1080004c 	andi	r2,r2,1
    1408:	10000b1e 	bne	r2,zero,1438 <_ZN4Adc27HandlerEPv+0x50>
    error:
    for (uint32_t i = 0; i < NUMBER_OF_SEQUENCE; i++) {
        _Result[i] = 0;
    }
    _Valid = false;
    _State = STATE_BusReset;
    140c:	008000c4 	movi	r2,3
        _Result[i] = 0;
    1410:	d020178d 	sth	zero,-32674(gp)
    1414:	d020180d 	sth	zero,-32672(gp)
    _Valid = false;
    1418:	d0201705 	stb	zero,-32676(gp)
    _State = STATE_BusReset;
    141c:	d0a01a15 	stw	r2,-32664(gp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0001);
    1420:	00c00044 	movi	r3,1
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0046);
}

static inline void I2CM_ReadRegister2Byte(uint32_t base, int address) {
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0146);
    1424:	00b90014 	movui	r2,58368
    1428:	10c0002d 	sthio	r3,0(r2)
    StartBusResetAsync();
}
    142c:	dfc00017 	ldw	ra,0(sp)
    1430:	dec00104 	addi	sp,sp,4
    1434:	f800283a 	ret
    switch (_State) {
    1438:	d0a01a17 	ldw	r2,-32664(gp)
    143c:	10c000a0 	cmpeqi	r3,r2,2
    1440:	18001e1e 	bne	r3,zero,14bc <_ZN4Adc27HandlerEPv+0xd4>
    1444:	10c000e8 	cmpgeui	r3,r2,3
    1448:	1800071e 	bne	r3,zero,1468 <_ZN4Adc27HandlerEPv+0x80>
    144c:	10000b1e 	bne	r2,zero,147c <_ZN4Adc27HandlerEPv+0x94>
        _State = STATE_PollConfig;
    1450:	00800044 	movi	r2,1
    1454:	d0a01a15 	stw	r2,-32664(gp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    1458:	00c00044 	movi	r3,1
    145c:	00b90214 	movui	r2,58376
    1460:	10c0002d 	sthio	r3,0(r2)
    1464:	00001306 	br	14b4 <_ZN4Adc27HandlerEPv+0xcc>
    switch (_State) {
    1468:	108000e0 	cmpeqi	r2,r2,3
    146c:	103fe726 	beq	r2,zero,140c <_ZN4Adc27HandlerEPv+0x24>
        StartConversionAsync(0);
    1470:	0009883a 	mov	r4,zero
    1474:	00013600 	call	1360 <_ZN4Adc220StartConversionAsyncEi>
    1478:	003fe406 	br	140c <_ZN4Adc27HandlerEPv+0x24>
static inline int I2CM_GetReadResult1Byte(uint32_t base) {
    return __builtin_ldbuio(&((I2CMasterRegisters*)base)->RXDATA);
}

static inline int I2CM_GetReadResult2Byte(uint32_t base) {
    return __builtin_ldhuio(&((I2CMasterRegisters*)base)->RXDATA);
    147c:	00b90314 	movui	r2,58380
    1480:	1080002b 	ldhuio	r2,0(r2)
        if (config & 0x8000) {
    1484:	1006923a 	slli	r3,r2,8
    1488:	10bfffcc 	andi	r2,r2,65535
    148c:	1004d23a 	srli	r2,r2,8
    1490:	1884b03a 	or	r2,r3,r2
    1494:	10bfffcc 	andi	r2,r2,65535
    1498:	10a0001c 	xori	r2,r2,32768
    149c:	10a00004 	addi	r2,r2,-32768
    14a0:	103fed0e 	bge	r2,zero,1458 <_ZN4Adc27HandlerEPv+0x70>
            _State = STATE_ReadResult;
    14a4:	00800084 	movi	r2,2
    14a8:	d0a01a15 	stw	r2,-32664(gp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    14ac:	00b90214 	movui	r2,58376
    14b0:	1000002d 	sthio	zero,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0146);
    14b4:	00c05184 	movi	r3,326
    14b8:	003fda06 	br	1424 <_ZN4Adc27HandlerEPv+0x3c>
    return __builtin_ldhuio(&((I2CMasterRegisters*)base)->RXDATA);
    14bc:	00b90314 	movui	r2,58380
    14c0:	1080002b 	ldhuio	r2,0(r2)
            float value = static_cast<int>(result) * (1.0f / 32768.0f * 4.096f * 21.0f * 1000.0f); // 分解能 42mV;
    14c4:	1008923a 	slli	r4,r2,8
    14c8:	10bfffcc 	andi	r2,r2,65535
    14cc:	1004d23a 	srli	r2,r2,8
    14d0:	2088b03a 	or	r4,r4,r2
        if (_Sequence == 0) {
    14d4:	d0a01917 	ldw	r2,-32668(gp)
            float value = static_cast<int>(result) * (1.0f / 32768.0f * 4.096f * 21.0f * 1000.0f); // 分解能 42mV;
    14d8:	213fffcc 	andi	r4,r4,65535
    14dc:	2009feb2 	custom	250,r4,r4,zero
        if (_Sequence == 0) {
    14e0:	1000141e 	bne	r2,zero,1534 <_ZN4Adc27HandlerEPv+0x14c>
            float value = static_cast<int>(result) * (1.0f / 32768.0f * 4.096f * 21.0f * 1000.0f); // 分解能 42mV;
    14e4:	00900a34 	movhi	r2,16424
    14e8:	10800044 	addi	r2,r2,1
    14ec:	2089ff32 	custom	252,r4,r4,r2
            _Result[0] = static_cast<int>(fmaxf(0.0f, fminf(value, 65535.0f)));
    14f0:	0091e034 	movhi	r2,18304
    14f4:	10bfc004 	addi	r2,r2,-256
    14f8:	2089fa72 	custom	233,r4,r4,r2
    14fc:	0005883a 	mov	r2,zero
    1500:	1109fa32 	custom	232,r4,r2,r4
    1504:	2009fe72 	custom	249,r4,r4,zero
    1508:	d120178d 	sth	r4,-32674(gp)
            CentralizedMonitor::Adc2KeepAlive(_Result[0]);
    150c:	213fffcc 	andi	r4,r4,65535
    1510:	0000bf00 	call	bf0 <_ZN18CentralizedMonitor13Adc2KeepAliveEi>
            StreamTransmitter::TransmitAdc2();
    1514:	0001ecc0 	call	1ecc <_ZN17StreamTransmitter12TransmitAdc2Ev>
        StartConversionAsync(_Sequence + 1);
    1518:	d1201917 	ldw	r4,-32668(gp)
        _Valid = true;
    151c:	00800044 	movi	r2,1
    1520:	d0a01705 	stb	r2,-32676(gp)
        StartConversionAsync(_Sequence + 1);
    1524:	21000044 	addi	r4,r4,1
}
    1528:	dfc00017 	ldw	ra,0(sp)
    152c:	dec00104 	addi	sp,sp,4
        StartConversionAsync(_Sequence + 1);
    1530:	00013601 	jmpi	1360 <_ZN4Adc220StartConversionAsyncEi>
            float value = static_cast<int>(result) * (1.0f / 32768.0f * 0.256f / 0.01f * 1000.0f); // 分解能 12.5mA
    1534:	008fd234 	movhi	r2,16200
    1538:	10800044 	addi	r2,r2,1
    153c:	2089ff32 	custom	252,r4,r4,r2
            _Result[1] = static_cast<int>(fmaxf(0.0f, fminf(value, 65535.0f)));
    1540:	0091e034 	movhi	r2,18304
    1544:	10bfc004 	addi	r2,r2,-256
    1548:	2089fa72 	custom	233,r4,r4,r2
    154c:	0005883a 	mov	r2,zero
    1550:	1109fa32 	custom	232,r4,r2,r4
    1554:	2009fe72 	custom	249,r4,r4,zero
    1558:	d120180d 	sth	r4,-32672(gp)
            DribbleController::Adc2UpdateCurrent(_Result[1]);
    155c:	213fffcc 	andi	r4,r4,65535
    1560:	00012580 	call	1258 <_ZN17DribbleController17Adc2UpdateCurrentEi>
    1564:	003fec06 	br	1518 <_ZN4Adc27HandlerEPv+0x130>

00001568 <_ZN4Adc212ReadRegisterEiPt>:
bool Adc2::ReadRegister(int address, uint16_t *value) {
    1568:	defffe04 	addi	sp,sp,-8
    156c:	dc000015 	stw	r16,0(sp)
    1570:	dfc00115 	stw	ra,4(sp)
    1574:	2821883a 	mov	r16,r5
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    1578:	00b90214 	movui	r2,58376
    157c:	1100002d 	sthio	r4,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0146);
    1580:	00c05184 	movi	r3,326
    1584:	00b90014 	movui	r2,58368
    1588:	10c0002d 	sthio	r3,0(r2)
    AwaitComplete();
    158c:	000134c0 	call	134c <_ZN4Adc213AwaitCompleteEv>
    int intflag = __builtin_ldhuio(&((I2CMasterRegisters*)base)->STATUS);
    1590:	00b90094 	movui	r2,58370
    1594:	10c0002b 	ldhuio	r3,0(r2)
    return (intflag & 0x2) ? true : false;
    1598:	1806d07a 	srli	r3,r3,1
    159c:	1880004c 	andi	r2,r3,1
    if (I2CM_IsAcked(I2C_BASE)) {
    15a0:	10000726 	beq	r2,zero,15c0 <_ZN4Adc212ReadRegisterEiPt+0x58>
    return __builtin_ldhuio(&((I2CMasterRegisters*)base)->RXDATA);
    15a4:	00f90314 	movui	r3,58380
    15a8:	18c0002b 	ldhuio	r3,0(r3)
        *value = (rxdata << 8) | (rxdata >> 8);
    15ac:	1808923a 	slli	r4,r3,8
    15b0:	18ffffcc 	andi	r3,r3,65535
    15b4:	1806d23a 	srli	r3,r3,8
    15b8:	20c6b03a 	or	r3,r4,r3
    15bc:	80c0000d 	sth	r3,0(r16)
}
    15c0:	dfc00117 	ldw	ra,4(sp)
    15c4:	dc000017 	ldw	r16,0(sp)
    15c8:	dec00204 	addi	sp,sp,8
    15cc:	f800283a 	ret

000015d0 <_ZN4Adc210InitializeEv>:
bool Adc2::Initialize(void) {
    15d0:	defffe04 	addi	sp,sp,-8
    15d4:	dfc00115 	stw	ra,4(sp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0001);
    15d8:	00c00044 	movi	r3,1
    15dc:	00b90014 	movui	r2,58368
    15e0:	10c0002d 	sthio	r3,0(r2)
    AwaitComplete();
    15e4:	000134c0 	call	134c <_ZN4Adc213AwaitCompleteEv>
    __builtin_sthio(&((I2CMasterRegisters*)base)->DADDR, address);
    15e8:	00c01204 	movi	r3,72
    15ec:	00b90194 	movui	r2,58374
    15f0:	10c0002d 	sthio	r3,0(r2)
    if (ReadRegister(ADS1015_CONFIGURATION, &config) == false) {
    15f4:	d9400084 	addi	r5,sp,2
    15f8:	01000044 	movi	r4,1
    15fc:	00015680 	call	1568 <_ZN4Adc212ReadRegisterEiPt>
}
    1600:	dfc00117 	ldw	ra,4(sp)
    1604:	dec00204 	addi	sp,sp,8
    1608:	f800283a 	ret

0000160c <_ZN3Imu8ReadDataEP11ImuResult_t>:
static inline void IMU_SPIM_SetPassthrough(uint32_t base, bool enabled) {
    __builtin_sthio(&((ImuSpiMasterRegisters*)base)->CONTROL, enabled ? 0x0001 : 0x0000);
}

static inline int IMU_SPIM_GetTempData(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->TEMP_DATA);
    160c:	00b98094 	movui	r2,58882
    1610:	1080002f 	ldhio	r2,0(r2)

    return true;
}

void Imu::ReadData(ImuResult_t *data) {
    data->TempData = IMU_SPIM_GetTempData(IMU_SPIM_BASE);
    1614:	2080000d 	sth	r2,0(r4)
}

static inline int IMU_SPIM_GetAccelDataX(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_X);
    1618:	00b98114 	movui	r2,58884
    161c:	1080002f 	ldhio	r2,0(r2)
    data->AccelDataX = IMU_SPIM_GetAccelDataX(IMU_SPIM_BASE);
    1620:	2080008d 	sth	r2,2(r4)
}

static inline int IMU_SPIM_GetAccelDataY(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_Y);
    1624:	00b98194 	movui	r2,58886
    1628:	1080002f 	ldhio	r2,0(r2)
    data->AccelDataY = IMU_SPIM_GetAccelDataY(IMU_SPIM_BASE);
    162c:	2080010d 	sth	r2,4(r4)
}

static inline int IMU_SPIM_GetAccelDataZ(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_Z);
    1630:	00b98214 	movui	r2,58888
    1634:	1080002f 	ldhio	r2,0(r2)
    data->AccelDataZ = IMU_SPIM_GetAccelDataZ(IMU_SPIM_BASE);
    1638:	2080018d 	sth	r2,6(r4)
}

static inline int IMU_SPIM_GetGyroDataX(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_X);
    163c:	00b98294 	movui	r2,58890
    1640:	1080002f 	ldhio	r2,0(r2)
    data->GyroDataX = IMU_SPIM_GetGyroDataX(IMU_SPIM_BASE);
    1644:	2080020d 	sth	r2,8(r4)
}

static inline int IMU_SPIM_GetGyroDataY(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_Y);
    1648:	00b98314 	movui	r2,58892
    164c:	1080002f 	ldhio	r2,0(r2)
    data->GyroDataY = IMU_SPIM_GetGyroDataY(IMU_SPIM_BASE);
    1650:	2080028d 	sth	r2,10(r4)
}

static inline int IMU_SPIM_GetGyroDataZ(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_Z);
    1654:	00b98394 	movui	r2,58894
    1658:	1080002f 	ldhio	r2,0(r2)
    data->GyroDataZ = IMU_SPIM_GetGyroDataZ(IMU_SPIM_BASE);
    165c:	2080030d 	sth	r2,12(r4)
    //ReadRegisters(ICM42688_BANK0_TEMP_DATA1, sizeof(ImuResult_t), data);
}
    1660:	f800283a 	ret

00001664 <_ZN3Imu7SetBankEm>:

void Imu::SetBank(uint32_t bank) {
    if (bank != _Bank) {
    1664:	d0a01b43 	ldbu	r2,-32659(gp)
    1668:	11001126 	beq	r2,r4,16b0 <_ZN3Imu7SetBankEm+0x4c>
void Imu::SetBank(uint32_t bank) {
    166c:	defffb04 	addi	sp,sp,-20
        _Bank = bank;
        uint8_t buffer[2];
        buffer[0] = ICM42688_REG_BANK_SEL;
        buffer[1] = bank;
    1670:	d90003c5 	stb	r4,15(sp)
        _Bank = bank;
    1674:	d1201b45 	stb	r4,-32659(gp)
        buffer[0] = ICM42688_REG_BANK_SEL;
    1678:	00801d84 	movi	r2,118
        alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    167c:	d8000215 	stw	zero,8(sp)
    1680:	d8000115 	stw	zero,4(sp)
    1684:	d8000015 	stw	zero,0(sp)
    1688:	d9c00384 	addi	r7,sp,14
    168c:	01800084 	movi	r6,2
    1690:	000b883a 	mov	r5,zero
    1694:	01394014 	movui	r4,58624
void Imu::SetBank(uint32_t bank) {
    1698:	dfc00415 	stw	ra,16(sp)
        buffer[0] = ICM42688_REG_BANK_SEL;
    169c:	d8800385 	stb	r2,14(sp)
        alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    16a0:	00056580 	call	5658 <alt_avalon_spi_command>
    }
}
    16a4:	dfc00417 	ldw	ra,16(sp)
    16a8:	dec00504 	addi	sp,sp,20
    16ac:	f800283a 	ret
    16b0:	f800283a 	ret

000016b4 <_ZN3Imu12ReadRegisterEm>:

uint8_t Imu::ReadRegister(uint32_t address) {
    16b4:	defffa04 	addi	sp,sp,-24
    16b8:	dc000415 	stw	r16,16(sp)
    16bc:	2021883a 	mov	r16,r4
    SetBank((address >> 8) & 0x7);
    16c0:	2008d23a 	srli	r4,r4,8
uint8_t Imu::ReadRegister(uint32_t address) {
    16c4:	dfc00515 	stw	ra,20(sp)
    SetBank((address >> 8) & 0x7);
    16c8:	210001cc 	andi	r4,r4,7
    16cc:	00016640 	call	1664 <_ZN3Imu7SetBankEm>
    uint8_t buffer[1];
    buffer[0] = 0x80 | (address & 0x7F);
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    16d0:	d9c003c4 	addi	r7,sp,15
    buffer[0] = 0x80 | (address & 0x7F);
    16d4:	013fe004 	movi	r4,-128
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    16d8:	00800044 	movi	r2,1
    buffer[0] = 0x80 | (address & 0x7F);
    16dc:	8120b03a 	or	r16,r16,r4
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    16e0:	d8000215 	stw	zero,8(sp)
    16e4:	d9c00115 	stw	r7,4(sp)
    16e8:	d8800015 	stw	r2,0(sp)
    16ec:	01800044 	movi	r6,1
    16f0:	000b883a 	mov	r5,zero
    16f4:	01394014 	movui	r4,58624
    buffer[0] = 0x80 | (address & 0x7F);
    16f8:	dc0003c5 	stb	r16,15(sp)
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    16fc:	00056580 	call	5658 <alt_avalon_spi_command>
    return buffer[0];
}
    1700:	d88003c3 	ldbu	r2,15(sp)
    1704:	dfc00517 	ldw	ra,20(sp)
    1708:	dc000417 	ldw	r16,16(sp)
    170c:	dec00604 	addi	sp,sp,24
    1710:	f800283a 	ret

00001714 <_ZN3Imu13WriteRegisterEmh>:

void Imu::WriteRegister(uint32_t address, uint8_t value) {
    1714:	defff904 	addi	sp,sp,-28
    1718:	dc000415 	stw	r16,16(sp)
    171c:	2021883a 	mov	r16,r4
    SetBank((address >> 8) & 0x7);
    1720:	2008d23a 	srli	r4,r4,8
void Imu::WriteRegister(uint32_t address, uint8_t value) {
    1724:	dfc00615 	stw	ra,24(sp)
    1728:	dc400515 	stw	r17,20(sp)
    SetBank((address >> 8) & 0x7);
    172c:	210001cc 	andi	r4,r4,7
void Imu::WriteRegister(uint32_t address, uint8_t value) {
    1730:	2823883a 	mov	r17,r5
    SetBank((address >> 8) & 0x7);
    1734:	00016640 	call	1664 <_ZN3Imu7SetBankEm>
    uint8_t buffer[2];
    buffer[0] = address & 0x7F;
    1738:	84001fcc 	andi	r16,r16,127
    buffer[1] = value;
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    173c:	d8000215 	stw	zero,8(sp)
    1740:	d8000115 	stw	zero,4(sp)
    1744:	d8000015 	stw	zero,0(sp)
    1748:	d9c00384 	addi	r7,sp,14
    174c:	01800084 	movi	r6,2
    1750:	000b883a 	mov	r5,zero
    1754:	01394014 	movui	r4,58624
    buffer[0] = address & 0x7F;
    1758:	dc000385 	stb	r16,14(sp)
    buffer[1] = value;
    175c:	dc4003c5 	stb	r17,15(sp)
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    1760:	00056580 	call	5658 <alt_avalon_spi_command>
}
    1764:	dfc00617 	ldw	ra,24(sp)
    1768:	dc400517 	ldw	r17,20(sp)
    176c:	dc000417 	ldw	r16,16(sp)
    1770:	dec00704 	addi	sp,sp,28
    1774:	f800283a 	ret

00001778 <_ZN3Imu10InitializeEv>:
bool Imu::Initialize(void) {
    1778:	defffe04 	addi	sp,sp,-8
    177c:	dc000015 	stw	r16,0(sp)
    1780:	dfc00115 	stw	ra,4(sp)
    __builtin_sthio(&((ImuSpiMasterRegisters*)base)->CONTROL, enabled ? 0x0001 : 0x0000);
    1784:	04000044 	movi	r16,1
    1788:	00b98014 	movui	r2,58880
    178c:	1400002d 	sthio	r16,0(r2)
    _Bank = -1;
    1790:	00bfffc4 	movi	r2,-1
    WriteRegister(ICM42688_BANK0_DEVICE_CONFIG, 0x01);
    1794:	01400044 	movi	r5,1
    1798:	01000444 	movi	r4,17
    _Bank = -1;
    179c:	d0a01b45 	stb	r2,-32659(gp)
    WriteRegister(ICM42688_BANK0_DEVICE_CONFIG, 0x01);
    17a0:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    usleep(1000);
    17a4:	0100fa04 	movi	r4,1000
    17a8:	00055000 	call	5500 <usleep>
    if (ReadRegister(ICM42688_BANK0_WHO_AM_I) != 0x47) {
    17ac:	01001d44 	movi	r4,117
    17b0:	00016b40 	call	16b4 <_ZN3Imu12ReadRegisterEm>
    17b4:	10803fcc 	andi	r2,r2,255
    17b8:	108011d8 	cmpnei	r2,r2,71
    17bc:	1000221e 	bne	r2,zero,1848 <_ZN3Imu10InitializeEv+0xd0>
    WriteRegister(ICM42688_BANK1_INTF_CONFIG5, 0x04);  // PIN9_FUNCTION <= CLKIN
    17c0:	01400104 	movi	r5,4
    17c4:	01005ec4 	movi	r4,379
    17c8:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INTF_CONFIG0, 0x13);  // SENSOR_DATA_ENDIAN <= Big Endian, UI_SIFS_CFG <= Disable I2C
    17cc:	014004c4 	movi	r5,19
    17d0:	01001304 	movi	r4,76
    17d4:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INTF_CONFIG1, 0x95);  // RTC_MODE <= RTC clock input is required
    17d8:	01402544 	movi	r5,149
    17dc:	01001344 	movi	r4,77
    17e0:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_PWR_MGMT0, 0x0F);     // GYRO_MODE <= LN Mode, ACCEL_MODE <= LN Mode
    17e4:	014003c4 	movi	r5,15
    17e8:	01001384 	movi	r4,78
    17ec:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    usleep(200);
    17f0:	01003204 	movi	r4,200
    17f4:	00055000 	call	5500 <usleep>
    WriteRegister(ICM42688_BANK0_GYRO_CONFIG1, 0xF6);  // TEMP_FILT_BW <= (DLPF BW = 5Hz; DLPF Latency = 32ms)
    17f8:	01403d84 	movi	r5,246
    17fc:	01001444 	movi	r4,81
    1800:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INT_CONFIG, 0x02);   // INT1_MODE <= Pulsed mode, INT1_DRIVE_CIRCUIT <= Push pull, INT1_POLARITY <= Active low
    1804:	01400084 	movi	r5,2
    1808:	01000504 	movi	r4,20
    180c:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INT_CONFIG1, 0x00);  // INT_ASYNC_RESET <= 0
    1810:	000b883a 	mov	r5,zero
    1814:	01001904 	movi	r4,100
    1818:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INT_SOURCE0, 0x08);  // UI_DRDY_INT1_EN <= UI data ready interrupt routed to INT1
    181c:	01400204 	movi	r5,8
    1820:	01001944 	movi	r4,101
    1824:	00017140 	call	1714 <_ZN3Imu13WriteRegisterEmh>
    1828:	00b98014 	movui	r2,58880
    182c:	1000002d 	sthio	zero,0(r2)
    _Valid = true;
    1830:	d4201b05 	stb	r16,-32660(gp)
    return true;
    1834:	00800044 	movi	r2,1
}
    1838:	dfc00117 	ldw	ra,4(sp)
    183c:	dc000017 	ldw	r16,0(sp)
    1840:	dec00204 	addi	sp,sp,8
    1844:	f800283a 	ret
        return false;
    1848:	0005883a 	mov	r2,zero
    184c:	003ffa06 	br	1838 <_ZN3Imu10InitializeEv+0xc0>

00001850 <_ZZ4mainENUlcE_4_FUNEc>:
    char buf[64];
    MICROSHELL ms;
    MSCMD mscmd;
    microshell_init(
        &ms,
        [](char c) {alt_putchar(c);},
    1850:	21003fcc 	andi	r4,r4,255
    1854:	2100201c 	xori	r4,r4,128
    1858:	213fe004 	addi	r4,r4,-128
    185c:	00054141 	jmpi	5414 <alt_putchar>

00001860 <_ZZ4mainENUlvE0_4_FUNEv>:
        [](void) -> char {return alt_getchar();},
    1860:	deffff04 	addi	sp,sp,-4
    1864:	dfc00015 	stw	ra,0(sp)
    1868:	000521c0 	call	521c <alt_getchar>
    186c:	dfc00017 	ldw	ra,0(sp)
    1870:	dec00104 	addi	sp,sp,4
    1874:	f800283a 	ret

00001878 <_ZL13command_faultP5MSOPTPv>:
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x1);
    1878:	00800044 	movi	r2,1
    187c:	00fc0114 	movui	r3,61444
    1880:	1880002d 	sthio	r2,0(r3)
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x1);
    1884:	00fc4114 	movui	r3,61700
    1888:	1880002d 	sthio	r2,0(r3)
}
    188c:	0005883a 	mov	r2,zero
    1890:	f800283a 	ret

00001894 <_ZL13command_clearP5MSOPTPv>:
        __builtin_stwio(&_SharedMemory.ErrorFlags, new_error_flags);
    1894:	00ffffc4 	movi	r3,-1
    1898:	00800074 	movhi	r2,1
    189c:	10ec0035 	stwio	r3,-20480(r2)
}
    18a0:	0005883a 	mov	r2,zero
    18a4:	f800283a 	ret

000018a8 <_ZL12command_adc2P5MSOPTPv>:
    printf("P48V=%dmV Idribble=%dmA\n", p48v, dribble);
    18a8:	d1a0180b 	ldhu	r6,-32672(gp)
    18ac:	d160178b 	ldhu	r5,-32674(gp)
    18b0:	01000034 	movhi	r4,0
static MSCMD_USER_RESULT command_adc2(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    18b4:	deffff04 	addi	sp,sp,-4
    printf("P48V=%dmV Idribble=%dmA\n", p48v, dribble);
    18b8:	21177504 	addi	r4,r4,24020
static MSCMD_USER_RESULT command_adc2(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    18bc:	dfc00015 	stw	ra,0(sp)
    printf("P48V=%dmV Idribble=%dmA\n", p48v, dribble);
    18c0:	00047fc0 	call	47fc <printf>
}
    18c4:	0005883a 	mov	r2,zero
    18c8:	dfc00017 	ldw	ra,0(sp)
    18cc:	dec00104 	addi	sp,sp,4
    18d0:	f800283a 	ret

000018d4 <_ZL14command_statusP5MSOPTPv>:
static MSCMD_USER_RESULT command_status(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    18d4:	deffff04 	addi	sp,sp,-4
    printf("PIO1=%08X\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE));
    18d8:	00b84014 	movui	r2,57600
static MSCMD_USER_RESULT command_status(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    18dc:	dfc00015 	stw	ra,0(sp)
    printf("PIO1=%08X\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE));
    18e0:	11400037 	ldwio	r5,0(r2)
    18e4:	01000034 	movhi	r4,0
    18e8:	21177c04 	addi	r4,r4,24048
    18ec:	00047fc0 	call	47fc <printf>
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    18f0:	00bc4014 	movui	r2,61696
    18f4:	1140002b 	ldhuio	r5,0(r2)
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
    18f8:	00bc4094 	movui	r2,61698
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    18fc:	297fffcc 	andi	r5,r5,65535
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
    1900:	1180002b 	ldhuio	r6,0(r2)
    printf("Mc5Status=%04X (%04X)\n", MotorController::GetStatus().Status, MotorController::GetInterruptFlag().Status);
    1904:	01000034 	movhi	r4,0
    1908:	31bfffcc 	andi	r6,r6,65535
    190c:	21177f04 	addi	r4,r4,24060
    1910:	00047fc0 	call	47fc <printf>
        return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    1914:	00bc0014 	movui	r2,61440
    1918:	1140002b 	ldhuio	r5,0(r2)
		return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
    191c:	00bc0094 	movui	r2,61442
        return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    1920:	297fffcc 	andi	r5,r5,65535
		return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
    1924:	1180002b 	ldhuio	r6,0(r2)
    printf("VecStatus=%04X (%04X)\n", VectorController::GetStatus().Status, VectorController::GetInterruptFlag().Status);
    1928:	01000034 	movhi	r4,0
    192c:	31bfffcc 	andi	r6,r6,65535
    1930:	21178504 	addi	r4,r4,24084
    1934:	00047fc0 	call	47fc <printf>
        return _ErrorFlags;
    1938:	d1601417 	ldw	r5,-32688(gp)
        return _FaultFlags;
    193c:	d1a01317 	ldw	r6,-32692(gp)
    printf("Error=%08X, Fault=%08X\n", (int)CentralizedMonitor::GetErrorFlags(), (int)CentralizedMonitor::GetFaultFlags());
    1940:	01000034 	movhi	r4,0
    1944:	21178b04 	addi	r4,r4,24108
    1948:	00047fc0 	call	47fc <printf>
}
    194c:	0005883a 	mov	r2,zero
    1950:	dfc00017 	ldw	ra,0(sp)
    1954:	dec00104 	addi	sp,sp,4
    1958:	f800283a 	ret

0000195c <_ZL11command_imuP5MSOPTPv>:
static MSCMD_USER_RESULT command_imu(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    195c:	defff804 	addi	sp,sp,-32
    Imu::ReadData(&result);
    1960:	d9000384 	addi	r4,sp,14
static MSCMD_USER_RESULT command_imu(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1964:	dfc00715 	stw	ra,28(sp)
    Imu::ReadData(&result);
    1968:	000160c0 	call	160c <_ZN3Imu8ReadDataEP11ImuResult_t>
    printf("Accel(%d, %d, %d) Gyro(%d, %d, %d)\n", result.AccelDataX, result.AccelDataY, result.AccelDataZ, result.GyroDataX, result.GyroDataY, result.GyroDataZ);
    196c:	d880068f 	ldh	r2,26(sp)
    1970:	d9c0050f 	ldh	r7,20(sp)
    1974:	d980048f 	ldh	r6,18(sp)
    1978:	d8800215 	stw	r2,8(sp)
    197c:	d880060f 	ldh	r2,24(sp)
    1980:	d940040f 	ldh	r5,16(sp)
    1984:	01000034 	movhi	r4,0
    1988:	d8800115 	stw	r2,4(sp)
    198c:	d880058f 	ldh	r2,22(sp)
    1990:	21179104 	addi	r4,r4,24132
    1994:	d8800015 	stw	r2,0(sp)
    1998:	00047fc0 	call	47fc <printf>
}
    199c:	0005883a 	mov	r2,zero
    19a0:	dfc00717 	ldw	ra,28(sp)
    19a4:	dec00804 	addi	sp,sp,32
    19a8:	f800283a 	ret

000019ac <_ZL10command_kiP5MSOPTPv>:
static MSCMD_USER_RESULT command_ki(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    19ac:	defff404 	addi	sp,sp,-48
    msopt_get_argc(msopt, &argc);
    19b0:	d80b883a 	mov	r5,sp
static MSCMD_USER_RESULT command_ki(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    19b4:	dc000a15 	stw	r16,40(sp)
    19b8:	dfc00b15 	stw	ra,44(sp)
    19bc:	2021883a 	mov	r16,r4
    msopt_get_argc(msopt, &argc);
    19c0:	00008e40 	call	8e4 <msopt_get_argc>
    if (argc == 2) {
    19c4:	d8800017 	ldw	r2,0(sp)
    19c8:	10800098 	cmpnei	r2,r2,2
    19cc:	1000121e 	bne	r2,zero,1a18 <_ZL10command_kiP5MSOPTPv+0x6c>
        msopt_get_argv(msopt, 1, buf, sizeof(buf));
    19d0:	01c00804 	movi	r7,32
    19d4:	d9800204 	addi	r6,sp,8
    19d8:	01400044 	movi	r5,1
    19dc:	8009883a 	mov	r4,r16
    19e0:	000090c0 	call	90c <msopt_get_argv>
        int value = ntlibc_atoi(buf);
    19e4:	d9000204 	addi	r4,sp,8
    19e8:	00009dc0 	call	9dc <ntlibc_atoi>
        WheelController::GetGains(&kp, nullptr);
    19ec:	000b883a 	mov	r5,zero
    19f0:	d9000104 	addi	r4,sp,4
        int value = ntlibc_atoi(buf);
    19f4:	1021883a 	mov	r16,r2
        WheelController::GetGains(&kp, nullptr);
    19f8:	00023500 	call	2350 <_ZN15WheelController8GetGainsEPfS0_>
        WheelController::SetGains(kp, (float)value);
    19fc:	d9000117 	ldw	r4,4(sp)
    1a00:	800bfeb2 	custom	250,r5,r16,zero
    1a04:	00022f40 	call	22f4 <_ZN15WheelController8SetGainsEff>
        printf("Ki = %d\n", value);
    1a08:	01000034 	movhi	r4,0
    1a0c:	800b883a 	mov	r5,r16
    1a10:	21179a04 	addi	r4,r4,24168
    1a14:	00047fc0 	call	47fc <printf>
}
    1a18:	0005883a 	mov	r2,zero
    1a1c:	dfc00b17 	ldw	ra,44(sp)
    1a20:	dc000a17 	ldw	r16,40(sp)
    1a24:	dec00c04 	addi	sp,sp,48
    1a28:	f800283a 	ret

00001a2c <_ZL10command_kpP5MSOPTPv>:
static MSCMD_USER_RESULT command_kp(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1a2c:	defff404 	addi	sp,sp,-48
    msopt_get_argc(msopt, &argc);
    1a30:	d80b883a 	mov	r5,sp
static MSCMD_USER_RESULT command_kp(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1a34:	dc000a15 	stw	r16,40(sp)
    1a38:	dfc00b15 	stw	ra,44(sp)
    1a3c:	2021883a 	mov	r16,r4
    msopt_get_argc(msopt, &argc);
    1a40:	00008e40 	call	8e4 <msopt_get_argc>
    if (argc == 2) {
    1a44:	d8800017 	ldw	r2,0(sp)
    1a48:	10800098 	cmpnei	r2,r2,2
    1a4c:	1000121e 	bne	r2,zero,1a98 <_ZL10command_kpP5MSOPTPv+0x6c>
        msopt_get_argv(msopt, 1, buf, sizeof(buf));
    1a50:	01c00804 	movi	r7,32
    1a54:	d9800204 	addi	r6,sp,8
    1a58:	01400044 	movi	r5,1
    1a5c:	8009883a 	mov	r4,r16
    1a60:	000090c0 	call	90c <msopt_get_argv>
        int value = ntlibc_atoi(buf);
    1a64:	d9000204 	addi	r4,sp,8
    1a68:	00009dc0 	call	9dc <ntlibc_atoi>
        WheelController::GetGains(nullptr, &ki);
    1a6c:	d9400104 	addi	r5,sp,4
    1a70:	0009883a 	mov	r4,zero
        int value = ntlibc_atoi(buf);
    1a74:	1021883a 	mov	r16,r2
        WheelController::GetGains(nullptr, &ki);
    1a78:	00023500 	call	2350 <_ZN15WheelController8GetGainsEPfS0_>
        WheelController::SetGains((float)value, ki);
    1a7c:	d9400117 	ldw	r5,4(sp)
    1a80:	8009feb2 	custom	250,r4,r16,zero
    1a84:	00022f40 	call	22f4 <_ZN15WheelController8SetGainsEff>
        printf("Kp = %d\n", value);
    1a88:	01000034 	movhi	r4,0
    1a8c:	800b883a 	mov	r5,r16
    1a90:	21179d04 	addi	r4,r4,24180
    1a94:	00047fc0 	call	47fc <printf>
}
    1a98:	0005883a 	mov	r2,zero
    1a9c:	dfc00b17 	ldw	ra,44(sp)
    1aa0:	dc000a17 	ldw	r16,40(sp)
    1aa4:	dec00c04 	addi	sp,sp,48
    1aa8:	f800283a 	ret

00001aac <_ZL14command_switchP5MSOPTPv>:
static MSCMD_USER_RESULT command_switch(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1aac:	defff504 	addi	sp,sp,-44
    msopt_get_argc(msopt, &argc);
    1ab0:	d80b883a 	mov	r5,sp
static MSCMD_USER_RESULT command_switch(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1ab4:	dc000915 	stw	r16,36(sp)
    1ab8:	dfc00a15 	stw	ra,40(sp)
    1abc:	2021883a 	mov	r16,r4
    msopt_get_argc(msopt, &argc);
    1ac0:	00008e40 	call	8e4 <msopt_get_argc>
    if (argc == 2) {
    1ac4:	d8800017 	ldw	r2,0(sp)
    1ac8:	10800098 	cmpnei	r2,r2,2
    1acc:	1000161e 	bne	r2,zero,1b28 <_ZL14command_switchP5MSOPTPv+0x7c>
        msopt_get_argv(msopt, 1, buf, sizeof(buf));
    1ad0:	01400044 	movi	r5,1
    1ad4:	01c00804 	movi	r7,32
    1ad8:	d9800104 	addi	r6,sp,4
    1adc:	8009883a 	mov	r4,r16
    1ae0:	000090c0 	call	90c <msopt_get_argv>
        bool enabled = buf[0] == '1';
    1ae4:	d9400107 	ldb	r5,4(sp)
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
    1ae8:	00c00804 	movi	r3,32
    1aec:	29400c60 	cmpeqi	r5,r5,49
        if (enabled == false) {
    1af0:	2800121e 	bne	r5,zero,1b3c <_ZL14command_switchP5MSOPTPv+0x90>
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
    1af4:	00b88514 	movui	r2,57876
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
    1af8:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor2SwitchEnable);
    1afc:	00c01004 	movi	r3,64
    1b00:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor3SwitchEnable);
    1b04:	00c02004 	movi	r3,128
    1b08:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor4SwitchEnable);
    1b0c:	00c04004 	movi	r3,256
    1b10:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor5SwitchEnable);
    1b14:	00c08004 	movi	r3,512
    1b18:	10c00035 	stwio	r3,0(r2)
        printf("Switch<=%d\n", enabled);
    1b1c:	01000034 	movhi	r4,0
    1b20:	2117a004 	addi	r4,r4,24192
    1b24:	00047fc0 	call	47fc <printf>
}
    1b28:	0005883a 	mov	r2,zero
    1b2c:	dfc00a17 	ldw	ra,40(sp)
    1b30:	dc000917 	ldw	r16,36(sp)
    1b34:	dec00b04 	addi	sp,sp,44
    1b38:	f800283a 	ret
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
    1b3c:	00b88414 	movui	r2,57872
    1b40:	003fed06 	br	1af8 <_ZL14command_switchP5MSOPTPv+0x4c>

00001b44 <main>:
int main(void) {
    1b44:	00800034 	movhi	r2,0
    1b48:	deffd604 	addi	sp,sp,-168
    1b4c:	108a2404 	addi	r2,r2,10384
    1b50:	d8800715 	stw	r2,28(sp)
    1b54:	00800034 	movhi	r2,0
    1b58:	10973704 	addi	r2,r2,23772
    1b5c:	d8800815 	stw	r2,32(sp)
    1b60:	00800034 	movhi	r2,0
    1b64:	10871404 	addi	r2,r2,7248
    1b68:	d9000104 	addi	r4,sp,4
    1b6c:	dfc02915 	stw	ra,164(sp)
    1b70:	df002815 	stw	fp,160(sp)
    1b74:	df000915 	stw	fp,36(sp)
    1b78:	d8800a15 	stw	r2,40(sp)
    1b7c:	dec00b15 	stw	sp,44(sp)
    1b80:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
  NIOS2_READ_STATUS (context);
    1b84:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1b88:	00bfff84 	movi	r2,-2
    1b8c:	1884703a 	and	r2,r3,r2
    1b90:	1001703a 	wrctl	status,r2
        _Context = alt_irq_disable_all();
    1b94:	d8c01815 	stw	r3,96(sp)
        __builtin_sync();
    1b98:	0001b03a 	sync
    Imu::Initialize();
    1b9c:	00800044 	movi	r2,1
    1ba0:	d8800215 	stw	r2,8(sp)
    1ba4:	00017780 	call	1778 <_ZN3Imu10InitializeEv>
    Adc2::Initialize();
    1ba8:	00015d00 	call	15d0 <_ZN4Adc210InitializeEv>
        ClearParameters();
    1bac:	0001e6c0 	call	1e6c <_ZN12SharedMemory15ClearParametersEv>
public:
    /**
     * 初期化する
     */
    static void Initialize(void) {
        alt_msgdma_dev *dev = alt_msgdma_open(MSGDMA_0_CSR_NAME);
    1bb0:	01000034 	movhi	r4,0
    1bb4:	2117a304 	addi	r4,r4,24204
    1bb8:	00058080 	call	5808 <alt_msgdma_open>
        _Device = dev;
    1bbc:	d0a01c15 	stw	r2,-32656(gp)
    CentralizedMonitor::Initialize();
    1bc0:	0000ef40 	call	ef4 <_ZN18CentralizedMonitor10InitializeEv>
public:
    /**
     * 初期化を行う
     */
    static void Initialize(void){
        StopControl();
    1bc4:	00020f00 	call	20f0 <_ZN15WheelController11StopControlEv>
public:
    /**
     * 初期化を行う
     */
    static void Initialize(void){
        StopControl();
    1bc8:	00012400 	call	1240 <_ZN17DribbleController11StopControlEv>
    Adc2::Start();
    1bcc:	00013ac0 	call	13ac <_ZN4Adc25StartEv>
    CentralizedMonitor::Start();
    1bd0:	0000b100 	call	b10 <_ZN18CentralizedMonitor5StartEv>
        CriticalSection cs;
    1bd4:	d9001804 	addi	r4,sp,96
    1bd8:	0000ab40 	call	ab4 <_ZN15CriticalSectionD1Ev>
    microshell_init(
    1bdc:	01800034 	movhi	r6,0
    1be0:	01400034 	movhi	r5,0
    1be4:	00bfffc4 	movi	r2,-1
    1be8:	000f883a 	mov	r7,zero
    1bec:	31861804 	addi	r6,r6,6240
    1bf0:	29461404 	addi	r5,r5,6224
    1bf4:	d9001204 	addi	r4,sp,72
    1bf8:	d8800215 	stw	r2,8(sp)
    1bfc:	00002040 	call	204 <microshell_init>
        {"switch", command_switch},
        {"status", command_status},
        {"clear", command_clear},
        {"f", command_fault}
    };
    mscmd_init(&mscmd, const_cast<MSCMD_COMMAND_TABLE*>(command_table), sizeof(command_table) / sizeof(command_table[0]), nullptr);
    1c00:	01400034 	movhi	r5,0
    1c04:	d9000f04 	addi	r4,sp,60
    1c08:	000f883a 	mov	r7,zero
    1c0c:	01800204 	movi	r6,8
    1c10:	2957b904 	addi	r5,r5,24292
    1c14:	00006f00 	call	6f0 <mscmd_init>

    // 起動メッセージを表示する
    alt_putstr("Hello from Nios II!\n");
    1c18:	01000034 	movhi	r4,0
    1c1c:	2117a804 	addi	r4,r4,24224
    1c20:	00054600 	call	5460 <alt_putstr>

    // コマンド入力を受け付ける
    while (true) {
        microshell_getline(&ms, buf, sizeof(buf));
    1c24:	d9401804 	addi	r5,sp,96
    1c28:	d9001204 	addi	r4,sp,72
    1c2c:	00bfffc4 	movi	r2,-1
    1c30:	01801004 	movi	r6,64
    1c34:	d8800215 	stw	r2,8(sp)
    1c38:	00002580 	call	258 <microshell_getline>
        MSCMD_USER_RESULT result;
        mscmd_execute(&mscmd, buf, &result);
    1c3c:	d9800e04 	addi	r6,sp,56
    1c40:	d9401804 	addi	r5,sp,96
    1c44:	d9000f04 	addi	r4,sp,60
    1c48:	00007040 	call	704 <mscmd_execute>
    while (true) {
    1c4c:	003ff506 	br	1c24 <main+0xe0>
        CriticalSection cs;
    1c50:	d8800317 	ldw	r2,12(sp)
    1c54:	d9001804 	addi	r4,sp,96
    1c58:	d8800015 	stw	r2,0(sp)
    1c5c:	0000ab40 	call	ab4 <_ZN15CriticalSectionD1Ev>
    1c60:	d9000017 	ldw	r4,0(sp)
    1c64:	00bfffc4 	movi	r2,-1
    1c68:	d8800215 	stw	r2,8(sp)
    1c6c:	00043980 	call	4398 <_Unwind_SjLj_Resume>

00001c70 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev>:
#include <altera_msgdma_descriptor_regs.h>
#include <altera_msgdma_csr_regs.h>
#include <altera_msgdma_response_regs.h>
#include <driver/critical_section.hpp>

bool MsgdmaTransmitDescriptor::TransmitAsync(alt_msgdma_dev *dev) const {
    1c70:	00800034 	movhi	r2,0
    1c74:	deffee04 	addi	sp,sp,-72
    1c78:	108a2404 	addi	r2,r2,10384
    1c7c:	d8800815 	stw	r2,32(sp)
    1c80:	00800034 	movhi	r2,0
    1c84:	d9000115 	stw	r4,4(sp)
    1c88:	10876904 	addi	r2,r2,7588
    1c8c:	d9000204 	addi	r4,sp,8
    1c90:	d8800b15 	stw	r2,44(sp)
    1c94:	dfc01115 	stw	ra,68(sp)
    1c98:	df001015 	stw	fp,64(sp)
    1c9c:	d9400015 	stw	r5,0(sp)
    1ca0:	d8000915 	stw	zero,36(sp)
    1ca4:	df000a15 	stw	fp,40(sp)
    1ca8:	dec00c15 	stw	sp,48(sp)
    1cac:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
    // ディスクリプタFIFOに空きが無いがあることを確認する
    if (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK) {
    1cb0:	d8800017 	ldw	r2,0(sp)
    1cb4:	10800317 	ldw	r2,12(r2)
    1cb8:	10800037 	ldwio	r2,0(r2)
    1cbc:	1080010c 	andi	r2,r2,4
    1cc0:	10000d1e 	bne	r2,zero,1cf8 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x88>
  NIOS2_READ_STATUS (context);
    1cc4:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1cc8:	00bfff84 	movi	r2,-2
    1ccc:	1884703a 	and	r2,r3,r2
    1cd0:	1001703a 	wrctl	status,r2
        _Context = alt_irq_disable_all();
    1cd4:	d8c00f15 	stw	r3,60(sp)
        __builtin_sync();
    1cd8:	0001b03a 	sync

    {
        CriticalSection cs;

        // ディスクリプタFIFOに空きが無いがあることを再び確認する
        if (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK) {
    1cdc:	d8800017 	ldw	r2,0(sp)
    1ce0:	10c00317 	ldw	r3,12(r2)
    1ce4:	18800037 	ldwio	r2,0(r3)
    1ce8:	1080010c 	andi	r2,r2,4
    1cec:	10000426 	beq	r2,zero,1d00 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x90>
            return false;
    1cf0:	d9000f04 	addi	r4,sp,60
    1cf4:	0000ab40 	call	ab4 <_ZN15CriticalSectionD1Ev>
        return false;
    1cf8:	d8000005 	stb	zero,0(sp)
    1cfc:	00002906 	br	1da4 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x134>
        }

        // ディスパッチャが次のディスクリプタを読み込むのを停止する
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    1d00:	00800804 	movi	r2,32
    1d04:	18800135 	stwio	r2,4(r3)

        // IRQフラグをクリアする
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, ALTERA_MSGDMA_CSR_IRQ_SET_MASK);
    1d08:	d8800017 	ldw	r2,0(sp)
    1d0c:	00c08004 	movi	r3,512
    1d10:	10800317 	ldw	r2,12(r2)
    1d14:	10c00035 	stwio	r3,0(r2)

        // ディスクリプタFIFOに書き込む
        IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(dev->descriptor_base, reinterpret_cast<alt_u32>(_ReadAddress));
    1d18:	d8800017 	ldw	r2,0(sp)
    1d1c:	d8c00117 	ldw	r3,4(sp)
    1d20:	10800417 	ldw	r2,16(r2)
    1d24:	18c00017 	ldw	r3,0(r3)
    1d28:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(dev->descriptor_base, reinterpret_cast<alt_u32>(_WriteAddress));
    1d2c:	d8800017 	ldw	r2,0(sp)
    1d30:	d8c00117 	ldw	r3,4(sp)
    1d34:	10800417 	ldw	r2,16(r2)
    1d38:	18c00117 	ldw	r3,4(r3)
    1d3c:	10c00135 	stwio	r3,4(r2)
        IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(dev->descriptor_base, _TransferLength);
    1d40:	d8800017 	ldw	r2,0(sp)
    1d44:	d8c00117 	ldw	r3,4(sp)
    1d48:	10800417 	ldw	r2,16(r2)
    1d4c:	18c00217 	ldw	r3,8(r3)
    1d50:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(dev->descriptor_base, _Control);
    1d54:	d8800017 	ldw	r2,0(sp)
    1d58:	d8c00117 	ldw	r3,4(sp)
    1d5c:	10800417 	ldw	r2,16(r2)
    1d60:	18c00317 	ldw	r3,12(r3)
    1d64:	10c00335 	stwio	r3,12(r2)

        // CONTROLレジスタを再設定する
        alt_u32 control = dev->control;
        if (dev->callback == nullptr) {
    1d68:	d8800017 	ldw	r2,0(sp)
    1d6c:	00fff7c4 	movi	r3,-33
    1d70:	10800d17 	ldw	r2,52(r2)
    1d74:	10c4703a 	and	r2,r2,r3
    1d78:	d8c00017 	ldw	r3,0(sp)
    1d7c:	18c00b17 	ldw	r3,44(r3)
    1d80:	18000f1e 	bne	r3,zero,1dc0 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x150>
            control |= ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK;
            control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    1d84:	10800114 	ori	r2,r2,4
        }
        else{
            control |= ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK;
            control &= ~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
        }
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
    1d88:	d8c00017 	ldw	r3,0(sp)
    1d8c:	18c00317 	ldw	r3,12(r3)
    1d90:	18800135 	stwio	r2,4(r3)
        CriticalSection cs;
    1d94:	d9000f04 	addi	r4,sp,60
    1d98:	0000ab40 	call	ab4 <_ZN15CriticalSectionD1Ev>
    }

    return true;
    1d9c:	00800044 	movi	r2,1
    1da0:	d8800005 	stb	r2,0(sp)
    1da4:	d9000204 	addi	r4,sp,8
    1da8:	00041c80 	call	41c8 <_Unwind_SjLj_Unregister>
}
    1dac:	d8800003 	ldbu	r2,0(sp)
    1db0:	dfc01117 	ldw	ra,68(sp)
    1db4:	df001017 	ldw	fp,64(sp)
    1db8:	dec01204 	addi	sp,sp,72
    1dbc:	f800283a 	ret
            control &= ~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    1dc0:	10800514 	ori	r2,r2,20
    1dc4:	003ff006 	br	1d88 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x118>

00001dc8 <_ZN12SharedMemory16UpdateParametersEv>:
#include "shared_memory.hpp"

bool SharedMemory::UpdateParameters(void){
    1dc8:	defff704 	addi	sp,sp,-36
    1dcc:	dc000615 	stw	r16,24(sp)
     * 共有メモリーへのポインタを取得する
     * データキャッシュが存在する場合に備えて非キャッシュ領域のアドレスを使用する
     * @return 共有メモリーへのポインタ
     */
    static SharedMemory_t* GetNonCachedSharedMemory(void){
        return reinterpret_cast<SharedMemory_t*>(reinterpret_cast<uint32_t>(&_SharedMemory) | 0x80000000UL);
    1dd0:	04000074 	movhi	r16,1
    1dd4:	842c0004 	addi	r16,r16,-20480
    1dd8:	84200034 	orhi	r16,r16,32768
    // 共有メモリーからパラメータを一時的にコピーする
    SharedMemory_t *shared_memory = GetNonCachedSharedMemory();
    uint32_t tail_checksum = shared_memory->TailChecksum;
    SharedMemory_t::Parameters_t parameters;
    memcpy(&parameters, &shared_memory->Parameters, sizeof(parameters));
    1ddc:	01800604 	movi	r6,24
    1de0:	81400304 	addi	r5,r16,12
    1de4:	d809883a 	mov	r4,sp
bool SharedMemory::UpdateParameters(void){
    1de8:	dc400715 	stw	r17,28(sp)
    1dec:	dfc00815 	stw	ra,32(sp)
    uint32_t tail_checksum = shared_memory->TailChecksum;
    1df0:	84400917 	ldw	r17,36(r16)
    memcpy(&parameters, &shared_memory->Parameters, sizeof(parameters));
    1df4:	00044f40 	call	44f4 <memcpy>
    uint32_t head_checksum = shared_memory->HeadChecksum;

    //　パラメータのフレーム番号が変わっていなければ変更なしと判断する
    if (parameters.FrameNumber == _Parameters.FrameNumber){
    1df8:	00800074 	movhi	r2,1
    1dfc:	d8c00017 	ldw	r3,0(sp)
    1e00:	10a0bd17 	ldw	r2,-32012(r2)
    1e04:	18801726 	beq	r3,r2,1e64 <_ZN12SharedMemory16UpdateParametersEv+0x9c>
    uint32_t head_checksum = shared_memory->HeadChecksum;
    1e08:	81000217 	ldw	r4,8(r16)
        return false;
    }

    // パラメータの先頭と末尾のチェックサム、パラメータ自体から計算したチェックサムを比較し、すべてが等しくなければエラーと判断する
    if ((head_checksum != tail_checksum) || (head_checksum != parameters.CalculateChecksum())){
    1e0c:	8900151e 	bne	r17,r4,1e64 <_ZN12SharedMemory16UpdateParametersEv+0x9c>
         * @return チェックサム
         */
        uint32_t CalculateChecksum(void) const {
            auto p = reinterpret_cast<const uint32_t*>(this);
            int count = sizeof(Parameters_t) / sizeof(uint32_t);
            uint32_t result = 0xA5A5A5A5;
    1e10:	00a969b4 	movhi	r2,42406
    1e14:	0007883a 	mov	r3,zero
    1e18:	10a96944 	addi	r2,r2,-23131
            while (0 <= --count) {
                result += *p++;
    1e1c:	d8cb883a 	add	r5,sp,r3
    1e20:	29400017 	ldw	r5,0(r5)
    1e24:	18c00104 	addi	r3,r3,4
    1e28:	1145883a 	add	r2,r2,r5
            while (0 <= --count) {
    1e2c:	19400618 	cmpnei	r5,r3,24
    1e30:	283ffa1e 	bne	r5,zero,1e1c <_ZN12SharedMemory16UpdateParametersEv+0x54>
    1e34:	20800b1e 	bne	r4,r2,1e64 <_ZN12SharedMemory16UpdateParametersEv+0x9c>
        return false;
    }

    // パラメータをローカルメモリーにコピーする
    memcpy(&_Parameters, &parameters, sizeof(_Parameters));
    1e38:	01000074 	movhi	r4,1
    1e3c:	01800604 	movi	r6,24
    1e40:	d80b883a 	mov	r5,sp
    1e44:	2120bd04 	addi	r4,r4,-32012
    1e48:	00044f40 	call	44f4 <memcpy>
    return true;
    1e4c:	00800044 	movi	r2,1
}
    1e50:	dfc00817 	ldw	ra,32(sp)
    1e54:	dc400717 	ldw	r17,28(sp)
    1e58:	dc000617 	ldw	r16,24(sp)
    1e5c:	dec00904 	addi	sp,sp,36
    1e60:	f800283a 	ret
        return false;
    1e64:	0005883a 	mov	r2,zero
    1e68:	003ff906 	br	1e50 <_ZN12SharedMemory16UpdateParametersEv+0x88>

00001e6c <_ZN12SharedMemory15ClearParametersEv>:

void SharedMemory::ClearParameters(void){
    // ローカルメモリーのパラメータをクリアする
    memset(&_Parameters, 0, sizeof(_Parameters));
    1e6c:	01000074 	movhi	r4,1
void SharedMemory::ClearParameters(void){
    1e70:	deffff04 	addi	sp,sp,-4
    memset(&_Parameters, 0, sizeof(_Parameters));
    1e74:	01800604 	movi	r6,24
    1e78:	000b883a 	mov	r5,zero
    1e7c:	2120bd04 	addi	r4,r4,-32012
void SharedMemory::ClearParameters(void){
    1e80:	dfc00015 	stw	ra,0(sp)
    memset(&_Parameters, 0, sizeof(_Parameters));
    1e84:	000457c0 	call	457c <memset>
    1e88:	00800074 	movhi	r2,1
    1e8c:	10ac0004 	addi	r2,r2,-20480
    1e90:	10a00034 	orhi	r2,r2,32768

    // 共有メモリーをクリアする
    SharedMemory_t *shared_memory = GetNonCachedSharedMemory();
    shared_memory->HeadChecksum = 0;
    1e94:	10000215 	stw	zero,8(r2)
    shared_memory->Parameters.FrameNumber = 0;
    1e98:	10000315 	stw	zero,12(r2)
    shared_memory->TailChecksum = 0;
    1e9c:	10000915 	stw	zero,36(r2)
}
    1ea0:	dfc00017 	ldw	ra,0(sp)
    1ea4:	dec00104 	addi	sp,sp,4
    1ea8:	f800283a 	ret

00001eac <_ZN17StreamTransmitter14TransmitStatusEv>:
        return _ErrorFlags;
    1eac:	d0a01417 	ldw	r2,-32688(gp)

static StreamDataMotion_t StreamDataMotion;
static constexpr MsgdmaTransmitDescriptor StreamDataDesciptorMotion(StreamDataMotion, StreamIdMotion);

void StreamTransmitter::TransmitStatus(void) {
    __builtin_stwio(&StreamDataStatus.error_flags, CentralizedMonitor::GetErrorFlags());
    1eb0:	d0a01e35 	stwio	r2,-32648(gp)
        return _FaultFlags;
    1eb4:	d0a01317 	ldw	r2,-32692(gp)
    __builtin_stwio(&StreamDataStatus.fault_flags, CentralizedMonitor::GetFaultFlags());
    1eb8:	d0a01f35 	stwio	r2,-32644(gp)
    StreamDataDesciptorStatus.TransmitAsync(_Device);
    1ebc:	d1601c17 	ldw	r5,-32656(gp)
    1ec0:	01000034 	movhi	r4,0
    1ec4:	2117d104 	addi	r4,r4,24388
    1ec8:	0001c701 	jmpi	1c70 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev>

00001ecc <_ZN17StreamTransmitter12TransmitAdc2Ev>:
}

void StreamTransmitter::TransmitAdc2(void) {
    __builtin_sthio(&StreamDataAdc2.dc48v_voltage, Adc2::GetDc48v());
    1ecc:	d0a0178b 	ldhu	r2,-32674(gp)
    1ed0:	d0a01d2d 	sthio	r2,-32652(gp)
    __builtin_sthio(&StreamDataAdc2.dribble_current, Adc2::GetDribbleCurrent());
    1ed4:	d0a0180b 	ldhu	r2,-32672(gp)
    1ed8:	d0a01dad 	sthio	r2,-32650(gp)
    StreamDataDesciptorAdc2.TransmitAsync(_Device);
    1edc:	d1601c17 	ldw	r5,-32656(gp)
    1ee0:	01000034 	movhi	r4,0
    1ee4:	2117cd04 	addi	r4,r4,24372
    1ee8:	0001c701 	jmpi	1c70 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev>

00001eec <_ZN17StreamTransmitter14TransmitMotionEi>:
}

void StreamTransmitter::TransmitMotion(int performance_counter) {
    __builtin_sthio(&StreamDataMotion.performance_counter, static_cast<uint16_t>(performance_counter));
    1eec:	00800074 	movhi	r2,1
    1ef0:	1120c32d 	sthio	r4,-31988(r2)
static inline int IMU_SPIM_GetTempData(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->TEMP_DATA);
}

static inline int IMU_SPIM_GetAccelDataX(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_X);
    1ef4:	00b98114 	movui	r2,58884
    1ef8:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.accelerometer[0], IMU_SPIM_GetAccelDataX(IMU_SPIM_BASE));
    1efc:	00800074 	movhi	r2,1
    1f00:	10e0c3ad 	sthio	r3,-31986(r2)
}

static inline int IMU_SPIM_GetAccelDataY(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_Y);
    1f04:	00b98194 	movui	r2,58886
    1f08:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.accelerometer[1], IMU_SPIM_GetAccelDataY(IMU_SPIM_BASE));
    1f0c:	00800074 	movhi	r2,1
    1f10:	10e0c42d 	sthio	r3,-31984(r2)
}

static inline int IMU_SPIM_GetAccelDataZ(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_Z);
    1f14:	00b98214 	movui	r2,58888
    1f18:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.accelerometer[2], IMU_SPIM_GetAccelDataZ(IMU_SPIM_BASE));
    1f1c:	00800074 	movhi	r2,1
    1f20:	10e0c4ad 	sthio	r3,-31982(r2)
}

static inline int IMU_SPIM_GetGyroDataX(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_X);
    1f24:	00b98294 	movui	r2,58890
    1f28:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.gyroscope[0], IMU_SPIM_GetGyroDataX(IMU_SPIM_BASE));
    1f2c:	00800074 	movhi	r2,1
    1f30:	10e0c52d 	sthio	r3,-31980(r2)
}

static inline int IMU_SPIM_GetGyroDataY(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_Y);
    1f34:	00b98314 	movui	r2,58892
    1f38:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.gyroscope[1], IMU_SPIM_GetGyroDataY(IMU_SPIM_BASE));
    1f3c:	00800074 	movhi	r2,1
    1f40:	10e0c5ad 	sthio	r3,-31978(r2)
}

static inline int IMU_SPIM_GetGyroDataZ(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_Z);
    1f44:	00b98394 	movui	r2,58894
    1f48:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.gyroscope[2], IMU_SPIM_GetGyroDataZ(IMU_SPIM_BASE));
    1f4c:	00800074 	movhi	r2,1
    1f50:	10e0c62d 	sthio	r3,-31976(r2)
	}

	static int GetEncoderValue(int number) {
		switch(number){
		case 1:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER1);
    1f54:	00bc0214 	movui	r2,61448
    1f58:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.encoder_pulse_count[0], VectorController::GetEncoderValue(1));
    1f5c:	00800074 	movhi	r2,1
    1f60:	10e0c6ad 	sthio	r3,-31974(r2)
		case 2:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER2);
    1f64:	00bc0294 	movui	r2,61450
    1f68:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.encoder_pulse_count[1], VectorController::GetEncoderValue(2));
    1f6c:	00800074 	movhi	r2,1
    1f70:	10e0c72d 	sthio	r3,-31972(r2)
		case 3:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER3);
    1f74:	00bc0314 	movui	r2,61452
    1f78:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.encoder_pulse_count[2], VectorController::GetEncoderValue(3));
    1f7c:	00800074 	movhi	r2,1
    1f80:	10e0c7ad 	sthio	r3,-31970(r2)
		case 4:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER4);
    1f84:	00bc0394 	movui	r2,61454
    1f88:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.encoder_pulse_count[3], VectorController::GetEncoderValue(4));
    1f8c:	00800074 	movhi	r2,1
    1f90:	10e0c82d 	sthio	r3,-31968(r2)
	}

	static int GetCurrentMeasurementD(int number) {
		switch(number){
		case 1:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASD1);
    1f94:	00bc0414 	movui	r2,61456
    1f98:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_d[0], VectorController::GetCurrentMeasurementD(1));
    1f9c:	00800074 	movhi	r2,1
    1fa0:	10e0c8ad 	sthio	r3,-31966(r2)
		case 2:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASD2);
    1fa4:	00bc0514 	movui	r2,61460
    1fa8:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_d[1], VectorController::GetCurrentMeasurementD(2));
    1fac:	00800074 	movhi	r2,1
    1fb0:	10e0c92d 	sthio	r3,-31964(r2)
		case 3:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASD3);
    1fb4:	00bc0614 	movui	r2,61464
    1fb8:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_d[2], VectorController::GetCurrentMeasurementD(3));
    1fbc:	00800074 	movhi	r2,1
    1fc0:	10e0c9ad 	sthio	r3,-31962(r2)
		case 4:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASD4);
    1fc4:	00bc0714 	movui	r2,61468
    1fc8:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_d[3], VectorController::GetCurrentMeasurementD(4));
    1fcc:	00800074 	movhi	r2,1
    1fd0:	10e0ca2d 	sthio	r3,-31960(r2)
	}

	static int GetCurrentMeasurementQ(int number) {
		switch(number){
		case 1:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASQ1);
    1fd4:	00bc0494 	movui	r2,61458
    1fd8:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_q[0], VectorController::GetCurrentMeasurementQ(1));
    1fdc:	00800074 	movhi	r2,1
    1fe0:	10e0caad 	sthio	r3,-31958(r2)
		case 2:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASQ2);
    1fe4:	00bc0594 	movui	r2,61462
    1fe8:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_q[1], VectorController::GetCurrentMeasurementQ(2));
    1fec:	00800074 	movhi	r2,1
    1ff0:	10e0cb2d 	sthio	r3,-31956(r2)
		case 3:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASQ3);
    1ff4:	00bc0694 	movui	r2,61466
    1ff8:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_q[2], VectorController::GetCurrentMeasurementQ(3));
    1ffc:	00800074 	movhi	r2,1
    2000:	10e0cbad 	sthio	r3,-31954(r2)
		case 4:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASQ4);
    2004:	00bc0794 	movui	r2,61470
    2008:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_q[3], VectorController::GetCurrentMeasurementQ(4));
    200c:	00800074 	movhi	r2,1
    2010:	10e0cc2d 	sthio	r3,-31952(r2)
	}

	static int GetCurrentReferenceQ(int number) {
		switch(number){
		case 1:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IREFQ1);
    2014:	00bc0894 	movui	r2,61474
    2018:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_ref_q[0], VectorController::GetCurrentReferenceQ(1));
    201c:	00800074 	movhi	r2,1
    2020:	10e0ccad 	sthio	r3,-31950(r2)
		case 2:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IREFQ2);
    2024:	00bc0994 	movui	r2,61478
    2028:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_ref_q[1], VectorController::GetCurrentReferenceQ(2));
    202c:	00800074 	movhi	r2,1
    2030:	10e0cd2d 	sthio	r3,-31948(r2)
		case 3:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IREFQ3);
    2034:	00bc0a94 	movui	r2,61482
    2038:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_ref_q[2], VectorController::GetCurrentReferenceQ(3));
    203c:	00800074 	movhi	r2,1
    2040:	10e0cdad 	sthio	r3,-31946(r2)
		case 4:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IREFQ4);
    2044:	00bc0b94 	movui	r2,61486
    2048:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_current_ref_q[3], VectorController::GetCurrentReferenceQ(4));
    204c:	00800074 	movhi	r2,1
    2050:	10e0ce2d 	sthio	r3,-31944(r2)
        return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->POWER);
    2054:	00bc4194 	movui	r2,61702
    2058:	10c0002f 	ldhio	r3,0(r2)
    __builtin_sthio(&StreamDataMotion.motor_power_5, MotorController::GetPower());
    205c:	00800074 	movhi	r2,1
    2060:	10e0cead 	sthio	r3,-31942(r2)
    StreamDataDesciptorMotion.TransmitAsync(_Device);
    2064:	d1601c17 	ldw	r5,-32656(gp)
    2068:	01000034 	movhi	r4,0
    206c:	2117c904 	addi	r4,r4,24356
    2070:	0001c701 	jmpi	1c70 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev>

00002074 <_ZN15WheelController12StartControlEv>:
#include <peripheral/vector_controller.hpp>
#include "centralized_monitor.hpp"
#include "shared_memory.hpp"
#include <math.h>

void WheelController::StartControl(void) {
    2074:	deffff04 	addi	sp,sp,-4
    2078:	dfc00015 	stw	ra,0(sp)
	static int GetGainP(void) {
		return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->KP);
	}

	static void SetGainP(int value) {
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->KP, value);
    207c:	00c36b04 	movi	r3,3500
    2080:	00bc0c14 	movui	r2,61488
    2084:	10c0002d 	sthio	r3,0(r2)
	static int GetGainI(void) {
		return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->KI);
	}

	static void SetGainI(int value) {
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->KI, value);
    2088:	00c07d04 	movi	r3,500
    208c:	00bc0c94 	movui	r2,61490
    2090:	10c0002d 	sthio	r3,0(r2)
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x2);
    2094:	00c00084 	movi	r3,2
    2098:	00bc0114 	movui	r2,61444
    209c:	10c0002d 	sthio	r3,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ1, value);
    20a0:	00bc0894 	movui	r2,61474
    20a4:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ2, value);
    20a8:	00bc0994 	movui	r2,61478
    20ac:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ3, value);
    20b0:	00bc0a94 	movui	r2,61482
    20b4:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ4, value);
    20b8:	00bc0b94 	movui	r2,61486
    20bc:	1000002d 	sthio	zero,0(r2)
    VectorController::ClearFault();
    VectorController::SetCurrentReferenceQ(1, 0);
    VectorController::SetCurrentReferenceQ(2, 0);
    VectorController::SetCurrentReferenceQ(3, 0);
    VectorController::SetCurrentReferenceQ(4, 0);
    memset(_LastSpeedError, 0, sizeof(_LastSpeedError));
    20c0:	01000074 	movhi	r4,1
    20c4:	01800404 	movi	r6,16
    20c8:	000b883a 	mov	r5,zero
    20cc:	2120d304 	addi	r4,r4,-31924
    20d0:	000457c0 	call	457c <memset>
    memset(_LastCurrentReference, 0, sizeof(_LastCurrentReference));
    20d4:	01000074 	movhi	r4,1
    20d8:	01800404 	movi	r6,16
    20dc:	000b883a 	mov	r5,zero
    20e0:	2120cf04 	addi	r4,r4,-31940
}
    20e4:	dfc00017 	ldw	ra,0(sp)
    20e8:	dec00104 	addi	sp,sp,4
    memset(_LastCurrentReference, 0, sizeof(_LastCurrentReference));
    20ec:	000457c1 	jmpi	457c <memset>

000020f0 <_ZN15WheelController11StopControlEv>:
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x1);
    20f0:	00c00044 	movi	r3,1
    20f4:	00bc0114 	movui	r2,61444
    20f8:	10c0002d 	sthio	r3,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ1, value);
    20fc:	00bc0894 	movui	r2,61474
    2100:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ2, value);
    2104:	00bc0994 	movui	r2,61478
    2108:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ3, value);
    210c:	00bc0a94 	movui	r2,61482
    2110:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ4, value);
    2114:	00bc0b94 	movui	r2,61486
    2118:	1000002d 	sthio	zero,0(r2)
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->KP, value);
    211c:	00bc0c14 	movui	r2,61488
    2120:	1000002d 	sthio	zero,0(r2)
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->KI, value);
    2124:	00bc0c94 	movui	r2,61490
    2128:	1000002d 	sthio	zero,0(r2)
    VectorController::SetCurrentReferenceQ(2, 0);
    VectorController::SetCurrentReferenceQ(3, 0);
    VectorController::SetCurrentReferenceQ(4, 0);
    VectorController::SetGainP(0);
    VectorController::SetGainI(0);
}
    212c:	f800283a 	ret

00002130 <_ZN15WheelController6UpdateEb>:

void WheelController::Update(bool new_parameters) {
    2130:	defff404 	addi	sp,sp,-48
	    return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->FAULT) != 0;
    2134:	00bc0114 	movui	r2,61444
    2138:	dfc00b15 	stw	ra,44(sp)
    213c:	dd800a15 	stw	r22,40(sp)
    2140:	dd400915 	stw	r21,36(sp)
    2144:	dd000815 	stw	r20,32(sp)
    2148:	dcc00715 	stw	r19,28(sp)
    214c:	dc800615 	stw	r18,24(sp)
    2150:	dc400515 	stw	r17,20(sp)
    2154:	dc000415 	stw	r16,16(sp)
    2158:	1440002b 	ldhuio	r17,0(r2)
    215c:	8c7fffcc 	andi	r17,r17,65535
    if (VectorController::IsFault() == false) {
    2160:	8800581e 	bne	r17,zero,22c4 <_ZN15WheelController6UpdateEb+0x194>
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER1);
    2164:	00bc0214 	movui	r2,61448
    2168:	1080002f 	ldhio	r2,0(r2)
        int speed_meas_i[4];
        speed_meas_i[0] = VectorController::GetEncoderValue(1);
    216c:	d8800015 	stw	r2,0(sp)
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER2);
    2170:	00bc0294 	movui	r2,61450
    2174:	1080002f 	ldhio	r2,0(r2)
        speed_meas_i[1] = VectorController::GetEncoderValue(2);
    2178:	d8800115 	stw	r2,4(sp)
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER3);
    217c:	00bc0314 	movui	r2,61452
    2180:	1080002f 	ldhio	r2,0(r2)
        speed_meas_i[2] = VectorController::GetEncoderValue(3);
    2184:	d8800215 	stw	r2,8(sp)
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER4);
    2188:	00bc0394 	movui	r2,61454
    218c:	1080002f 	ldhio	r2,0(r2)
        for (int index = 0; index < 4; index++) {
            float speed_ref = SharedMemory::GetParameters().wheel_speed[index];
            if (fabsf(speed_ref) <= MaxSpeedReference) {
                float speed_meas = speed_meas_i[index];
                float error = speed_ref - speed_meas;
                float value_i = _SpeedGainI * error;
    2190:	d5602017 	ldw	r21,-32640(gp)
    2194:	04000074 	movhi	r16,1
                float value_p = _SpeedGainP * (error - _LastSpeedError[index]);
    2198:	d5a02117 	ldw	r22,-32636(gp)
    219c:	04c00074 	movhi	r19,1
    21a0:	04800074 	movhi	r18,1
    21a4:	8420cf04 	addi	r16,r16,-31940
        speed_meas_i[3] = VectorController::GetEncoderValue(4);
    21a8:	d8800315 	stw	r2,12(sp)
        for (int index = 0; index < 4; index++) {
    21ac:	9ce0bd04 	addi	r19,r19,-32012
    21b0:	94a0d304 	addi	r18,r18,-31924
    21b4:	8029883a 	mov	r20,r16
            float speed_ref = SharedMemory::GetParameters().wheel_speed[index];
    21b8:	98800117 	ldw	r2,4(r19)
            if (fabsf(speed_ref) <= MaxSpeedReference) {
    21bc:	0110b234 	movhi	r4,17096
    21c0:	1007f832 	custom	224,r3,r2,zero
    21c4:	1907f9b2 	custom	230,r3,r3,r4
    21c8:	18003b26 	beq	r3,zero,22b8 <_ZN15WheelController6UpdateEb+0x188>
                float speed_meas = speed_meas_i[index];
    21cc:	dc47883a 	add	r3,sp,r17
    21d0:	19000017 	ldw	r4,0(r3)
                float value_p = _SpeedGainP * (error - _LastSpeedError[index]);
    21d4:	90c00017 	ldw	r3,0(r18)
                _LastSpeedError[index] = error;

                float current_ref = _LastCurrentReference[index];
                current_ref += (value_p + value_i) * 0.0000152587890625f;
                current_ref = fmaxf(-MaxCurrentReference, fminf(current_ref, MaxCurrentReference));
    21d8:	014fc034 	movhi	r5,16128
                float speed_meas = speed_meas_i[index];
    21dc:	2009feb2 	custom	250,r4,r4,zero
                float error = speed_ref - speed_meas;
    21e0:	1105ffb2 	custom	254,r2,r2,r4
                float value_p = _SpeedGainP * (error - _LastSpeedError[index]);
    21e4:	10c7ffb2 	custom	254,r3,r2,r3
                float current_ref = _LastCurrentReference[index];
    21e8:	81000017 	ldw	r4,0(r16)
                float value_p = _SpeedGainP * (error - _LastSpeedError[index]);
    21ec:	1d87ff32 	custom	252,r3,r3,r22
                _LastSpeedError[index] = error;
    21f0:	90800015 	stw	r2,0(r18)
                float value_i = _SpeedGainI * error;
    21f4:	a885ff32 	custom	252,r2,r21,r2
                current_ref += (value_p + value_i) * 0.0000152587890625f;
    21f8:	10c5ff72 	custom	253,r2,r2,r3
    21fc:	00cde034 	movhi	r3,14208
    2200:	10c5ff32 	custom	252,r2,r2,r3
                current_ref = fmaxf(-MaxCurrentReference, fminf(current_ref, MaxCurrentReference));
    2204:	1109ff72 	custom	253,r4,r2,r4
    2208:	0003d7c0 	call	3d7c <fminf>
    220c:	100b883a 	mov	r5,r2
    2210:	012fc034 	movhi	r4,48896
    2214:	0003d200 	call	3d20 <fmaxf>
                _LastCurrentReference[index] = current_ref;
    2218:	80800015 	stw	r2,0(r16)
        for (int index = 0; index < 4; index++) {
    221c:	8c400104 	addi	r17,r17,4
    2220:	88800418 	cmpnei	r2,r17,16
    2224:	9cc00104 	addi	r19,r19,4
    2228:	94800104 	addi	r18,r18,4
    222c:	84000104 	addi	r16,r16,4
    2230:	103fe11e 	bne	r2,zero,21b8 <_ZN15WheelController6UpdateEb+0x88>
            else {
                _LastCurrentReference[index] = 0.0f;
                _LastSpeedError[index] = 0.0f;
            }
        }
        VectorController::SetCurrentReferenceQ(1, static_cast<int>(_LastCurrentReference[0] * 1977.0f));
    2234:	00800074 	movhi	r2,1
    2238:	10e0cf17 	ldw	r3,-31940(r2)
    223c:	00913df4 	movhi	r2,17655
    2240:	10880004 	addi	r2,r2,8192
    2244:	1887ff32 	custom	252,r3,r3,r2
    2248:	1807fe72 	custom	249,r3,r3,zero
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ1, value);
    224c:	013c0894 	movui	r4,61474
    2250:	20c0002d 	sthio	r3,0(r4)
        VectorController::SetCurrentReferenceQ(2, static_cast<int>(_LastCurrentReference[1] * 1977.0f));
    2254:	a0c00117 	ldw	r3,4(r20)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ2, value);
    2258:	013c0994 	movui	r4,61478
    225c:	1887ff32 	custom	252,r3,r3,r2
    2260:	1807fe72 	custom	249,r3,r3,zero
    2264:	20c0002d 	sthio	r3,0(r4)
        VectorController::SetCurrentReferenceQ(3, static_cast<int>(_LastCurrentReference[2] * 1977.0f));
    2268:	a0c00217 	ldw	r3,8(r20)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ3, value);
    226c:	013c0a94 	movui	r4,61482
    2270:	1887ff32 	custom	252,r3,r3,r2
    2274:	1807fe72 	custom	249,r3,r3,zero
    2278:	20c0002d 	sthio	r3,0(r4)
        VectorController::SetCurrentReferenceQ(4, static_cast<int>(_LastCurrentReference[3] * 1977.0f));
    227c:	a0c00317 	ldw	r3,12(r20)
    2280:	1885ff32 	custom	252,r2,r3,r2
    2284:	1005fe72 	custom	249,r2,r2,zero
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ4, value);
    2288:	00fc0b94 	movui	r3,61486
    228c:	1880002d 	sthio	r2,0(r3)
    }
    else if (new_parameters == true) {
        StartControl();
    }
}
    2290:	dfc00b17 	ldw	ra,44(sp)
    2294:	dd800a17 	ldw	r22,40(sp)
    2298:	dd400917 	ldw	r21,36(sp)
    229c:	dd000817 	ldw	r20,32(sp)
    22a0:	dcc00717 	ldw	r19,28(sp)
    22a4:	dc800617 	ldw	r18,24(sp)
    22a8:	dc400517 	ldw	r17,20(sp)
    22ac:	dc000417 	ldw	r16,16(sp)
    22b0:	dec00c04 	addi	sp,sp,48
    22b4:	f800283a 	ret
                _LastCurrentReference[index] = 0.0f;
    22b8:	80000015 	stw	zero,0(r16)
                _LastSpeedError[index] = 0.0f;
    22bc:	90000015 	stw	zero,0(r18)
    22c0:	003fd606 	br	221c <_ZN15WheelController6UpdateEb+0xec>
    else if (new_parameters == true) {
    22c4:	21003fcc 	andi	r4,r4,255
    22c8:	203ff126 	beq	r4,zero,2290 <_ZN15WheelController6UpdateEb+0x160>
}
    22cc:	dfc00b17 	ldw	ra,44(sp)
    22d0:	dd800a17 	ldw	r22,40(sp)
    22d4:	dd400917 	ldw	r21,36(sp)
    22d8:	dd000817 	ldw	r20,32(sp)
    22dc:	dcc00717 	ldw	r19,28(sp)
    22e0:	dc800617 	ldw	r18,24(sp)
    22e4:	dc400517 	ldw	r17,20(sp)
    22e8:	dc000417 	ldw	r16,16(sp)
    22ec:	dec00c04 	addi	sp,sp,48
        StartControl();
    22f0:	00020741 	jmpi	2074 <_ZN15WheelController12StartControlEv>

000022f4 <_ZN15WheelController8SetGainsEff>:

void WheelController::SetGains(float kp, float ki) {
    22f4:	defffe04 	addi	sp,sp,-8
    22f8:	dc000015 	stw	r16,0(sp)
    22fc:	2821883a 	mov	r16,r5
     value = (value <= 65535.0f) ? value : 65535.0f;
     return static_cast<int>(value);
     };
     VectorController::SetGainP(clamp(kp));
     VectorController::SetGainI(clamp(ki));*/
    _SpeedGainP = fmaxf(0.0f, fminf(kp, 10000.0f));
    2300:	01518734 	movhi	r5,17948
    2304:	29500004 	addi	r5,r5,16384
void WheelController::SetGains(float kp, float ki) {
    2308:	dfc00115 	stw	ra,4(sp)
    _SpeedGainP = fmaxf(0.0f, fminf(kp, 10000.0f));
    230c:	0003d7c0 	call	3d7c <fminf>
    2310:	100b883a 	mov	r5,r2
    2314:	0009883a 	mov	r4,zero
    2318:	0003d200 	call	3d20 <fmaxf>
    _SpeedGainI = fmaxf(0.0f, fminf(ki, 10000.0f));
    231c:	01518734 	movhi	r5,17948
    2320:	8009883a 	mov	r4,r16
    2324:	29500004 	addi	r5,r5,16384
    _SpeedGainP = fmaxf(0.0f, fminf(kp, 10000.0f));
    2328:	d0a02115 	stw	r2,-32636(gp)
    _SpeedGainI = fmaxf(0.0f, fminf(ki, 10000.0f));
    232c:	0003d7c0 	call	3d7c <fminf>
    2330:	100b883a 	mov	r5,r2
    2334:	0009883a 	mov	r4,zero
    2338:	0003d200 	call	3d20 <fmaxf>
    233c:	d0a02015 	stw	r2,-32640(gp)
}
    2340:	dfc00117 	ldw	ra,4(sp)
    2344:	dc000017 	ldw	r16,0(sp)
    2348:	dec00204 	addi	sp,sp,8
    234c:	f800283a 	ret

00002350 <_ZN15WheelController8GetGainsEPfS0_>:

void WheelController::GetGains(float *kp, float *ki) {
    //*kp = static_cast<float>(VectorController::GetGainP()) * (1.0f / (1u << VectorController::GainScale));
    //*ki = static_cast<float>(VectorController::GetGainI()) * (1.0f / (1u << VectorController::GainScale));
    if (kp != nullptr) {
    2350:	20000226 	beq	r4,zero,235c <_ZN15WheelController8GetGainsEPfS0_+0xc>
        *kp = _SpeedGainP;
    2354:	d0a02117 	ldw	r2,-32636(gp)
    2358:	20800015 	stw	r2,0(r4)
    }
    if (ki != nullptr) {
    235c:	28000226 	beq	r5,zero,2368 <_ZN15WheelController8GetGainsEPfS0_+0x18>
        *ki = _SpeedGainI;
    2360:	d0a02017 	ldw	r2,-32640(gp)
    2364:	28800015 	stw	r2,0(r5)
    }
}
    2368:	f800283a 	ret

0000236c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
    236c:	28800017 	ldw	r2,0(r5)
    2370:	30c00017 	ldw	r3,0(r6)
    2374:	defffb04 	addi	sp,sp,-20
    2378:	10800217 	ldw	r2,8(r2)
    237c:	dc800315 	stw	r18,12(sp)
    2380:	dc400215 	stw	r17,8(sp)
    2384:	dc000115 	stw	r16,4(sp)
    2388:	dfc00415 	stw	ra,16(sp)
    238c:	2023883a 	mov	r17,r4
    2390:	d8c00015 	stw	r3,0(sp)
    2394:	2809883a 	mov	r4,r5
    2398:	2821883a 	mov	r16,r5
    239c:	3025883a 	mov	r18,r6
    23a0:	103ee83a 	callr	r2
    23a4:	10803fcc 	andi	r2,r2,255
    23a8:	10000326 	beq	r2,zero,23b8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
    23ac:	d8800017 	ldw	r2,0(sp)
    23b0:	10800017 	ldw	r2,0(r2)
    23b4:	d8800015 	stw	r2,0(sp)
    23b8:	88800017 	ldw	r2,0(r17)
    23bc:	01c00044 	movi	r7,1
    23c0:	d80d883a 	mov	r6,sp
    23c4:	10800417 	ldw	r2,16(r2)
    23c8:	800b883a 	mov	r5,r16
    23cc:	8809883a 	mov	r4,r17
    23d0:	103ee83a 	callr	r2
    23d4:	10c03fcc 	andi	r3,r2,255
    23d8:	18000226 	beq	r3,zero,23e4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x78>
    23dc:	d8c00017 	ldw	r3,0(sp)
    23e0:	90c00015 	stw	r3,0(r18)
    23e4:	dfc00417 	ldw	ra,16(sp)
    23e8:	dc800317 	ldw	r18,12(sp)
    23ec:	dc400217 	ldw	r17,8(sp)
    23f0:	dc000117 	ldw	r16,4(sp)
    23f4:	dec00504 	addi	sp,sp,20
    23f8:	f800283a 	ret

000023fc <_ZL28read_encoded_value_with_basehjPKhPj>:
    23fc:	20803fcc 	andi	r2,r4,255
    2400:	10801418 	cmpnei	r2,r2,80
    2404:	10002c26 	beq	r2,zero,24b8 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
    2408:	208003cc 	andi	r2,r4,15
    240c:	10c00368 	cmpgeui	r3,r2,13
    2410:	1800711e 	bne	r3,zero,25d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    2414:	100490ba 	slli	r2,r2,2
    2418:	00c00034 	movhi	r3,0
    241c:	10c7883a 	add	r3,r2,r3
    2420:	18890a17 	ldw	r2,9256(r3)
    2424:	1000683a 	jmp	r2
    2428:	0000245c 	xori	zero,zero,145
    242c:	0000254c 	andi	zero,zero,149
    2430:	00002510 	cmplti	zero,zero,148
    2434:	0000245c 	xori	zero,zero,145
    2438:	000024e0 	cmpeqi	zero,zero,147
    243c:	000025d8 	cmpnei	zero,zero,151
    2440:	000025d8 	cmpnei	zero,zero,151
    2444:	000025d8 	cmpnei	zero,zero,151
    2448:	000025d8 	cmpnei	zero,zero,151
    244c:	00002584 	movi	zero,150
    2450:	00002528 	cmpgeui	zero,zero,148
    2454:	0000245c 	xori	zero,zero,145
    2458:	000024e0 	cmpeqi	zero,zero,147
    245c:	32000043 	ldbu	r8,1(r6)
    2460:	30800083 	ldbu	r2,2(r6)
    2464:	30c000c3 	ldbu	r3,3(r6)
    2468:	32400003 	ldbu	r9,0(r6)
    246c:	4010923a 	slli	r8,r8,8
    2470:	1004943a 	slli	r2,r2,16
    2474:	1806963a 	slli	r3,r3,24
    2478:	4250b03a 	or	r8,r8,r9
    247c:	1204b03a 	or	r2,r2,r8
    2480:	1886b03a 	or	r3,r3,r2
    2484:	30800104 	addi	r2,r6,4
    2488:	18000926 	beq	r3,zero,24b0 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
    248c:	22001c0c 	andi	r8,r4,112
    2490:	42000418 	cmpnei	r8,r8,16
    2494:	4000011e 	bne	r8,zero,249c <_ZL28read_encoded_value_with_basehjPKhPj+0xa0>
    2498:	300b883a 	mov	r5,r6
    249c:	21003fcc 	andi	r4,r4,255
    24a0:	2100201c 	xori	r4,r4,128
    24a4:	213fe004 	addi	r4,r4,-128
    24a8:	1947883a 	add	r3,r3,r5
    24ac:	20000916 	blt	r4,zero,24d4 <_ZL28read_encoded_value_with_basehjPKhPj+0xd8>
    24b0:	38c00015 	stw	r3,0(r7)
    24b4:	f800283a 	ret
    24b8:	308000c4 	addi	r2,r6,3
    24bc:	01bfff04 	movi	r6,-4
    24c0:	1184703a 	and	r2,r2,r6
    24c4:	10c00017 	ldw	r3,0(r2)
    24c8:	10800104 	addi	r2,r2,4
    24cc:	38c00015 	stw	r3,0(r7)
    24d0:	f800283a 	ret
    24d4:	18c00017 	ldw	r3,0(r3)
    24d8:	38c00015 	stw	r3,0(r7)
    24dc:	f800283a 	ret
    24e0:	32000043 	ldbu	r8,1(r6)
    24e4:	30800083 	ldbu	r2,2(r6)
    24e8:	30c000c3 	ldbu	r3,3(r6)
    24ec:	32400003 	ldbu	r9,0(r6)
    24f0:	4010923a 	slli	r8,r8,8
    24f4:	1004943a 	slli	r2,r2,16
    24f8:	1806963a 	slli	r3,r3,24
    24fc:	4250b03a 	or	r8,r8,r9
    2500:	1204b03a 	or	r2,r2,r8
    2504:	1886b03a 	or	r3,r3,r2
    2508:	30800204 	addi	r2,r6,8
    250c:	003fde06 	br	2488 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    2510:	30c00043 	ldbu	r3,1(r6)
    2514:	32000003 	ldbu	r8,0(r6)
    2518:	30800084 	addi	r2,r6,2
    251c:	1806923a 	slli	r3,r3,8
    2520:	1a06b03a 	or	r3,r3,r8
    2524:	003fd806 	br	2488 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    2528:	30c00043 	ldbu	r3,1(r6)
    252c:	32000003 	ldbu	r8,0(r6)
    2530:	30800084 	addi	r2,r6,2
    2534:	1806923a 	slli	r3,r3,8
    2538:	1a06b03a 	or	r3,r3,r8
    253c:	18ffffcc 	andi	r3,r3,65535
    2540:	18e0001c 	xori	r3,r3,32768
    2544:	18e00004 	addi	r3,r3,-32768
    2548:	003fcf06 	br	2488 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    254c:	3005883a 	mov	r2,r6
    2550:	0007883a 	mov	r3,zero
    2554:	0015883a 	mov	r10,zero
    2558:	12000003 	ldbu	r8,0(r2)
    255c:	10800044 	addi	r2,r2,1
    2560:	42401fcc 	andi	r9,r8,127
    2564:	4a92983a 	sll	r9,r9,r10
    2568:	42003fcc 	andi	r8,r8,255
    256c:	4200201c 	xori	r8,r8,128
    2570:	423fe004 	addi	r8,r8,-128
    2574:	1a46b03a 	or	r3,r3,r9
    2578:	528001c4 	addi	r10,r10,7
    257c:	403ff616 	blt	r8,zero,2558 <_ZL28read_encoded_value_with_basehjPKhPj+0x15c>
    2580:	003fc106 	br	2488 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    2584:	3005883a 	mov	r2,r6
    2588:	0007883a 	mov	r3,zero
    258c:	0013883a 	mov	r9,zero
    2590:	12800003 	ldbu	r10,0(r2)
    2594:	10800044 	addi	r2,r2,1
    2598:	52001fcc 	andi	r8,r10,127
    259c:	4250983a 	sll	r8,r8,r9
    25a0:	52c03fcc 	andi	r11,r10,255
    25a4:	5ac0201c 	xori	r11,r11,128
    25a8:	5affe004 	addi	r11,r11,-128
    25ac:	1a06b03a 	or	r3,r3,r8
    25b0:	4a4001c4 	addi	r9,r9,7
    25b4:	583ff616 	blt	r11,zero,2590 <_ZL28read_encoded_value_with_basehjPKhPj+0x194>
    25b8:	4a000828 	cmpgeui	r8,r9,32
    25bc:	403fb21e 	bne	r8,zero,2488 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    25c0:	5280100c 	andi	r10,r10,64
    25c4:	503fb026 	beq	r10,zero,2488 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    25c8:	023fffc4 	movi	r8,-1
    25cc:	4252983a 	sll	r9,r8,r9
    25d0:	1a46b03a 	or	r3,r3,r9
    25d4:	003fad06 	br	248c <_ZL28read_encoded_value_with_basehjPKhPj+0x90>
    25d8:	deffff04 	addi	sp,sp,-4
    25dc:	dfc00015 	stw	ra,0(sp)
    25e0:	00044bc0 	call	44bc <abort>

000025e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    25e4:	20803fcc 	andi	r2,r4,255
    25e8:	10803fe0 	cmpeqi	r2,r2,255
    25ec:	1000161e 	bne	r2,zero,2648 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
    25f0:	2007883a 	mov	r3,r4
    25f4:	18801c0c 	andi	r2,r3,112
    25f8:	2809883a 	mov	r4,r5
    25fc:	11400c20 	cmpeqi	r5,r2,48
    2600:	2800131e 	bne	r5,zero,2650 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    2604:	11400c68 	cmpgeui	r5,r2,49
    2608:	2800031e 	bne	r5,zero,2618 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
    260c:	11400820 	cmpeqi	r5,r2,32
    2610:	28000426 	beq	r5,zero,2624 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
    2614:	00042841 	jmpi	4284 <_Unwind_GetTextRelBase>
    2618:	10c01020 	cmpeqi	r3,r2,64
    261c:	18000826 	beq	r3,zero,2640 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    2620:	000426c1 	jmpi	426c <_Unwind_GetRegionStart>
    2624:	10800868 	cmpgeui	r2,r2,33
    2628:	1000021e 	bne	r2,zero,2634 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
    262c:	18c0180c 	andi	r3,r3,96
    2630:	18000526 	beq	r3,zero,2648 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
    2634:	deffff04 	addi	sp,sp,-4
    2638:	dfc00015 	stw	ra,0(sp)
    263c:	00044bc0 	call	44bc <abort>
    2640:	10801420 	cmpeqi	r2,r2,80
    2644:	103ffb26 	beq	r2,zero,2634 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
    2648:	0005883a 	mov	r2,zero
    264c:	f800283a 	ret
    2650:	000427c1 	jmpi	427c <_Unwind_GetDataRelBase>

00002654 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    2654:	defffb04 	addi	sp,sp,-20
    2658:	dc800215 	stw	r18,8(sp)
    265c:	dc400115 	stw	r17,4(sp)
    2660:	dc000015 	stw	r16,0(sp)
    2664:	dfc00415 	stw	ra,16(sp)
    2668:	dcc00315 	stw	r19,12(sp)
    266c:	2025883a 	mov	r18,r4
    2670:	2821883a 	mov	r16,r5
    2674:	3023883a 	mov	r17,r6
    2678:	20003d26 	beq	r4,zero,2770 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    267c:	000426c0 	call	426c <_Unwind_GetRegionStart>
    2680:	88800015 	stw	r2,0(r17)
    2684:	84c00003 	ldbu	r19,0(r16)
    2688:	84000044 	addi	r16,r16,1
    268c:	98c03fe0 	cmpeqi	r3,r19,255
    2690:	18002d26 	beq	r3,zero,2748 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf4>
    2694:	88800115 	stw	r2,4(r17)
    2698:	81000003 	ldbu	r4,0(r16)
    269c:	80800044 	addi	r2,r16,1
    26a0:	20c03fcc 	andi	r3,r4,255
    26a4:	89000505 	stb	r4,20(r17)
    26a8:	18c03fe0 	cmpeqi	r3,r3,255
    26ac:	1800321e 	bne	r3,zero,2778 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    26b0:	000d883a 	mov	r6,zero
    26b4:	000b883a 	mov	r5,zero
    26b8:	10c00003 	ldbu	r3,0(r2)
    26bc:	10800044 	addi	r2,r2,1
    26c0:	19001fcc 	andi	r4,r3,127
    26c4:	2148983a 	sll	r4,r4,r5
    26c8:	18c03fcc 	andi	r3,r3,255
    26cc:	18c0201c 	xori	r3,r3,128
    26d0:	18ffe004 	addi	r3,r3,-128
    26d4:	310cb03a 	or	r6,r6,r4
    26d8:	294001c4 	addi	r5,r5,7
    26dc:	183ff616 	blt	r3,zero,26b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x64>
    26e0:	118d883a 	add	r6,r2,r6
    26e4:	89800315 	stw	r6,12(r17)
    26e8:	10c00003 	ldbu	r3,0(r2)
    26ec:	000f883a 	mov	r7,zero
    26f0:	10800044 	addi	r2,r2,1
    26f4:	88c00545 	stb	r3,21(r17)
    26f8:	000b883a 	mov	r5,zero
    26fc:	10c00003 	ldbu	r3,0(r2)
    2700:	10800044 	addi	r2,r2,1
    2704:	19001fcc 	andi	r4,r3,127
    2708:	2148983a 	sll	r4,r4,r5
    270c:	18c03fcc 	andi	r3,r3,255
    2710:	18c0201c 	xori	r3,r3,128
    2714:	18ffe004 	addi	r3,r3,-128
    2718:	390eb03a 	or	r7,r7,r4
    271c:	294001c4 	addi	r5,r5,7
    2720:	183ff616 	blt	r3,zero,26fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa8>
    2724:	11cf883a 	add	r7,r2,r7
    2728:	89c00415 	stw	r7,16(r17)
    272c:	dfc00417 	ldw	ra,16(sp)
    2730:	dcc00317 	ldw	r19,12(sp)
    2734:	dc800217 	ldw	r18,8(sp)
    2738:	dc400117 	ldw	r17,4(sp)
    273c:	dc000017 	ldw	r16,0(sp)
    2740:	dec00504 	addi	sp,sp,20
    2744:	f800283a 	ret
    2748:	900b883a 	mov	r5,r18
    274c:	9809883a 	mov	r4,r19
    2750:	00025e40 	call	25e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    2754:	800d883a 	mov	r6,r16
    2758:	89c00104 	addi	r7,r17,4
    275c:	100b883a 	mov	r5,r2
    2760:	9809883a 	mov	r4,r19
    2764:	00023fc0 	call	23fc <_ZL28read_encoded_value_with_basehjPKhPj>
    2768:	1021883a 	mov	r16,r2
    276c:	003fca06 	br	2698 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
    2770:	0005883a 	mov	r2,zero
    2774:	003fc206 	br	2680 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
    2778:	88000315 	stw	zero,12(r17)
    277c:	003fda06 	br	26e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x94>

00002780 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    2780:	defffa04 	addi	sp,sp,-24
    2784:	dc000215 	stw	r16,8(sp)
    2788:	24000317 	ldw	r16,12(r4)
    278c:	01ce303a 	nor	r7,zero,r7
    2790:	dc800415 	stw	r18,16(sp)
    2794:	dc400315 	stw	r17,12(sp)
    2798:	dfc00515 	stw	ra,20(sp)
    279c:	2025883a 	mov	r18,r4
    27a0:	2823883a 	mov	r17,r5
    27a4:	d9800015 	stw	r6,0(sp)
    27a8:	81e1883a 	add	r16,r16,r7
    27ac:	000f883a 	mov	r7,zero
    27b0:	000d883a 	mov	r6,zero
    27b4:	80800003 	ldbu	r2,0(r16)
    27b8:	84000044 	addi	r16,r16,1
    27bc:	10c01fcc 	andi	r3,r2,127
    27c0:	1986983a 	sll	r3,r3,r6
    27c4:	10803fcc 	andi	r2,r2,255
    27c8:	1080201c 	xori	r2,r2,128
    27cc:	10bfe004 	addi	r2,r2,-128
    27d0:	38ceb03a 	or	r7,r7,r3
    27d4:	318001c4 	addi	r6,r6,7
    27d8:	103ff616 	blt	r2,zero,27b4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x34>
    27dc:	38002926 	beq	r7,zero,2884 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x104>
    27e0:	90800503 	ldbu	r2,20(r18)
    27e4:	11003fcc 	andi	r4,r2,255
    27e8:	20c03fe0 	cmpeqi	r3,r4,255
    27ec:	1800231e 	bne	r3,zero,287c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xfc>
    27f0:	108001cc 	andi	r2,r2,7
    27f4:	10c000a0 	cmpeqi	r3,r2,2
    27f8:	18001d1e 	bne	r3,zero,2870 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xf0>
    27fc:	10c000e8 	cmpgeui	r3,r2,3
    2800:	18001726 	beq	r3,zero,2860 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe0>
    2804:	10c000e0 	cmpeqi	r3,r2,3
    2808:	1800161e 	bne	r3,zero,2864 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe4>
    280c:	10800120 	cmpeqi	r2,r2,4
    2810:	10001e26 	beq	r2,zero,288c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
    2814:	380e90fa 	slli	r7,r7,3
    2818:	01c5c83a 	sub	r2,zero,r7
    281c:	91800317 	ldw	r6,12(r18)
    2820:	91400217 	ldw	r5,8(r18)
    2824:	d9c00104 	addi	r7,sp,4
    2828:	308d883a 	add	r6,r6,r2
    282c:	00023fc0 	call	23fc <_ZL28read_encoded_value_with_basehjPKhPj>
    2830:	d9000117 	ldw	r4,4(sp)
    2834:	d80d883a 	mov	r6,sp
    2838:	880b883a 	mov	r5,r17
    283c:	000236c0 	call	236c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
    2840:	10c03fcc 	andi	r3,r2,255
    2844:	183fd926 	beq	r3,zero,27ac <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x2c>
    2848:	dfc00517 	ldw	ra,20(sp)
    284c:	dc800417 	ldw	r18,16(sp)
    2850:	dc400317 	ldw	r17,12(sp)
    2854:	dc000217 	ldw	r16,8(sp)
    2858:	dec00604 	addi	sp,sp,24
    285c:	f800283a 	ret
    2860:	10000a1e 	bne	r2,zero,288c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
    2864:	380e90ba 	slli	r7,r7,2
    2868:	01c5c83a 	sub	r2,zero,r7
    286c:	003feb06 	br	281c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
    2870:	39cf883a 	add	r7,r7,r7
    2874:	01c5c83a 	sub	r2,zero,r7
    2878:	003fe806 	br	281c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
    287c:	0005883a 	mov	r2,zero
    2880:	003fe606 	br	281c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
    2884:	0005883a 	mov	r2,zero
    2888:	003fef06 	br	2848 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xc8>
    288c:	00044bc0 	call	44bc <abort>

00002890 <__gxx_personality_sj0>:
    2890:	deffdb04 	addi	sp,sp,-148
    2894:	02000034 	movhi	r8,0
    2898:	00c00034 	movhi	r3,0
    289c:	00800034 	movhi	r2,0
    28a0:	108bc104 	addi	r2,r2,12036
    28a4:	d9000015 	stw	r4,0(sp)
    28a8:	420a2404 	addi	r8,r8,10384
    28ac:	18d73904 	addi	r3,r3,23780
    28b0:	d9000d04 	addi	r4,sp,52
    28b4:	d8801615 	stw	r2,88(sp)
    28b8:	dfc02415 	stw	ra,144(sp)
    28bc:	df002315 	stw	fp,140(sp)
    28c0:	d9400315 	stw	r5,12(sp)
    28c4:	d9800115 	stw	r6,4(sp)
    28c8:	d9c00215 	stw	r7,8(sp)
    28cc:	da001315 	stw	r8,76(sp)
    28d0:	d8c01415 	stw	r3,80(sp)
    28d4:	df001515 	stw	fp,84(sp)
    28d8:	dec01715 	stw	sp,92(sp)
    28dc:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
    28e0:	d8800017 	ldw	r2,0(sp)
    28e4:	d8001a15 	stw	zero,104(sp)
    28e8:	d8001b15 	stw	zero,108(sp)
    28ec:	10800058 	cmpnei	r2,r2,1
    28f0:	1000471e 	bne	r2,zero,2a10 <__gxx_personality_sj0+0x180>
    28f4:	d9800117 	ldw	r6,4(sp)
    28f8:	00af3574 	movhi	r2,48341
    28fc:	10b54004 	addi	r2,r2,-11008
    2900:	3085883a 	add	r2,r6,r2
    2904:	d8800715 	stw	r2,28(sp)
    2908:	1185803a 	cmpltu	r2,r2,r6
    290c:	d9800217 	ldw	r6,8(sp)
    2910:	00ee2cb4 	movhi	r3,47282
    2914:	d9000317 	ldw	r4,12(sp)
    2918:	18eaaf04 	addi	r3,r3,-21828
    291c:	30c7883a 	add	r3,r6,r3
    2920:	10c7883a 	add	r3,r2,r3
    2924:	21000198 	cmpnei	r4,r4,6
    2928:	d8c00615 	stw	r3,24(sp)
    292c:	2000011e 	bne	r4,zero,2934 <__gxx_personality_sj0+0xa4>
    2930:	1800d026 	beq	r3,zero,2c74 <__gxx_personality_sj0+0x3e4>
    2934:	d9002617 	ldw	r4,152(sp)
    2938:	00bfffc4 	movi	r2,-1
    293c:	d8800e15 	stw	r2,56(sp)
    2940:	00042600 	call	4260 <_Unwind_GetLanguageSpecificData>
    2944:	d8800515 	stw	r2,20(sp)
    2948:	10005d26 	beq	r2,zero,2ac0 <__gxx_personality_sj0+0x230>
    294c:	d9400517 	ldw	r5,20(sp)
    2950:	d9002617 	ldw	r4,152(sp)
    2954:	d9801d04 	addi	r6,sp,116
    2958:	00bfffc4 	movi	r2,-1
    295c:	d8800e15 	stw	r2,56(sp)
    2960:	00026540 	call	2654 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    2964:	d9002203 	ldbu	r4,136(sp)
    2968:	d9402617 	ldw	r5,152(sp)
    296c:	d8800015 	stw	r2,0(sp)
    2970:	00025e40 	call	25e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    2974:	d9002617 	ldw	r4,152(sp)
    2978:	d9401b04 	addi	r5,sp,108
    297c:	d8801f15 	stw	r2,124(sp)
    2980:	00042300 	call	4230 <_Unwind_GetIPInfo>
    2984:	d8c01b17 	ldw	r3,108(sp)
    2988:	d8800115 	stw	r2,4(sp)
    298c:	18004f26 	beq	r3,zero,2acc <__gxx_personality_sj0+0x23c>
    2990:	d8800117 	ldw	r2,4(sp)
    2994:	10004a16 	blt	r2,zero,2ac0 <__gxx_personality_sj0+0x230>
    2998:	1000381e 	bne	r2,zero,2a7c <__gxx_personality_sj0+0x1ec>
    299c:	d8000415 	stw	zero,16(sp)
    29a0:	d8000215 	stw	zero,8(sp)
    29a4:	00800044 	movi	r2,1
    29a8:	d8c00317 	ldw	r3,12(sp)
    29ac:	18c0004c 	andi	r3,r3,1
    29b0:	1801061e 	bne	r3,zero,2dcc <__gxx_personality_sj0+0x53c>
    29b4:	d8c00317 	ldw	r3,12(sp)
    29b8:	18c0020c 	andi	r3,r3,8
    29bc:	18010a26 	beq	r3,zero,2de8 <__gxx_personality_sj0+0x558>
    29c0:	10800058 	cmpnei	r2,r2,1
    29c4:	10015126 	beq	r2,zero,2f0c <__gxx_personality_sj0+0x67c>
    29c8:	d8800417 	ldw	r2,16(sp)
    29cc:	10014a16 	blt	r2,zero,2ef8 <__gxx_personality_sj0+0x668>
    29d0:	d9002617 	ldw	r4,152(sp)
    29d4:	d9802517 	ldw	r6,148(sp)
    29d8:	00bfffc4 	movi	r2,-1
    29dc:	000b883a 	mov	r5,zero
    29e0:	d8800e15 	stw	r2,56(sp)
    29e4:	00042080 	call	4208 <_Unwind_SetGR>
    29e8:	d9800417 	ldw	r6,16(sp)
    29ec:	d9002617 	ldw	r4,152(sp)
    29f0:	01400044 	movi	r5,1
    29f4:	00042080 	call	4208 <_Unwind_SetGR>
    29f8:	d9400117 	ldw	r5,4(sp)
    29fc:	d9002617 	ldw	r4,152(sp)
    2a00:	00042500 	call	4250 <_Unwind_SetIP>
    2a04:	008001c4 	movi	r2,7
    2a08:	d8800015 	stw	r2,0(sp)
    2a0c:	00000206 	br	2a18 <__gxx_personality_sj0+0x188>
    2a10:	008000c4 	movi	r2,3
    2a14:	d8800015 	stw	r2,0(sp)
    2a18:	d9000d04 	addi	r4,sp,52
    2a1c:	00041c80 	call	41c8 <_Unwind_SjLj_Unregister>
    2a20:	d8800017 	ldw	r2,0(sp)
    2a24:	dfc02417 	ldw	ra,144(sp)
    2a28:	df002317 	ldw	fp,140(sp)
    2a2c:	dec02504 	addi	sp,sp,148
    2a30:	f800283a 	ret
    2a34:	000b883a 	mov	r5,zero
    2a38:	0009883a 	mov	r4,zero
    2a3c:	d8c00017 	ldw	r3,0(sp)
    2a40:	18800003 	ldbu	r2,0(r3)
    2a44:	18c00044 	addi	r3,r3,1
    2a48:	d8c00015 	stw	r3,0(sp)
    2a4c:	10c01fcc 	andi	r3,r2,127
    2a50:	1906983a 	sll	r3,r3,r4
    2a54:	10803fcc 	andi	r2,r2,255
    2a58:	1080201c 	xori	r2,r2,128
    2a5c:	10bfe004 	addi	r2,r2,-128
    2a60:	28cab03a 	or	r5,r5,r3
    2a64:	210001c4 	addi	r4,r4,7
    2a68:	103ff416 	blt	r2,zero,2a3c <__gxx_personality_sj0+0x1ac>
    2a6c:	d8800117 	ldw	r2,4(sp)
    2a70:	10bfffc4 	addi	r2,r2,-1
    2a74:	d8800115 	stw	r2,4(sp)
    2a78:	10001726 	beq	r2,zero,2ad8 <__gxx_personality_sj0+0x248>
    2a7c:	000d883a 	mov	r6,zero
    2a80:	0009883a 	mov	r4,zero
    2a84:	d8c00017 	ldw	r3,0(sp)
    2a88:	18800003 	ldbu	r2,0(r3)
    2a8c:	18c00044 	addi	r3,r3,1
    2a90:	d8c00015 	stw	r3,0(sp)
    2a94:	10c01fcc 	andi	r3,r2,127
    2a98:	1906983a 	sll	r3,r3,r4
    2a9c:	10803fcc 	andi	r2,r2,255
    2aa0:	1080201c 	xori	r2,r2,128
    2aa4:	10bfe004 	addi	r2,r2,-128
    2aa8:	30ccb03a 	or	r6,r6,r3
    2aac:	210001c4 	addi	r4,r4,7
    2ab0:	103ff416 	blt	r2,zero,2a84 <__gxx_personality_sj0+0x1f4>
    2ab4:	003fdf06 	br	2a34 <__gxx_personality_sj0+0x1a4>
    2ab8:	d88008c3 	ldbu	r2,35(sp)
    2abc:	10008c1e 	bne	r2,zero,2cf0 <__gxx_personality_sj0+0x460>
    2ac0:	00800204 	movi	r2,8
    2ac4:	d8800015 	stw	r2,0(sp)
    2ac8:	003fd306 	br	2a18 <__gxx_personality_sj0+0x188>
    2acc:	10bfffc4 	addi	r2,r2,-1
    2ad0:	d8800115 	stw	r2,4(sp)
    2ad4:	003fae06 	br	2990 <__gxx_personality_sj0+0x100>
    2ad8:	30800044 	addi	r2,r6,1
    2adc:	d8800a15 	stw	r2,40(sp)
    2ae0:	283ff626 	beq	r5,zero,2abc <__gxx_personality_sj0+0x22c>
    2ae4:	d8800a17 	ldw	r2,40(sp)
    2ae8:	103ff526 	beq	r2,zero,2ac0 <__gxx_personality_sj0+0x230>
    2aec:	d8802117 	ldw	r2,132(sp)
    2af0:	297fffc4 	addi	r5,r5,-1
    2af4:	1145883a 	add	r2,r2,r5
    2af8:	d8800215 	stw	r2,8(sp)
    2afc:	10007c26 	beq	r2,zero,2cf0 <__gxx_personality_sj0+0x460>
    2b00:	d8800317 	ldw	r2,12(sp)
    2b04:	1080020c 	andi	r2,r2,8
    2b08:	d8800b15 	stw	r2,44(sp)
    2b0c:	1000bf1e 	bne	r2,zero,2e0c <__gxx_personality_sj0+0x57c>
    2b10:	d8800617 	ldw	r2,24(sp)
    2b14:	1000e526 	beq	r2,zero,2eac <__gxx_personality_sj0+0x61c>
    2b18:	00800074 	movhi	r2,1
    2b1c:	10a09704 	addi	r2,r2,-32164
    2b20:	d8800915 	stw	r2,36(sp)
    2b24:	d8800717 	ldw	r2,28(sp)
    2b28:	d80008c5 	stb	zero,35(sp)
    2b2c:	108000a8 	cmpgeui	r2,r2,2
    2b30:	d8800c15 	stw	r2,48(sp)
    2b34:	d8800217 	ldw	r2,8(sp)
    2b38:	000f883a 	mov	r7,zero
    2b3c:	0007883a 	mov	r3,zero
    2b40:	d8800015 	stw	r2,0(sp)
    2b44:	d8800017 	ldw	r2,0(sp)
    2b48:	11000003 	ldbu	r4,0(r2)
    2b4c:	10800044 	addi	r2,r2,1
    2b50:	d8800015 	stw	r2,0(sp)
    2b54:	20801fcc 	andi	r2,r4,127
    2b58:	10c4983a 	sll	r2,r2,r3
    2b5c:	21403fcc 	andi	r5,r4,255
    2b60:	2940201c 	xori	r5,r5,128
    2b64:	297fe004 	addi	r5,r5,-128
    2b68:	388eb03a 	or	r7,r7,r2
    2b6c:	18c001c4 	addi	r3,r3,7
    2b70:	283ff416 	blt	r5,zero,2b44 <__gxx_personality_sj0+0x2b4>
    2b74:	18800828 	cmpgeui	r2,r3,32
    2b78:	1000061e 	bne	r2,zero,2b94 <__gxx_personality_sj0+0x304>
    2b7c:	2100100c 	andi	r4,r4,64
    2b80:	20000426 	beq	r4,zero,2b94 <__gxx_personality_sj0+0x304>
    2b84:	00800044 	movi	r2,1
    2b88:	10c6983a 	sll	r3,r2,r3
    2b8c:	00c7c83a 	sub	r3,zero,r3
    2b90:	38ceb03a 	or	r7,r7,r3
    2b94:	d9400017 	ldw	r5,0(sp)
    2b98:	d9c00415 	stw	r7,16(sp)
    2b9c:	d8000115 	stw	zero,4(sp)
    2ba0:	0007883a 	mov	r3,zero
    2ba4:	29000003 	ldbu	r4,0(r5)
    2ba8:	da000117 	ldw	r8,4(sp)
    2bac:	29400044 	addi	r5,r5,1
    2bb0:	20801fcc 	andi	r2,r4,127
    2bb4:	10c4983a 	sll	r2,r2,r3
    2bb8:	21803fcc 	andi	r6,r4,255
    2bbc:	3180201c 	xori	r6,r6,128
    2bc0:	4084b03a 	or	r2,r8,r2
    2bc4:	31bfe004 	addi	r6,r6,-128
    2bc8:	d8800115 	stw	r2,4(sp)
    2bcc:	18c001c4 	addi	r3,r3,7
    2bd0:	303ff416 	blt	r6,zero,2ba4 <__gxx_personality_sj0+0x314>
    2bd4:	18800828 	cmpgeui	r2,r3,32
    2bd8:	1000081e 	bne	r2,zero,2bfc <__gxx_personality_sj0+0x36c>
    2bdc:	2100100c 	andi	r4,r4,64
    2be0:	20000626 	beq	r4,zero,2bfc <__gxx_personality_sj0+0x36c>
    2be4:	00800044 	movi	r2,1
    2be8:	10c6983a 	sll	r3,r2,r3
    2bec:	d8800117 	ldw	r2,4(sp)
    2bf0:	00c7c83a 	sub	r3,zero,r3
    2bf4:	10c4b03a 	or	r2,r2,r3
    2bf8:	d8800115 	stw	r2,4(sp)
    2bfc:	38004726 	beq	r7,zero,2d1c <__gxx_personality_sj0+0x48c>
    2c00:	01c04916 	blt	zero,r7,2d28 <__gxx_personality_sj0+0x498>
    2c04:	d8800917 	ldw	r2,36(sp)
    2c08:	10000426 	beq	r2,zero,2c1c <__gxx_personality_sj0+0x38c>
    2c0c:	d8800b17 	ldw	r2,44(sp)
    2c10:	1000021e 	bne	r2,zero,2c1c <__gxx_personality_sj0+0x38c>
    2c14:	d8800617 	ldw	r2,24(sp)
    2c18:	10008026 	beq	r2,zero,2e1c <__gxx_personality_sj0+0x58c>
    2c1c:	d8802017 	ldw	r2,128(sp)
    2c20:	01ce303a 	nor	r7,zero,r7
    2c24:	000b883a 	mov	r5,zero
    2c28:	11cf883a 	add	r7,r2,r7
    2c2c:	0009883a 	mov	r4,zero
    2c30:	38800003 	ldbu	r2,0(r7)
    2c34:	39c00044 	addi	r7,r7,1
    2c38:	10c01fcc 	andi	r3,r2,127
    2c3c:	1906983a 	sll	r3,r3,r4
    2c40:	10803fcc 	andi	r2,r2,255
    2c44:	1080201c 	xori	r2,r2,128
    2c48:	10bfe004 	addi	r2,r2,-128
    2c4c:	28cab03a 	or	r5,r5,r3
    2c50:	210001c4 	addi	r4,r4,7
    2c54:	103ff616 	blt	r2,zero,2c30 <__gxx_personality_sj0+0x3a0>
    2c58:	28005126 	beq	r5,zero,2da0 <__gxx_personality_sj0+0x510>
    2c5c:	d8800117 	ldw	r2,4(sp)
    2c60:	103f9526 	beq	r2,zero,2ab8 <__gxx_personality_sj0+0x228>
    2c64:	d8c00017 	ldw	r3,0(sp)
    2c68:	1885883a 	add	r2,r3,r2
    2c6c:	d8800215 	stw	r2,8(sp)
    2c70:	003fb006 	br	2b34 <__gxx_personality_sj0+0x2a4>
    2c74:	d8800717 	ldw	r2,28(sp)
    2c78:	108000a8 	cmpgeui	r2,r2,2
    2c7c:	103f2d1e 	bne	r2,zero,2934 <__gxx_personality_sj0+0xa4>
    2c80:	d8802517 	ldw	r2,148(sp)
    2c84:	10bffe17 	ldw	r2,-8(r2)
    2c88:	d8800115 	stw	r2,4(sp)
    2c8c:	10005d26 	beq	r2,zero,2e04 <__gxx_personality_sj0+0x574>
    2c90:	d8802517 	ldw	r2,148(sp)
    2c94:	10bffb17 	ldw	r2,-20(r2)
    2c98:	d8800415 	stw	r2,16(sp)
    2c9c:	d8802517 	ldw	r2,148(sp)
    2ca0:	10bffd17 	ldw	r2,-12(r2)
    2ca4:	d8800515 	stw	r2,20(sp)
    2ca8:	d8800417 	ldw	r2,16(sp)
    2cac:	103f480e 	bge	r2,zero,29d0 <__gxx_personality_sj0+0x140>
    2cb0:	d9002617 	ldw	r4,152(sp)
    2cb4:	d9400517 	ldw	r5,20(sp)
    2cb8:	d9801d04 	addi	r6,sp,116
    2cbc:	00bfffc4 	movi	r2,-1
    2cc0:	d8800e15 	stw	r2,56(sp)
    2cc4:	00026540 	call	2654 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    2cc8:	d9402617 	ldw	r5,152(sp)
    2ccc:	d9002203 	ldbu	r4,136(sp)
    2cd0:	00025e40 	call	25e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    2cd4:	d9002203 	ldbu	r4,136(sp)
    2cd8:	d9402617 	ldw	r5,152(sp)
    2cdc:	d8801f15 	stw	r2,124(sp)
    2ce0:	00025e40 	call	25e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    2ce4:	d8c02517 	ldw	r3,148(sp)
    2ce8:	18bffe15 	stw	r2,-8(r3)
    2cec:	003f3806 	br	29d0 <__gxx_personality_sj0+0x140>
    2cf0:	d8800317 	ldw	r2,12(sp)
    2cf4:	1080004c 	andi	r2,r2,1
    2cf8:	103f711e 	bne	r2,zero,2ac0 <__gxx_personality_sj0+0x230>
    2cfc:	d8800317 	ldw	r2,12(sp)
    2d00:	1080020c 	andi	r2,r2,8
    2d04:	d8800415 	stw	r2,16(sp)
    2d08:	10008126 	beq	r2,zero,2f10 <__gxx_personality_sj0+0x680>
    2d0c:	d8800a17 	ldw	r2,40(sp)
    2d10:	d8000415 	stw	zero,16(sp)
    2d14:	d8800115 	stw	r2,4(sp)
    2d18:	003f2d06 	br	29d0 <__gxx_personality_sj0+0x140>
    2d1c:	00800044 	movi	r2,1
    2d20:	d88008c5 	stb	r2,35(sp)
    2d24:	003fcd06 	br	2c5c <__gxx_personality_sj0+0x3cc>
    2d28:	d8802203 	ldbu	r2,136(sp)
    2d2c:	11003fcc 	andi	r4,r2,255
    2d30:	20c03fe0 	cmpeqi	r3,r4,255
    2d34:	18002a1e 	bne	r3,zero,2de0 <__gxx_personality_sj0+0x550>
    2d38:	108001cc 	andi	r2,r2,7
    2d3c:	10c000a0 	cmpeqi	r3,r2,2
    2d40:	18001f1e 	bne	r3,zero,2dc0 <__gxx_personality_sj0+0x530>
    2d44:	10c000e8 	cmpgeui	r3,r2,3
    2d48:	18001926 	beq	r3,zero,2db0 <__gxx_personality_sj0+0x520>
    2d4c:	10c000e0 	cmpeqi	r3,r2,3
    2d50:	1800181e 	bne	r3,zero,2db4 <__gxx_personality_sj0+0x524>
    2d54:	10800120 	cmpeqi	r2,r2,4
    2d58:	10007026 	beq	r2,zero,2f1c <__gxx_personality_sj0+0x68c>
    2d5c:	380490fa 	slli	r2,r7,3
    2d60:	0085c83a 	sub	r2,zero,r2
    2d64:	d9802017 	ldw	r6,128(sp)
    2d68:	d9401f17 	ldw	r5,124(sp)
    2d6c:	d9c01c04 	addi	r7,sp,112
    2d70:	308d883a 	add	r6,r6,r2
    2d74:	00bfffc4 	movi	r2,-1
    2d78:	d8800e15 	stw	r2,56(sp)
    2d7c:	00023fc0 	call	23fc <_ZL28read_encoded_value_with_basehjPKhPj>
    2d80:	d9001c17 	ldw	r4,112(sp)
    2d84:	20000626 	beq	r4,zero,2da0 <__gxx_personality_sj0+0x510>
    2d88:	d9400917 	ldw	r5,36(sp)
    2d8c:	283fb326 	beq	r5,zero,2c5c <__gxx_personality_sj0+0x3cc>
    2d90:	d9801a04 	addi	r6,sp,104
    2d94:	000236c0 	call	236c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
    2d98:	10803fcc 	andi	r2,r2,255
    2d9c:	103faf26 	beq	r2,zero,2c5c <__gxx_personality_sj0+0x3cc>
    2da0:	d8800a17 	ldw	r2,40(sp)
    2da4:	d8800115 	stw	r2,4(sp)
    2da8:	008000c4 	movi	r2,3
    2dac:	003efe06 	br	29a8 <__gxx_personality_sj0+0x118>
    2db0:	10005a1e 	bne	r2,zero,2f1c <__gxx_personality_sj0+0x68c>
    2db4:	380490ba 	slli	r2,r7,2
    2db8:	0085c83a 	sub	r2,zero,r2
    2dbc:	003fe906 	br	2d64 <__gxx_personality_sj0+0x4d4>
    2dc0:	39cf883a 	add	r7,r7,r7
    2dc4:	01c5c83a 	sub	r2,zero,r7
    2dc8:	003fe606 	br	2d64 <__gxx_personality_sj0+0x4d4>
    2dcc:	d8800617 	ldw	r2,24(sp)
    2dd0:	10002326 	beq	r2,zero,2e60 <__gxx_personality_sj0+0x5d0>
    2dd4:	00800184 	movi	r2,6
    2dd8:	d8800015 	stw	r2,0(sp)
    2ddc:	003f0e06 	br	2a18 <__gxx_personality_sj0+0x188>
    2de0:	0005883a 	mov	r2,zero
    2de4:	003fdf06 	br	2d64 <__gxx_personality_sj0+0x4d4>
    2de8:	d8c00617 	ldw	r3,24(sp)
    2dec:	183ef41e 	bne	r3,zero,29c0 <__gxx_personality_sj0+0x130>
    2df0:	d8c00717 	ldw	r3,28(sp)
    2df4:	18c000a8 	cmpgeui	r3,r3,2
    2df8:	183ef11e 	bne	r3,zero,29c0 <__gxx_personality_sj0+0x130>
    2dfc:	10800060 	cmpeqi	r2,r2,1
    2e00:	103fa926 	beq	r2,zero,2ca8 <__gxx_personality_sj0+0x418>
    2e04:	d9002517 	ldw	r4,148(sp)
    2e08:	00035ac0 	call	35ac <__cxa_call_terminate>
    2e0c:	00800074 	movhi	r2,1
    2e10:	10a09504 	addi	r2,r2,-32172
    2e14:	d8800915 	stw	r2,36(sp)
    2e18:	003f4206 	br	2b24 <__gxx_personality_sj0+0x294>
    2e1c:	d8800c17 	ldw	r2,48(sp)
    2e20:	103f7e1e 	bne	r2,zero,2c1c <__gxx_personality_sj0+0x38c>
    2e24:	d9801a17 	ldw	r6,104(sp)
    2e28:	d9400917 	ldw	r5,36(sp)
    2e2c:	00bfffc4 	movi	r2,-1
    2e30:	d9001d04 	addi	r4,sp,116
    2e34:	d8800e15 	stw	r2,56(sp)
    2e38:	00027800 	call	2780 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    2e3c:	10803fcc 	andi	r2,r2,255
    2e40:	103f861e 	bne	r2,zero,2c5c <__gxx_personality_sj0+0x3cc>
    2e44:	d8800317 	ldw	r2,12(sp)
    2e48:	1080004c 	andi	r2,r2,1
    2e4c:	1000271e 	bne	r2,zero,2eec <__gxx_personality_sj0+0x65c>
    2e50:	d8800a17 	ldw	r2,40(sp)
    2e54:	d8800115 	stw	r2,4(sp)
    2e58:	008000c4 	movi	r2,3
    2e5c:	003fe406 	br	2df0 <__gxx_personality_sj0+0x560>
    2e60:	d8800717 	ldw	r2,28(sp)
    2e64:	108000a8 	cmpgeui	r2,r2,2
    2e68:	103fda1e 	bne	r2,zero,2dd4 <__gxx_personality_sj0+0x544>
    2e6c:	d8802517 	ldw	r2,148(sp)
    2e70:	d8c00417 	ldw	r3,16(sp)
    2e74:	10fffb15 	stw	r3,-20(r2)
    2e78:	d8c00217 	ldw	r3,8(sp)
    2e7c:	10fffc15 	stw	r3,-16(r2)
    2e80:	d8c00517 	ldw	r3,20(sp)
    2e84:	10fffd15 	stw	r3,-12(r2)
    2e88:	d8c02517 	ldw	r3,148(sp)
    2e8c:	d8801a17 	ldw	r2,104(sp)
    2e90:	18bfff15 	stw	r2,-4(r3)
    2e94:	1805883a 	mov	r2,r3
    2e98:	d8c00117 	ldw	r3,4(sp)
    2e9c:	10fffe15 	stw	r3,-8(r2)
    2ea0:	00800184 	movi	r2,6
    2ea4:	d8800015 	stw	r2,0(sp)
    2ea8:	003edb06 	br	2a18 <__gxx_personality_sj0+0x188>
    2eac:	d8800717 	ldw	r2,28(sp)
    2eb0:	108000a8 	cmpgeui	r2,r2,2
    2eb4:	103f181e 	bne	r2,zero,2b18 <__gxx_personality_sj0+0x288>
    2eb8:	d8802517 	ldw	r2,148(sp)
    2ebc:	10800003 	ldbu	r2,0(r2)
    2ec0:	1080004c 	andi	r2,r2,1
    2ec4:	10000626 	beq	r2,zero,2ee0 <__gxx_personality_sj0+0x650>
    2ec8:	d8802517 	ldw	r2,148(sp)
    2ecc:	10bff517 	ldw	r2,-44(r2)
    2ed0:	10fff017 	ldw	r3,-64(r2)
    2ed4:	d8801a15 	stw	r2,104(sp)
    2ed8:	d8c00915 	stw	r3,36(sp)
    2edc:	003f1106 	br	2b24 <__gxx_personality_sj0+0x294>
    2ee0:	d8802517 	ldw	r2,148(sp)
    2ee4:	10800504 	addi	r2,r2,20
    2ee8:	003ff906 	br	2ed0 <__gxx_personality_sj0+0x640>
    2eec:	d8800a17 	ldw	r2,40(sp)
    2ef0:	d8800115 	stw	r2,4(sp)
    2ef4:	003fdd06 	br	2e6c <__gxx_personality_sj0+0x5dc>
    2ef8:	00800044 	movi	r2,1
    2efc:	d8800e15 	stw	r2,56(sp)
    2f00:	00031900 	call	3190 <_ZSt10unexpectedv>
    2f04:	d9000f17 	ldw	r4,60(sp)
    2f08:	00036040 	call	3604 <__cxa_begin_catch>
    2f0c:	000316c0 	call	316c <_ZSt9terminatev>
    2f10:	d8800a17 	ldw	r2,40(sp)
    2f14:	d8800115 	stw	r2,4(sp)
    2f18:	003ead06 	br	29d0 <__gxx_personality_sj0+0x140>
    2f1c:	00bfffc4 	movi	r2,-1
    2f20:	d8800e15 	stw	r2,56(sp)
    2f24:	00044bc0 	call	44bc <abort>

00002f28 <__cxa_call_unexpected>:
    2f28:	deffe704 	addi	sp,sp,-100
    2f2c:	01400034 	movhi	r5,0
    2f30:	00c00034 	movhi	r3,0
    2f34:	00800034 	movhi	r2,0
    2f38:	294a2404 	addi	r5,r5,10384
    2f3c:	18d73d04 	addi	r3,r3,23796
    2f40:	108bea04 	addi	r2,r2,12200
    2f44:	d9000015 	stw	r4,0(sp)
    2f48:	d9000404 	addi	r4,sp,16
    2f4c:	d9400a15 	stw	r5,40(sp)
    2f50:	d8c00b15 	stw	r3,44(sp)
    2f54:	dfc01815 	stw	ra,96(sp)
    2f58:	d8800d15 	stw	r2,52(sp)
    2f5c:	df001715 	stw	fp,92(sp)
    2f60:	df000c15 	stw	fp,48(sp)
    2f64:	dec00e15 	stw	sp,56(sp)
    2f68:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
    2f6c:	d9000017 	ldw	r4,0(sp)
    2f70:	00036040 	call	3604 <__cxa_begin_catch>
    2f74:	d8c00017 	ldw	r3,0(sp)
    2f78:	197ffd17 	ldw	r5,-12(r3)
    2f7c:	18bffe17 	ldw	r2,-8(r3)
    2f80:	193ff717 	ldw	r4,-36(r3)
    2f84:	d9400115 	stw	r5,4(sp)
    2f88:	197ffb17 	ldw	r5,-20(r3)
    2f8c:	18fff817 	ldw	r3,-32(r3)
    2f90:	d8801315 	stw	r2,76(sp)
    2f94:	00800044 	movi	r2,1
    2f98:	d9400015 	stw	r5,0(sp)
    2f9c:	d8c00215 	stw	r3,8(sp)
    2fa0:	d8800515 	stw	r2,20(sp)
    2fa4:	00031800 	call	3180 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    2fa8:	d8c00617 	ldw	r3,24(sp)
    2fac:	d8800517 	ldw	r2,20(sp)
    2fb0:	d8c00315 	stw	r3,12(sp)
    2fb4:	10002b1e 	bne	r2,zero,3064 <__cxa_call_unexpected+0x13c>
    2fb8:	d9000317 	ldw	r4,12(sp)
    2fbc:	00036040 	call	3604 <__cxa_begin_catch>
    2fc0:	00037880 	call	3788 <__cxa_get_globals_fast>
    2fc4:	10800017 	ldw	r2,0(r2)
    2fc8:	10c00b03 	ldbu	r3,44(r2)
    2fcc:	18c0004c 	andi	r3,r3,1
    2fd0:	18002e26 	beq	r3,zero,308c <__cxa_call_unexpected+0x164>
    2fd4:	10800017 	ldw	r2,0(r2)
    2fd8:	d8800315 	stw	r2,12(sp)
    2fdc:	d9400117 	ldw	r5,4(sp)
    2fe0:	00800084 	movi	r2,2
    2fe4:	d9801104 	addi	r6,sp,68
    2fe8:	0009883a 	mov	r4,zero
    2fec:	d8800515 	stw	r2,20(sp)
    2ff0:	00026540 	call	2654 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    2ff4:	d9800317 	ldw	r6,12(sp)
    2ff8:	d9c00017 	ldw	r7,0(sp)
    2ffc:	d9001104 	addi	r4,sp,68
    3000:	317ff017 	ldw	r5,-64(r6)
    3004:	00027800 	call	2780 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    3008:	10803fcc 	andi	r2,r2,255
    300c:	1000221e 	bne	r2,zero,3098 <__cxa_call_unexpected+0x170>
    3010:	d9c00017 	ldw	r7,0(sp)
    3014:	01400034 	movhi	r5,0
    3018:	00800084 	movi	r2,2
    301c:	000d883a 	mov	r6,zero
    3020:	2957e304 	addi	r5,r5,24460
    3024:	d9001104 	addi	r4,sp,68
    3028:	d8800515 	stw	r2,20(sp)
    302c:	00027800 	call	2780 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    3030:	10803fcc 	andi	r2,r2,255
    3034:	10001926 	beq	r2,zero,309c <__cxa_call_unexpected+0x174>
    3038:	01000104 	movi	r4,4
    303c:	00034c80 	call	34c8 <__cxa_allocate_exception>
    3040:	1009883a 	mov	r4,r2
    3044:	00800034 	movhi	r2,0
    3048:	01800034 	movhi	r6,0
    304c:	01400034 	movhi	r5,0
    3050:	1097f904 	addi	r2,r2,24548
    3054:	318ddc04 	addi	r6,r6,14192
    3058:	2957e304 	addi	r5,r5,24460
    305c:	20800015 	stw	r2,0(r4)
    3060:	00032880 	call	3288 <__cxa_throw>
    3064:	10bfffc4 	addi	r2,r2,-1
    3068:	10000126 	beq	r2,zero,3070 <__cxa_call_unexpected+0x148>
    306c:	003b68fa 	trap	3
    3070:	d8000515 	stw	zero,20(sp)
    3074:	00036bc0 	call	36bc <__cxa_end_catch>
    3078:	00036bc0 	call	36bc <__cxa_end_catch>
    307c:	d9000317 	ldw	r4,12(sp)
    3080:	00bfffc4 	movi	r2,-1
    3084:	d8800515 	stw	r2,20(sp)
    3088:	00043980 	call	4398 <_Unwind_SjLj_Resume>
    308c:	10801004 	addi	r2,r2,64
    3090:	d8800315 	stw	r2,12(sp)
    3094:	003fd106 	br	2fdc <__cxa_call_unexpected+0xb4>
    3098:	00032e80 	call	32e8 <__cxa_rethrow>
    309c:	d9000217 	ldw	r4,8(sp)
    30a0:	00030a40 	call	30a4 <_ZN10__cxxabiv111__terminateEPFvvE>

000030a4 <_ZN10__cxxabiv111__terminateEPFvvE>:
    30a4:	deffef04 	addi	sp,sp,-68
    30a8:	01400034 	movhi	r5,0
    30ac:	00c00034 	movhi	r3,0
    30b0:	00800034 	movhi	r2,0
    30b4:	200d883a 	mov	r6,r4
    30b8:	108c4004 	addi	r2,r2,12544
    30bc:	294a2404 	addi	r5,r5,10384
    30c0:	18d74104 	addi	r3,r3,23812
    30c4:	d9000204 	addi	r4,sp,8
    30c8:	d8800b15 	stw	r2,44(sp)
    30cc:	dfc01015 	stw	ra,64(sp)
    30d0:	df000f15 	stw	fp,60(sp)
    30d4:	d9800015 	stw	r6,0(sp)
    30d8:	d9400815 	stw	r5,32(sp)
    30dc:	d8c00915 	stw	r3,36(sp)
    30e0:	df000a15 	stw	fp,40(sp)
    30e4:	dec00c15 	stw	sp,48(sp)
    30e8:	00041b00 	call	41b0 <_Unwind_SjLj_Register>
    30ec:	00800044 	movi	r2,1
    30f0:	d8800315 	stw	r2,12(sp)
    30f4:	d8800017 	ldw	r2,0(sp)
    30f8:	103ee83a 	callr	r2
    30fc:	00044bc0 	call	44bc <abort>
    3100:	d8c00417 	ldw	r3,16(sp)
    3104:	d8800317 	ldw	r2,12(sp)
    3108:	d8c00015 	stw	r3,0(sp)
    310c:	d8c00517 	ldw	r3,20(sp)
    3110:	d8c00115 	stw	r3,4(sp)
    3114:	1000051e 	bne	r2,zero,312c <_ZN10__cxxabiv111__terminateEPFvvE+0x88>
    3118:	d9000017 	ldw	r4,0(sp)
    311c:	00036040 	call	3604 <__cxa_begin_catch>
    3120:	00800084 	movi	r2,2
    3124:	d8800315 	stw	r2,12(sp)
    3128:	00044bc0 	call	44bc <abort>
    312c:	10bfffc4 	addi	r2,r2,-1
    3130:	10000126 	beq	r2,zero,3138 <_ZN10__cxxabiv111__terminateEPFvvE+0x94>
    3134:	003b68fa 	trap	3
    3138:	d8000315 	stw	zero,12(sp)
    313c:	00036bc0 	call	36bc <__cxa_end_catch>
    3140:	d8c00117 	ldw	r3,4(sp)
    3144:	18bfffe0 	cmpeqi	r2,r3,-1
    3148:	10000426 	beq	r2,zero,315c <_ZN10__cxxabiv111__terminateEPFvvE+0xb8>
    314c:	d8800117 	ldw	r2,4(sp)
    3150:	d9000017 	ldw	r4,0(sp)
    3154:	d8800315 	stw	r2,12(sp)
    3158:	0002f280 	call	2f28 <__cxa_call_unexpected>
    315c:	d9000017 	ldw	r4,0(sp)
    3160:	00bfffc4 	movi	r2,-1
    3164:	d8800315 	stw	r2,12(sp)
    3168:	00043980 	call	4398 <_Unwind_SjLj_Resume>

0000316c <_ZSt9terminatev>:
    316c:	00800074 	movhi	r2,1
    3170:	11209917 	ldw	r4,-32156(r2)
    3174:	deffff04 	addi	sp,sp,-4
    3178:	dfc00015 	stw	ra,0(sp)
    317c:	00030a40 	call	30a4 <_ZN10__cxxabiv111__terminateEPFvvE>

00003180 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    3180:	deffff04 	addi	sp,sp,-4
    3184:	dfc00015 	stw	ra,0(sp)
    3188:	203ee83a 	callr	r4
    318c:	000316c0 	call	316c <_ZSt9terminatev>

00003190 <_ZSt10unexpectedv>:
    3190:	00800074 	movhi	r2,1
    3194:	11209217 	ldw	r4,-32184(r2)
    3198:	deffff04 	addi	sp,sp,-4
    319c:	dfc00015 	stw	ra,0(sp)
    31a0:	00031800 	call	3180 <_ZN10__cxxabiv112__unexpectedEPFvvE>

000031a4 <_ZSt13get_terminatev>:
    31a4:	00800074 	movhi	r2,1
    31a8:	10a09917 	ldw	r2,-32156(r2)
    31ac:	f800283a 	ret

000031b0 <_ZSt14get_unexpectedv>:
    31b0:	00800074 	movhi	r2,1
    31b4:	10a09217 	ldw	r2,-32184(r2)
    31b8:	f800283a 	ret

000031bc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    31bc:	defffe04 	addi	sp,sp,-8
    31c0:	dfc00115 	stw	ra,4(sp)
    31c4:	dc000015 	stw	r16,0(sp)
    31c8:	210000b0 	cmpltui	r4,r4,2
    31cc:	20001326 	beq	r4,zero,321c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x60>
    31d0:	28bff417 	ldw	r2,-48(r5)
    31d4:	10ffffc4 	addi	r3,r2,-1
    31d8:	28fff415 	stw	r3,-48(r5)
    31dc:	10800058 	cmpnei	r2,r2,1
    31e0:	10000426 	beq	r2,zero,31f4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x38>
    31e4:	dfc00117 	ldw	ra,4(sp)
    31e8:	dc000017 	ldw	r16,0(sp)
    31ec:	dec00204 	addi	sp,sp,8
    31f0:	f800283a 	ret
    31f4:	28bff617 	ldw	r2,-40(r5)
    31f8:	2c000504 	addi	r16,r5,20
    31fc:	10000226 	beq	r2,zero,3208 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x4c>
    3200:	8009883a 	mov	r4,r16
    3204:	103ee83a 	callr	r2
    3208:	8009883a 	mov	r4,r16
    320c:	dfc00117 	ldw	ra,4(sp)
    3210:	dc000017 	ldw	r16,0(sp)
    3214:	dec00204 	addi	sp,sp,8
    3218:	00035201 	jmpi	3520 <__cxa_free_exception>
    321c:	293ff817 	ldw	r4,-32(r5)
    3220:	00030a40 	call	30a4 <_ZN10__cxxabiv111__terminateEPFvvE>

00003224 <__cxa_init_primary_exception>:
    3224:	defffe04 	addi	sp,sp,-8
    3228:	dfc00115 	stw	ra,4(sp)
    322c:	dc000015 	stw	r16,0(sp)
    3230:	217ff015 	stw	r5,-64(r4)
    3234:	21bff115 	stw	r6,-60(r4)
    3238:	203fef15 	stw	zero,-68(r4)
    323c:	2021883a 	mov	r16,r4
    3240:	00031b00 	call	31b0 <_ZSt14get_unexpectedv>
    3244:	80bff215 	stw	r2,-56(r16)
    3248:	00031a40 	call	31a4 <_ZSt13get_terminatev>
    324c:	0150caf4 	movhi	r5,17195
    3250:	0111d3b4 	movhi	r4,18254
    3254:	00c00034 	movhi	r3,0
    3258:	294ac004 	addi	r5,r5,11008
    325c:	211550c4 	addi	r4,r4,21827
    3260:	18cc6f04 	addi	r3,r3,12732
    3264:	80bff315 	stw	r2,-52(r16)
    3268:	80bfef04 	addi	r2,r16,-68
    326c:	817ffb15 	stw	r5,-20(r16)
    3270:	813ffc15 	stw	r4,-16(r16)
    3274:	80fffd15 	stw	r3,-12(r16)
    3278:	dfc00117 	ldw	ra,4(sp)
    327c:	dc000017 	ldw	r16,0(sp)
    3280:	dec00204 	addi	sp,sp,8
    3284:	f800283a 	ret

00003288 <__cxa_throw>:
    3288:	defffc04 	addi	sp,sp,-16
    328c:	dfc00315 	stw	ra,12(sp)
    3290:	dc800215 	stw	r18,8(sp)
    3294:	dc400115 	stw	r17,4(sp)
    3298:	dc000015 	stw	r16,0(sp)
    329c:	2823883a 	mov	r17,r5
    32a0:	2021883a 	mov	r16,r4
    32a4:	3025883a 	mov	r18,r6
    32a8:	00037940 	call	3794 <__cxa_get_globals>
    32ac:	10c00117 	ldw	r3,4(r2)
    32b0:	900d883a 	mov	r6,r18
    32b4:	880b883a 	mov	r5,r17
    32b8:	18c00044 	addi	r3,r3,1
    32bc:	8009883a 	mov	r4,r16
    32c0:	10c00115 	stw	r3,4(r2)
    32c4:	00032240 	call	3224 <__cxa_init_primary_exception>
    32c8:	14000c04 	addi	r16,r2,48
    32cc:	00c00044 	movi	r3,1
    32d0:	10c00015 	stw	r3,0(r2)
    32d4:	8009883a 	mov	r4,r16
    32d8:	000428c0 	call	428c <_Unwind_SjLj_RaiseException>
    32dc:	8009883a 	mov	r4,r16
    32e0:	00036040 	call	3604 <__cxa_begin_catch>
    32e4:	000316c0 	call	316c <_ZSt9terminatev>

000032e8 <__cxa_rethrow>:
    32e8:	defffe04 	addi	sp,sp,-8
    32ec:	dfc00115 	stw	ra,4(sp)
    32f0:	dc000015 	stw	r16,0(sp)
    32f4:	00037940 	call	3794 <__cxa_get_globals>
    32f8:	10c00117 	ldw	r3,4(r2)
    32fc:	11000017 	ldw	r4,0(r2)
    3300:	18c00044 	addi	r3,r3,1
    3304:	10c00115 	stw	r3,4(r2)
    3308:	20001126 	beq	r4,zero,3350 <__cxa_rethrow+0x68>
    330c:	20c00b17 	ldw	r3,44(r4)
    3310:	21800c17 	ldw	r6,48(r4)
    3314:	016f3574 	movhi	r5,48341
    3318:	29754004 	addi	r5,r5,-11008
    331c:	01ee2cb4 	movhi	r7,47282
    3320:	39eaaf04 	addi	r7,r7,-21828
    3324:	194b883a 	add	r5,r3,r5
    3328:	28c7803a 	cmpltu	r3,r5,r3
    332c:	31cd883a 	add	r6,r6,r7
    3330:	1987883a 	add	r3,r3,r6
    3334:	18000726 	beq	r3,zero,3354 <__cxa_rethrow+0x6c>
    3338:	10000015 	stw	zero,0(r2)
    333c:	24000b04 	addi	r16,r4,44
    3340:	8009883a 	mov	r4,r16
    3344:	00043dc0 	call	43dc <_Unwind_SjLj_Resume_or_Rethrow>
    3348:	8009883a 	mov	r4,r16
    334c:	00036040 	call	3604 <__cxa_begin_catch>
    3350:	000316c0 	call	316c <_ZSt9terminatev>
    3354:	294000a8 	cmpgeui	r5,r5,2
    3358:	283ff71e 	bne	r5,zero,3338 <__cxa_rethrow+0x50>
    335c:	20800517 	ldw	r2,20(r4)
    3360:	0085c83a 	sub	r2,zero,r2
    3364:	20800515 	stw	r2,20(r4)
    3368:	003ff406 	br	333c <__cxa_rethrow+0x54>

0000336c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
    336c:	01400074 	movhi	r5,1
    3370:	2960d704 	addi	r5,r5,-31908
    3374:	28c00117 	ldw	r3,4(r5)
    3378:	223fff04 	addi	r8,r4,-4
    337c:	18001a26 	beq	r3,zero,33e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
    3380:	227fff17 	ldw	r9,-4(r4)
    3384:	424d883a 	add	r6,r8,r9
    3388:	30c01736 	bltu	r6,r3,33e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
    338c:	18800117 	ldw	r2,4(r3)
    3390:	19802326 	beq	r3,r6,3420 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb4>
    3394:	01c00074 	movhi	r7,1
    3398:	39e0d804 	addi	r7,r7,-31904
    339c:	10000726 	beq	r2,zero,33bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
    33a0:	3080062e 	bgeu	r6,r2,33bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
    33a4:	11400117 	ldw	r5,4(r2)
    33a8:	19c00104 	addi	r7,r3,4
    33ac:	1007883a 	mov	r3,r2
    33b0:	28001826 	beq	r5,zero,3414 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa8>
    33b4:	2805883a 	mov	r2,r5
    33b8:	30bffa36 	bltu	r6,r2,33a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x38>
    33bc:	30801026 	beq	r6,r2,3400 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
    33c0:	38800017 	ldw	r2,0(r7)
    33c4:	10c00017 	ldw	r3,0(r2)
    33c8:	10cb883a 	add	r5,r2,r3
    33cc:	41400926 	beq	r8,r5,33f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x88>
    33d0:	10800117 	ldw	r2,4(r2)
    33d4:	227fff15 	stw	r9,-4(r4)
    33d8:	20800015 	stw	r2,0(r4)
    33dc:	38800017 	ldw	r2,0(r7)
    33e0:	12000115 	stw	r8,4(r2)
    33e4:	f800283a 	ret
    33e8:	20c00015 	stw	r3,0(r4)
    33ec:	2a000115 	stw	r8,4(r5)
    33f0:	f800283a 	ret
    33f4:	1a47883a 	add	r3,r3,r9
    33f8:	10c00015 	stw	r3,0(r2)
    33fc:	f800283a 	ret
    3400:	31400017 	ldw	r5,0(r6)
    3404:	30800117 	ldw	r2,4(r6)
    3408:	4953883a 	add	r9,r9,r5
    340c:	18800115 	stw	r2,4(r3)
    3410:	003feb06 	br	33c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
    3414:	0005883a 	mov	r2,zero
    3418:	30bfe91e 	bne	r6,r2,33c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
    341c:	003ff806 	br	3400 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
    3420:	18c00017 	ldw	r3,0(r3)
    3424:	20800015 	stw	r2,0(r4)
    3428:	1a53883a 	add	r9,r3,r9
    342c:	227fff15 	stw	r9,-4(r4)
    3430:	2a000115 	stw	r8,4(r5)
    3434:	f800283a 	ret

00003438 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
    3438:	21000104 	addi	r4,r4,4
    343c:	20800228 	cmpgeui	r2,r4,8
    3440:	1000011e 	bne	r2,zero,3448 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x10>
    3444:	01000204 	movi	r4,8
    3448:	00800074 	movhi	r2,1
    344c:	10a0d817 	ldw	r2,-31904(r2)
    3450:	210000c4 	addi	r4,r4,3
    3454:	00ffff04 	movi	r3,-4
    3458:	20c8703a 	and	r4,r4,r3
    345c:	10001026 	beq	r2,zero,34a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x68>
    3460:	01800074 	movhi	r6,1
    3464:	31a0d804 	addi	r6,r6,-31904
    3468:	00000206 	br	3474 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
    346c:	19800104 	addi	r6,r3,4
    3470:	10001426 	beq	r2,zero,34c4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x8c>
    3474:	11400017 	ldw	r5,0(r2)
    3478:	1007883a 	mov	r3,r2
    347c:	10800117 	ldw	r2,4(r2)
    3480:	293ffa36 	bltu	r5,r4,346c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
    3484:	290fc83a 	sub	r7,r5,r4
    3488:	3a000228 	cmpgeui	r8,r7,8
    348c:	4000051e 	bne	r8,zero,34a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x6c>
    3490:	19400015 	stw	r5,0(r3)
    3494:	30800015 	stw	r2,0(r6)
    3498:	18800104 	addi	r2,r3,4
    349c:	f800283a 	ret
    34a0:	f800283a 	ret
    34a4:	190b883a 	add	r5,r3,r4
    34a8:	28800115 	stw	r2,4(r5)
    34ac:	30c00017 	ldw	r3,0(r6)
    34b0:	29c00015 	stw	r7,0(r5)
    34b4:	19000015 	stw	r4,0(r3)
    34b8:	31400015 	stw	r5,0(r6)
    34bc:	18800104 	addi	r2,r3,4
    34c0:	f800283a 	ret
    34c4:	f800283a 	ret

000034c8 <__cxa_allocate_exception>:
    34c8:	defffe04 	addi	sp,sp,-8
    34cc:	dc000015 	stw	r16,0(sp)
    34d0:	24001104 	addi	r16,r4,68
    34d4:	8009883a 	mov	r4,r16
    34d8:	dfc00115 	stw	ra,4(sp)
    34dc:	00044d40 	call	44d4 <malloc>
    34e0:	1007883a 	mov	r3,r2
    34e4:	10000926 	beq	r2,zero,350c <__cxa_allocate_exception+0x44>
    34e8:	01801104 	movi	r6,68
    34ec:	000b883a 	mov	r5,zero
    34f0:	1809883a 	mov	r4,r3
    34f4:	000457c0 	call	457c <memset>
    34f8:	10801104 	addi	r2,r2,68
    34fc:	dfc00117 	ldw	ra,4(sp)
    3500:	dc000017 	ldw	r16,0(sp)
    3504:	dec00204 	addi	sp,sp,8
    3508:	f800283a 	ret
    350c:	8009883a 	mov	r4,r16
    3510:	00034380 	call	3438 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
    3514:	1007883a 	mov	r3,r2
    3518:	103ff31e 	bne	r2,zero,34e8 <__cxa_allocate_exception+0x20>
    351c:	000316c0 	call	316c <_ZSt9terminatev>

00003520 <__cxa_free_exception>:
    3520:	00800074 	movhi	r2,1
    3524:	10a0d704 	addi	r2,r2,-31908
    3528:	10c00217 	ldw	r3,8(r2)
    352c:	213fef04 	addi	r4,r4,-68
    3530:	1900042e 	bgeu	r3,r4,3544 <__cxa_free_exception+0x24>
    3534:	10800317 	ldw	r2,12(r2)
    3538:	1887883a 	add	r3,r3,r2
    353c:	20c0012e 	bgeu	r4,r3,3544 <__cxa_free_exception+0x24>
    3540:	000336c1 	jmpi	336c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
    3544:	00044e41 	jmpi	44e4 <free>

00003548 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
    3548:	defffd04 	addi	sp,sp,-12
    354c:	dc000015 	stw	r16,0(sp)
    3550:	04000074 	movhi	r16,1
    3554:	dc400115 	stw	r17,4(sp)
    3558:	8420d704 	addi	r16,r16,-31908
    355c:	04424004 	movi	r17,2304
    3560:	01024004 	movi	r4,2304
    3564:	dfc00215 	stw	ra,8(sp)
    3568:	84400315 	stw	r17,12(r16)
    356c:	00044d40 	call	44d4 <malloc>
    3570:	80800215 	stw	r2,8(r16)
    3574:	10000826 	beq	r2,zero,3598 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x50>
    3578:	80800115 	stw	r2,4(r16)
    357c:	14400015 	stw	r17,0(r2)
    3580:	10000115 	stw	zero,4(r2)
    3584:	dfc00217 	ldw	ra,8(sp)
    3588:	dc400117 	ldw	r17,4(sp)
    358c:	dc000017 	ldw	r16,0(sp)
    3590:	dec00304 	addi	sp,sp,12
    3594:	f800283a 	ret
    3598:	00800074 	movhi	r2,1
    359c:	1020da15 	stw	zero,-31896(r2)
    35a0:	00800074 	movhi	r2,1
    35a4:	1020d815 	stw	zero,-31904(r2)
    35a8:	003ff606 	br	3584 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x3c>

000035ac <__cxa_call_terminate>:
    35ac:	defffe04 	addi	sp,sp,-8
    35b0:	dfc00115 	stw	ra,4(sp)
    35b4:	dc000015 	stw	r16,0(sp)
    35b8:	20000d26 	beq	r4,zero,35f0 <__cxa_call_terminate+0x44>
    35bc:	2021883a 	mov	r16,r4
    35c0:	00036040 	call	3604 <__cxa_begin_catch>
    35c4:	80800017 	ldw	r2,0(r16)
    35c8:	81000117 	ldw	r4,4(r16)
    35cc:	00ef3574 	movhi	r3,48341
    35d0:	18f54004 	addi	r3,r3,-11008
    35d4:	016e2cb4 	movhi	r5,47282
    35d8:	296aaf04 	addi	r5,r5,-21828
    35dc:	10c7883a 	add	r3,r2,r3
    35e0:	1885803a 	cmpltu	r2,r3,r2
    35e4:	2149883a 	add	r4,r4,r5
    35e8:	1105883a 	add	r2,r2,r4
    35ec:	10000126 	beq	r2,zero,35f4 <__cxa_call_terminate+0x48>
    35f0:	000316c0 	call	316c <_ZSt9terminatev>
    35f4:	18c000a8 	cmpgeui	r3,r3,2
    35f8:	183ffd1e 	bne	r3,zero,35f0 <__cxa_call_terminate+0x44>
    35fc:	813ff817 	ldw	r4,-32(r16)
    3600:	00030a40 	call	30a4 <_ZN10__cxxabiv111__terminateEPFvvE>

00003604 <__cxa_begin_catch>:
    3604:	defffe04 	addi	sp,sp,-8
    3608:	dc000015 	stw	r16,0(sp)
    360c:	dfc00115 	stw	ra,4(sp)
    3610:	2021883a 	mov	r16,r4
    3614:	00037940 	call	3794 <__cxa_get_globals>
    3618:	80c00017 	ldw	r3,0(r16)
    361c:	81800117 	ldw	r6,4(r16)
    3620:	012f3574 	movhi	r4,48341
    3624:	21354004 	addi	r4,r4,-11008
    3628:	016e2cb4 	movhi	r5,47282
    362c:	296aaf04 	addi	r5,r5,-21828
    3630:	1909883a 	add	r4,r3,r4
    3634:	314d883a 	add	r6,r6,r5
    3638:	20c7803a 	cmpltu	r3,r4,r3
    363c:	1987883a 	add	r3,r3,r6
    3640:	100b883a 	mov	r5,r2
    3644:	81bff504 	addi	r6,r16,-44
    3648:	10800017 	ldw	r2,0(r2)
    364c:	18000626 	beq	r3,zero,3668 <__cxa_begin_catch+0x64>
    3650:	1000191e 	bne	r2,zero,36b8 <__cxa_begin_catch+0xb4>
    3654:	29800015 	stw	r6,0(r5)
    3658:	dfc00117 	ldw	ra,4(sp)
    365c:	dc000017 	ldw	r16,0(sp)
    3660:	dec00204 	addi	sp,sp,8
    3664:	f800283a 	ret
    3668:	210000a8 	cmpgeui	r4,r4,2
    366c:	203ff81e 	bne	r4,zero,3650 <__cxa_begin_catch+0x4c>
    3670:	80fffa17 	ldw	r3,-24(r16)
    3674:	18000d16 	blt	r3,zero,36ac <__cxa_begin_catch+0xa8>
    3678:	18c00044 	addi	r3,r3,1
    367c:	29000117 	ldw	r4,4(r5)
    3680:	80fffa15 	stw	r3,-24(r16)
    3684:	20ffffc4 	addi	r3,r4,-1
    3688:	28c00115 	stw	r3,4(r5)
    368c:	11800226 	beq	r2,r6,3698 <__cxa_begin_catch+0x94>
    3690:	80bff915 	stw	r2,-28(r16)
    3694:	29800015 	stw	r6,0(r5)
    3698:	80bfff17 	ldw	r2,-4(r16)
    369c:	dfc00117 	ldw	ra,4(sp)
    36a0:	dc000017 	ldw	r16,0(sp)
    36a4:	dec00204 	addi	sp,sp,8
    36a8:	f800283a 	ret
    36ac:	01000044 	movi	r4,1
    36b0:	20c7c83a 	sub	r3,r4,r3
    36b4:	003ff106 	br	367c <__cxa_begin_catch+0x78>
    36b8:	000316c0 	call	316c <_ZSt9terminatev>

000036bc <__cxa_end_catch>:
    36bc:	deffff04 	addi	sp,sp,-4
    36c0:	dfc00015 	stw	ra,0(sp)
    36c4:	00037880 	call	3788 <__cxa_get_globals_fast>
    36c8:	11000017 	ldw	r4,0(r2)
    36cc:	20001426 	beq	r4,zero,3720 <__cxa_end_catch+0x64>
    36d0:	20c00b17 	ldw	r3,44(r4)
    36d4:	21800c17 	ldw	r6,48(r4)
    36d8:	016f3574 	movhi	r5,48341
    36dc:	29754004 	addi	r5,r5,-11008
    36e0:	01ee2cb4 	movhi	r7,47282
    36e4:	39eaaf04 	addi	r7,r7,-21828
    36e8:	194b883a 	add	r5,r3,r5
    36ec:	28c7803a 	cmpltu	r3,r5,r3
    36f0:	31cd883a 	add	r6,r6,r7
    36f4:	1987883a 	add	r3,r3,r6
    36f8:	1800111e 	bne	r3,zero,3740 <__cxa_end_catch+0x84>
    36fc:	294000a8 	cmpgeui	r5,r5,2
    3700:	28000f1e 	bne	r5,zero,3740 <__cxa_end_catch+0x84>
    3704:	20c00517 	ldw	r3,20(r4)
    3708:	18000816 	blt	r3,zero,372c <__cxa_end_catch+0x70>
    370c:	18ffffc4 	addi	r3,r3,-1
    3710:	18001026 	beq	r3,zero,3754 <__cxa_end_catch+0x98>
    3714:	18bfffd8 	cmpnei	r2,r3,-1
    3718:	10001426 	beq	r2,zero,376c <__cxa_end_catch+0xb0>
    371c:	20c00515 	stw	r3,20(r4)
    3720:	dfc00017 	ldw	ra,0(sp)
    3724:	dec00104 	addi	sp,sp,4
    3728:	f800283a 	ret
    372c:	18c00044 	addi	r3,r3,1
    3730:	183ffa1e 	bne	r3,zero,371c <__cxa_end_catch+0x60>
    3734:	21400417 	ldw	r5,16(r4)
    3738:	11400015 	stw	r5,0(r2)
    373c:	003ff706 	br	371c <__cxa_end_catch+0x60>
    3740:	21000b04 	addi	r4,r4,44
    3744:	10000015 	stw	zero,0(r2)
    3748:	dfc00017 	ldw	ra,0(sp)
    374c:	dec00104 	addi	sp,sp,4
    3750:	000441c1 	jmpi	441c <_Unwind_DeleteException>
    3754:	20c00417 	ldw	r3,16(r4)
    3758:	21000b04 	addi	r4,r4,44
    375c:	10c00015 	stw	r3,0(r2)
    3760:	dfc00017 	ldw	ra,0(sp)
    3764:	dec00104 	addi	sp,sp,4
    3768:	000441c1 	jmpi	441c <_Unwind_DeleteException>
    376c:	000316c0 	call	316c <_ZSt9terminatev>

00003770 <_ZNSt13bad_exceptionD1Ev>:
    3770:	f800283a 	ret

00003774 <_ZGTtNKSt13bad_exception4whatEv>:
    3774:	00800034 	movhi	r2,0
    3778:	1097d504 	addi	r2,r2,24404
    377c:	f800283a 	ret

00003780 <_ZNSt13bad_exceptionD0Ev>:
    3780:	01400104 	movi	r5,4
    3784:	0003d181 	jmpi	3d18 <_ZdlPvj>

00003788 <__cxa_get_globals_fast>:
    3788:	00800074 	movhi	r2,1
    378c:	10a0b304 	addi	r2,r2,-32052
    3790:	f800283a 	ret

00003794 <__cxa_get_globals>:
    3794:	00800074 	movhi	r2,1
    3798:	10a0b304 	addi	r2,r2,-32052
    379c:	f800283a 	ret

000037a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    37a0:	00800034 	movhi	r2,0
    37a4:	10980b04 	addi	r2,r2,24620
    37a8:	20800015 	stw	r2,0(r4)
    37ac:	0003b041 	jmpi	3b04 <_ZN10__cxxabiv117__class_type_infoD1Ev>

000037b0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    37b0:	defffe04 	addi	sp,sp,-8
    37b4:	00800034 	movhi	r2,0
    37b8:	dc000015 	stw	r16,0(sp)
    37bc:	dfc00115 	stw	ra,4(sp)
    37c0:	10980b04 	addi	r2,r2,24620
    37c4:	20800015 	stw	r2,0(r4)
    37c8:	2021883a 	mov	r16,r4
    37cc:	0003b040 	call	3b04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    37d0:	01400304 	movi	r5,12
    37d4:	8009883a 	mov	r4,r16
    37d8:	dfc00117 	ldw	ra,4(sp)
    37dc:	dc000017 	ldw	r16,0(sp)
    37e0:	dec00204 	addi	sp,sp,8
    37e4:	0003d181 	jmpi	3d18 <_ZdlPvj>

000037e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    37e8:	defff504 	addi	sp,sp,-44
    37ec:	dcc00415 	stw	r19,16(sp)
    37f0:	38800117 	ldw	r2,4(r7)
    37f4:	24c00117 	ldw	r19,4(r4)
    37f8:	df000915 	stw	fp,36(sp)
    37fc:	dd800715 	stw	r22,28(sp)
    3800:	dd400615 	stw	r21,24(sp)
    3804:	dd000515 	stw	r20,20(sp)
    3808:	dc000115 	stw	r16,4(sp)
    380c:	dfc00a15 	stw	ra,40(sp)
    3810:	ddc00815 	stw	r23,32(sp)
    3814:	dc800315 	stw	r18,12(sp)
    3818:	dc400215 	stw	r17,8(sp)
    381c:	dd000b17 	ldw	r20,44(sp)
    3820:	df000c17 	ldw	fp,48(sp)
    3824:	dd800d17 	ldw	r22,52(sp)
    3828:	dd400e17 	ldw	r21,56(sp)
    382c:	2821883a 	mov	r16,r5
    3830:	98800b26 	beq	r19,r2,3860 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
    3834:	9dc00007 	ldb	r23,0(r19)
    3838:	2025883a 	mov	r18,r4
    383c:	3823883a 	mov	r17,r7
    3840:	b8c00aa0 	cmpeqi	r3,r23,42
    3844:	18001a1e 	bne	r3,zero,38b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
    3848:	100b883a 	mov	r5,r2
    384c:	9809883a 	mov	r4,r19
    3850:	d9800015 	stw	r6,0(sp)
    3854:	00049a00 	call	49a0 <strcmp>
    3858:	d9800017 	ldw	r6,0(sp)
    385c:	1000141e 	bne	r2,zero,38b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
    3860:	ad000015 	stw	r20,0(r21)
    3864:	a9800115 	stw	r6,4(r21)
    3868:	80003416 	blt	r16,zero,393c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
    386c:	a421883a 	add	r16,r20,r16
    3870:	b4003026 	beq	r22,r16,3934 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
    3874:	00800044 	movi	r2,1
    3878:	a8800315 	stw	r2,12(r21)
    387c:	0005883a 	mov	r2,zero
    3880:	dfc00a17 	ldw	ra,40(sp)
    3884:	df000917 	ldw	fp,36(sp)
    3888:	ddc00817 	ldw	r23,32(sp)
    388c:	dd800717 	ldw	r22,28(sp)
    3890:	dd400617 	ldw	r21,24(sp)
    3894:	dd000517 	ldw	r20,20(sp)
    3898:	dcc00417 	ldw	r19,16(sp)
    389c:	dc800317 	ldw	r18,12(sp)
    38a0:	dc400217 	ldw	r17,8(sp)
    38a4:	dc000117 	ldw	r16,4(sp)
    38a8:	dec00b04 	addi	sp,sp,44
    38ac:	f800283a 	ret
    38b0:	a5801526 	beq	r20,r22,3908 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
    38b4:	91000217 	ldw	r4,8(r18)
    38b8:	880f883a 	mov	r7,r17
    38bc:	800b883a 	mov	r5,r16
    38c0:	20800017 	ldw	r2,0(r4)
    38c4:	dd400e15 	stw	r21,56(sp)
    38c8:	dd800d15 	stw	r22,52(sp)
    38cc:	df000c15 	stw	fp,48(sp)
    38d0:	dd000b15 	stw	r20,44(sp)
    38d4:	10800717 	ldw	r2,28(r2)
    38d8:	dfc00a17 	ldw	ra,40(sp)
    38dc:	df000917 	ldw	fp,36(sp)
    38e0:	ddc00817 	ldw	r23,32(sp)
    38e4:	dd800717 	ldw	r22,28(sp)
    38e8:	dd400617 	ldw	r21,24(sp)
    38ec:	dd000517 	ldw	r20,20(sp)
    38f0:	dcc00417 	ldw	r19,16(sp)
    38f4:	dc800317 	ldw	r18,12(sp)
    38f8:	dc400217 	ldw	r17,8(sp)
    38fc:	dc000117 	ldw	r16,4(sp)
    3900:	dec00b04 	addi	sp,sp,44
    3904:	1000683a 	jmp	r2
    3908:	e1400117 	ldw	r5,4(fp)
    390c:	99400726 	beq	r19,r5,392c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x144>
    3910:	bdc00aa0 	cmpeqi	r23,r23,42
    3914:	b83fe71e 	bne	r23,zero,38b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    3918:	9809883a 	mov	r4,r19
    391c:	d9800015 	stw	r6,0(sp)
    3920:	00049a00 	call	49a0 <strcmp>
    3924:	d9800017 	ldw	r6,0(sp)
    3928:	103fe21e 	bne	r2,zero,38b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    392c:	a9800215 	stw	r6,8(r21)
    3930:	003fd206 	br	387c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
    3934:	00800184 	movi	r2,6
    3938:	003fcf06 	br	3878 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
    393c:	843fff98 	cmpnei	r16,r16,-2
    3940:	803fce1e 	bne	r16,zero,387c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
    3944:	003fcb06 	br	3874 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>

00003948 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    3948:	defffa04 	addi	sp,sp,-24
    394c:	dc800415 	stw	r18,16(sp)
    3950:	dc800617 	ldw	r18,24(sp)
    3954:	dc400315 	stw	r17,12(sp)
    3958:	dc000215 	stw	r16,8(sp)
    395c:	dfc00515 	stw	ra,20(sp)
    3960:	2021883a 	mov	r16,r4
    3964:	2823883a 	mov	r17,r5
    3968:	91800b26 	beq	r18,r6,3998 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    396c:	81000217 	ldw	r4,8(r16)
    3970:	880b883a 	mov	r5,r17
    3974:	20800017 	ldw	r2,0(r4)
    3978:	dc800615 	stw	r18,24(sp)
    397c:	10800817 	ldw	r2,32(r2)
    3980:	dfc00517 	ldw	ra,20(sp)
    3984:	dc800417 	ldw	r18,16(sp)
    3988:	dc400317 	ldw	r17,12(sp)
    398c:	dc000217 	ldw	r16,8(sp)
    3990:	dec00604 	addi	sp,sp,24
    3994:	1000683a 	jmp	r2
    3998:	21000117 	ldw	r4,4(r4)
    399c:	39400117 	ldw	r5,4(r7)
    39a0:	21400926 	beq	r4,r5,39c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    39a4:	20800007 	ldb	r2,0(r4)
    39a8:	10800aa0 	cmpeqi	r2,r2,42
    39ac:	103fef1e 	bne	r2,zero,396c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
    39b0:	d9c00115 	stw	r7,4(sp)
    39b4:	d9800015 	stw	r6,0(sp)
    39b8:	00049a00 	call	49a0 <strcmp>
    39bc:	d9800017 	ldw	r6,0(sp)
    39c0:	d9c00117 	ldw	r7,4(sp)
    39c4:	103fe91e 	bne	r2,zero,396c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
    39c8:	00800184 	movi	r2,6
    39cc:	dfc00517 	ldw	ra,20(sp)
    39d0:	dc800417 	ldw	r18,16(sp)
    39d4:	dc400317 	ldw	r17,12(sp)
    39d8:	dc000217 	ldw	r16,8(sp)
    39dc:	dec00604 	addi	sp,sp,24
    39e0:	f800283a 	ret

000039e4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    39e4:	defffb04 	addi	sp,sp,-20
    39e8:	dcc00315 	stw	r19,12(sp)
    39ec:	dc800215 	stw	r18,8(sp)
    39f0:	dc400115 	stw	r17,4(sp)
    39f4:	dc000015 	stw	r16,0(sp)
    39f8:	dfc00415 	stw	ra,16(sp)
    39fc:	2025883a 	mov	r18,r4
    3a00:	2827883a 	mov	r19,r5
    3a04:	3021883a 	mov	r16,r6
    3a08:	3823883a 	mov	r17,r7
    3a0c:	0003b4c0 	call	3b4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    3a10:	10c03fcc 	andi	r3,r2,255
    3a14:	18000d1e 	bne	r3,zero,3a4c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
    3a18:	91000217 	ldw	r4,8(r18)
    3a1c:	880f883a 	mov	r7,r17
    3a20:	800d883a 	mov	r6,r16
    3a24:	20800017 	ldw	r2,0(r4)
    3a28:	980b883a 	mov	r5,r19
    3a2c:	10800617 	ldw	r2,24(r2)
    3a30:	dfc00417 	ldw	ra,16(sp)
    3a34:	dcc00317 	ldw	r19,12(sp)
    3a38:	dc800217 	ldw	r18,8(sp)
    3a3c:	dc400117 	ldw	r17,4(sp)
    3a40:	dc000017 	ldw	r16,0(sp)
    3a44:	dec00504 	addi	sp,sp,20
    3a48:	1000683a 	jmp	r2
    3a4c:	dfc00417 	ldw	ra,16(sp)
    3a50:	dcc00317 	ldw	r19,12(sp)
    3a54:	dc800217 	ldw	r18,8(sp)
    3a58:	dc400117 	ldw	r17,4(sp)
    3a5c:	dc000017 	ldw	r16,0(sp)
    3a60:	dec00504 	addi	sp,sp,20
    3a64:	f800283a 	ret

00003a68 <_ZNSt9type_infoD1Ev>:
    3a68:	f800283a 	ret

00003a6c <_ZNKSt9type_info14__is_pointer_pEv>:
    3a6c:	0005883a 	mov	r2,zero
    3a70:	f800283a 	ret

00003a74 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    3a74:	20800017 	ldw	r2,0(r4)
    3a78:	defffa04 	addi	sp,sp,-24
    3a7c:	dc000415 	stw	r16,16(sp)
    3a80:	10800617 	ldw	r2,24(r2)
    3a84:	3021883a 	mov	r16,r6
    3a88:	31800017 	ldw	r6,0(r6)
    3a8c:	00c00404 	movi	r3,16
    3a90:	dfc00515 	stw	ra,20(sp)
    3a94:	d8000015 	stw	zero,0(sp)
    3a98:	d8000115 	stw	zero,4(sp)
    3a9c:	d8c00215 	stw	r3,8(sp)
    3aa0:	d8000315 	stw	zero,12(sp)
    3aa4:	d80f883a 	mov	r7,sp
    3aa8:	103ee83a 	callr	r2
    3aac:	d8800117 	ldw	r2,4(sp)
    3ab0:	1080018c 	andi	r2,r2,6
    3ab4:	10800198 	cmpnei	r2,r2,6
    3ab8:	1000071e 	bne	r2,zero,3ad8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x64>
    3abc:	d8c00017 	ldw	r3,0(sp)
    3ac0:	00800044 	movi	r2,1
    3ac4:	80c00015 	stw	r3,0(r16)
    3ac8:	dfc00517 	ldw	ra,20(sp)
    3acc:	dc000417 	ldw	r16,16(sp)
    3ad0:	dec00604 	addi	sp,sp,24
    3ad4:	f800283a 	ret
    3ad8:	0005883a 	mov	r2,zero
    3adc:	dfc00517 	ldw	ra,20(sp)
    3ae0:	dc000417 	ldw	r16,16(sp)
    3ae4:	dec00604 	addi	sp,sp,24
    3ae8:	f800283a 	ret

00003aec <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    3aec:	d8c00017 	ldw	r3,0(sp)
    3af0:	00800044 	movi	r2,1
    3af4:	19800126 	beq	r3,r6,3afc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    3af8:	f800283a 	ret
    3afc:	00800184 	movi	r2,6
    3b00:	f800283a 	ret

00003b04 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    3b04:	00800034 	movhi	r2,0
    3b08:	10982604 	addi	r2,r2,24728
    3b0c:	20800015 	stw	r2,0(r4)
    3b10:	0003a681 	jmpi	3a68 <_ZNSt9type_infoD1Ev>

00003b14 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    3b14:	defffe04 	addi	sp,sp,-8
    3b18:	00800034 	movhi	r2,0
    3b1c:	dc000015 	stw	r16,0(sp)
    3b20:	dfc00115 	stw	ra,4(sp)
    3b24:	10982604 	addi	r2,r2,24728
    3b28:	20800015 	stw	r2,0(r4)
    3b2c:	2021883a 	mov	r16,r4
    3b30:	0003a680 	call	3a68 <_ZNSt9type_infoD1Ev>
    3b34:	01400204 	movi	r5,8
    3b38:	8009883a 	mov	r4,r16
    3b3c:	dfc00117 	ldw	ra,4(sp)
    3b40:	dc000017 	ldw	r16,0(sp)
    3b44:	dec00204 	addi	sp,sp,8
    3b48:	0003d181 	jmpi	3d18 <_ZdlPvj>

00003b4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    3b4c:	21000117 	ldw	r4,4(r4)
    3b50:	29400117 	ldw	r5,4(r5)
    3b54:	defffd04 	addi	sp,sp,-12
    3b58:	dc400115 	stw	r17,4(sp)
    3b5c:	dc000015 	stw	r16,0(sp)
    3b60:	dfc00215 	stw	ra,8(sp)
    3b64:	3023883a 	mov	r17,r6
    3b68:	3821883a 	mov	r16,r7
    3b6c:	21400526 	beq	r4,r5,3b84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    3b70:	20800007 	ldb	r2,0(r4)
    3b74:	10800aa0 	cmpeqi	r2,r2,42
    3b78:	10000d1e 	bne	r2,zero,3bb0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    3b7c:	00049a00 	call	49a0 <strcmp>
    3b80:	10000b1e 	bne	r2,zero,3bb0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    3b84:	00800204 	movi	r2,8
    3b88:	80800315 	stw	r2,12(r16)
    3b8c:	00800184 	movi	r2,6
    3b90:	80800115 	stw	r2,4(r16)
    3b94:	84400015 	stw	r17,0(r16)
    3b98:	00800044 	movi	r2,1
    3b9c:	dfc00217 	ldw	ra,8(sp)
    3ba0:	dc400117 	ldw	r17,4(sp)
    3ba4:	dc000017 	ldw	r16,0(sp)
    3ba8:	dec00304 	addi	sp,sp,12
    3bac:	f800283a 	ret
    3bb0:	0005883a 	mov	r2,zero
    3bb4:	003ff906 	br	3b9c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>

00003bb8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    3bb8:	defffb04 	addi	sp,sp,-20
    3bbc:	dc800315 	stw	r18,12(sp)
    3bc0:	dc400215 	stw	r17,8(sp)
    3bc4:	2025883a 	mov	r18,r4
    3bc8:	2823883a 	mov	r17,r5
    3bcc:	21000117 	ldw	r4,4(r4)
    3bd0:	29400117 	ldw	r5,4(r5)
    3bd4:	dfc00415 	stw	ra,16(sp)
    3bd8:	dc000115 	stw	r16,4(sp)
    3bdc:	21400826 	beq	r4,r5,3c00 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x48>
    3be0:	20800007 	ldb	r2,0(r4)
    3be4:	3821883a 	mov	r16,r7
    3be8:	10800aa0 	cmpeqi	r2,r2,42
    3bec:	10000b1e 	bne	r2,zero,3c1c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    3bf0:	d9800015 	stw	r6,0(sp)
    3bf4:	00049a00 	call	49a0 <strcmp>
    3bf8:	d9800017 	ldw	r6,0(sp)
    3bfc:	1000071e 	bne	r2,zero,3c1c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    3c00:	00800044 	movi	r2,1
    3c04:	dfc00417 	ldw	ra,16(sp)
    3c08:	dc800317 	ldw	r18,12(sp)
    3c0c:	dc400217 	ldw	r17,8(sp)
    3c10:	dc000117 	ldw	r16,4(sp)
    3c14:	dec00504 	addi	sp,sp,20
    3c18:	f800283a 	ret
    3c1c:	81c00128 	cmpgeui	r7,r16,4
    3c20:	38000a1e 	bne	r7,zero,3c4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
    3c24:	88800017 	ldw	r2,0(r17)
    3c28:	900b883a 	mov	r5,r18
    3c2c:	8809883a 	mov	r4,r17
    3c30:	10800517 	ldw	r2,20(r2)
    3c34:	dfc00417 	ldw	ra,16(sp)
    3c38:	dc800317 	ldw	r18,12(sp)
    3c3c:	dc400217 	ldw	r17,8(sp)
    3c40:	dc000117 	ldw	r16,4(sp)
    3c44:	dec00504 	addi	sp,sp,20
    3c48:	1000683a 	jmp	r2
    3c4c:	0005883a 	mov	r2,zero
    3c50:	003fec06 	br	3c04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4c>

00003c54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    3c54:	defffa04 	addi	sp,sp,-24
    3c58:	dc400315 	stw	r17,12(sp)
    3c5c:	d8800817 	ldw	r2,32(sp)
    3c60:	dc400617 	ldw	r17,24(sp)
    3c64:	dc800415 	stw	r18,16(sp)
    3c68:	dc000215 	stw	r16,8(sp)
    3c6c:	dfc00515 	stw	ra,20(sp)
    3c70:	dc800917 	ldw	r18,36(sp)
    3c74:	21000117 	ldw	r4,4(r4)
    3c78:	3021883a 	mov	r16,r6
    3c7c:	88801226 	beq	r17,r2,3cc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x74>
    3c80:	39400117 	ldw	r5,4(r7)
    3c84:	21400526 	beq	r4,r5,3c9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
    3c88:	20800007 	ldb	r2,0(r4)
    3c8c:	10800aa0 	cmpeqi	r2,r2,42
    3c90:	1000061e 	bne	r2,zero,3cac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
    3c94:	00049a00 	call	49a0 <strcmp>
    3c98:	1000041e 	bne	r2,zero,3cac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
    3c9c:	00800044 	movi	r2,1
    3ca0:	94400015 	stw	r17,0(r18)
    3ca4:	94000115 	stw	r16,4(r18)
    3ca8:	90800315 	stw	r2,12(r18)
    3cac:	0005883a 	mov	r2,zero
    3cb0:	dfc00517 	ldw	ra,20(sp)
    3cb4:	dc800417 	ldw	r18,16(sp)
    3cb8:	dc400317 	ldw	r17,12(sp)
    3cbc:	dc000217 	ldw	r16,8(sp)
    3cc0:	dec00604 	addi	sp,sp,24
    3cc4:	f800283a 	ret
    3cc8:	d8800717 	ldw	r2,28(sp)
    3ccc:	11400117 	ldw	r5,4(r2)
    3cd0:	21400f26 	beq	r4,r5,3d10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
    3cd4:	20800007 	ldb	r2,0(r4)
    3cd8:	10800aa0 	cmpeqi	r2,r2,42
    3cdc:	1000091e 	bne	r2,zero,3d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    3ce0:	d9c00115 	stw	r7,4(sp)
    3ce4:	d9000015 	stw	r4,0(sp)
    3ce8:	00049a00 	call	49a0 <strcmp>
    3cec:	d9000017 	ldw	r4,0(sp)
    3cf0:	d9c00117 	ldw	r7,4(sp)
    3cf4:	10000626 	beq	r2,zero,3d10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
    3cf8:	39400117 	ldw	r5,4(r7)
    3cfc:	217fe51e 	bne	r4,r5,3c94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x40>
    3d00:	003fe606 	br	3c9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
    3d04:	38800117 	ldw	r2,4(r7)
    3d08:	20bfe81e 	bne	r4,r2,3cac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
    3d0c:	003fe306 	br	3c9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
    3d10:	94000215 	stw	r16,8(r18)
    3d14:	003fe506 	br	3cac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>

00003d18 <_ZdlPvj>:
    3d18:	0003d1c1 	jmpi	3d1c <_ZdlPv>

00003d1c <_ZdlPv>:
    3d1c:	00044e41 	jmpi	44e4 <free>

00003d20 <fmaxf>:
    3d20:	defffd04 	addi	sp,sp,-12
    3d24:	dc400115 	stw	r17,4(sp)
    3d28:	dc000015 	stw	r16,0(sp)
    3d2c:	dfc00215 	stw	ra,8(sp)
    3d30:	2023883a 	mov	r17,r4
    3d34:	2821883a 	mov	r16,r5
    3d38:	0003dd80 	call	3dd8 <__fpclassifyf>
    3d3c:	1000061e 	bne	r2,zero,3d58 <fmaxf+0x38>
    3d40:	8005883a 	mov	r2,r16
    3d44:	dfc00217 	ldw	ra,8(sp)
    3d48:	dc400117 	ldw	r17,4(sp)
    3d4c:	dc000017 	ldw	r16,0(sp)
    3d50:	dec00304 	addi	sp,sp,12
    3d54:	f800283a 	ret
    3d58:	8009883a 	mov	r4,r16
    3d5c:	0003dd80 	call	3dd8 <__fpclassifyf>
    3d60:	10000426 	beq	r2,zero,3d74 <fmaxf+0x54>
    3d64:	800b883a 	mov	r5,r16
    3d68:	8809883a 	mov	r4,r17
    3d6c:	0003e2c0 	call	3e2c <__gesf2>
    3d70:	00bff30e 	bge	zero,r2,3d40 <fmaxf+0x20>
    3d74:	8805883a 	mov	r2,r17
    3d78:	003ff206 	br	3d44 <fmaxf+0x24>

00003d7c <fminf>:
    3d7c:	defffd04 	addi	sp,sp,-12
    3d80:	dc400115 	stw	r17,4(sp)
    3d84:	dc000015 	stw	r16,0(sp)
    3d88:	dfc00215 	stw	ra,8(sp)
    3d8c:	2023883a 	mov	r17,r4
    3d90:	2821883a 	mov	r16,r5
    3d94:	0003dd80 	call	3dd8 <__fpclassifyf>
    3d98:	1000061e 	bne	r2,zero,3db4 <fminf+0x38>
    3d9c:	8005883a 	mov	r2,r16
    3da0:	dfc00217 	ldw	ra,8(sp)
    3da4:	dc400117 	ldw	r17,4(sp)
    3da8:	dc000017 	ldw	r16,0(sp)
    3dac:	dec00304 	addi	sp,sp,12
    3db0:	f800283a 	ret
    3db4:	8009883a 	mov	r4,r16
    3db8:	0003dd80 	call	3dd8 <__fpclassifyf>
    3dbc:	10000426 	beq	r2,zero,3dd0 <fminf+0x54>
    3dc0:	800b883a 	mov	r5,r16
    3dc4:	8809883a 	mov	r4,r17
    3dc8:	0003ee40 	call	3ee4 <__lesf2>
    3dcc:	103ff30e 	bge	r2,zero,3d9c <fminf+0x20>
    3dd0:	8805883a 	mov	r2,r17
    3dd4:	003ff206 	br	3da0 <fminf+0x24>

00003dd8 <__fpclassifyf>:
    3dd8:	00a00034 	movhi	r2,32768
    3ddc:	10bfffc4 	addi	r2,r2,-1
    3de0:	2088703a 	and	r4,r4,r2
    3de4:	20000b26 	beq	r4,zero,3e14 <__fpclassifyf+0x3c>
    3de8:	00bfe034 	movhi	r2,65408
    3dec:	2085883a 	add	r2,r4,r2
    3df0:	00dfc034 	movhi	r3,32512
    3df4:	10c00b36 	bltu	r2,r3,3e24 <__fpclassifyf+0x4c>
    3df8:	00c02034 	movhi	r3,128
    3dfc:	20bfffc4 	addi	r2,r4,-1
    3e00:	18ffff84 	addi	r3,r3,-2
    3e04:	1880052e 	bgeu	r3,r2,3e1c <__fpclassifyf+0x44>
    3e08:	009fe034 	movhi	r2,32640
    3e0c:	2085003a 	cmpeq	r2,r4,r2
    3e10:	f800283a 	ret
    3e14:	00800084 	movi	r2,2
    3e18:	f800283a 	ret
    3e1c:	008000c4 	movi	r2,3
    3e20:	f800283a 	ret
    3e24:	00800104 	movi	r2,4
    3e28:	f800283a 	ret

00003e2c <__gesf2>:
    3e2c:	200cd5fa 	srli	r6,r4,23
    3e30:	280ed5fa 	srli	r7,r5,23
    3e34:	00c02034 	movhi	r3,128
    3e38:	31803fcc 	andi	r6,r6,255
    3e3c:	18ffffc4 	addi	r3,r3,-1
    3e40:	32003fd8 	cmpnei	r8,r6,255
    3e44:	2012d7fa 	srli	r9,r4,31
    3e48:	2804d7fa 	srli	r2,r5,31
    3e4c:	1908703a 	and	r4,r3,r4
    3e50:	1946703a 	and	r3,r3,r5
    3e54:	39403fcc 	andi	r5,r7,255
    3e58:	40000826 	beq	r8,zero,3e7c <__gesf2+0x50>
    3e5c:	29c03fd8 	cmpnei	r7,r5,255
    3e60:	38000926 	beq	r7,zero,3e88 <__gesf2+0x5c>
    3e64:	3000121e 	bne	r6,zero,3eb0 <__gesf2+0x84>
    3e68:	28000e1e 	bne	r5,zero,3ea4 <__gesf2+0x78>
    3e6c:	18000d1e 	bne	r3,zero,3ea4 <__gesf2+0x78>
    3e70:	2000081e 	bne	r4,zero,3e94 <__gesf2+0x68>
    3e74:	0005883a 	mov	r2,zero
    3e78:	f800283a 	ret
    3e7c:	2000171e 	bne	r4,zero,3edc <__gesf2+0xb0>
    3e80:	29c03fe0 	cmpeqi	r7,r5,255
    3e84:	38000a26 	beq	r7,zero,3eb0 <__gesf2+0x84>
    3e88:	1800141e 	bne	r3,zero,3edc <__gesf2+0xb0>
    3e8c:	30000526 	beq	r6,zero,3ea4 <__gesf2+0x78>
    3e90:	48800a26 	beq	r9,r2,3ebc <__gesf2+0x90>
    3e94:	00800044 	movi	r2,1
    3e98:	48000426 	beq	r9,zero,3eac <__gesf2+0x80>
    3e9c:	00bfffc4 	movi	r2,-1
    3ea0:	f800283a 	ret
    3ea4:	203ffa1e 	bne	r4,zero,3e90 <__gesf2+0x64>
    3ea8:	103ffc26 	beq	r2,zero,3e9c <__gesf2+0x70>
    3eac:	f800283a 	ret
    3eb0:	283ff71e 	bne	r5,zero,3e90 <__gesf2+0x64>
    3eb4:	183ff61e 	bne	r3,zero,3e90 <__gesf2+0x64>
    3eb8:	003ff606 	br	3e94 <__gesf2+0x68>
    3ebc:	29800416 	blt	r5,r6,3ed0 <__gesf2+0xa4>
    3ec0:	317ff916 	blt	r6,r5,3ea8 <__gesf2+0x7c>
    3ec4:	19000236 	bltu	r3,r4,3ed0 <__gesf2+0xa4>
    3ec8:	20ffea2e 	bgeu	r4,r3,3e74 <__gesf2+0x48>
    3ecc:	003ff606 	br	3ea8 <__gesf2+0x7c>
    3ed0:	103ff21e 	bne	r2,zero,3e9c <__gesf2+0x70>
    3ed4:	00800044 	movi	r2,1
    3ed8:	f800283a 	ret
    3edc:	00bfff84 	movi	r2,-2
    3ee0:	f800283a 	ret

00003ee4 <__lesf2>:
    3ee4:	200cd5fa 	srli	r6,r4,23
    3ee8:	280ed5fa 	srli	r7,r5,23
    3eec:	00c02034 	movhi	r3,128
    3ef0:	31803fcc 	andi	r6,r6,255
    3ef4:	18ffffc4 	addi	r3,r3,-1
    3ef8:	32003fd8 	cmpnei	r8,r6,255
    3efc:	2012d7fa 	srli	r9,r4,31
    3f00:	2804d7fa 	srli	r2,r5,31
    3f04:	1908703a 	and	r4,r3,r4
    3f08:	1946703a 	and	r3,r3,r5
    3f0c:	39403fcc 	andi	r5,r7,255
    3f10:	40000826 	beq	r8,zero,3f34 <__lesf2+0x50>
    3f14:	29c03fd8 	cmpnei	r7,r5,255
    3f18:	38000926 	beq	r7,zero,3f40 <__lesf2+0x5c>
    3f1c:	3000181e 	bne	r6,zero,3f80 <__lesf2+0x9c>
    3f20:	2800091e 	bne	r5,zero,3f48 <__lesf2+0x64>
    3f24:	1800081e 	bne	r3,zero,3f48 <__lesf2+0x64>
    3f28:	2000091e 	bne	r4,zero,3f50 <__lesf2+0x6c>
    3f2c:	0005883a 	mov	r2,zero
    3f30:	f800283a 	ret
    3f34:	20000a1e 	bne	r4,zero,3f60 <__lesf2+0x7c>
    3f38:	29c03fe0 	cmpeqi	r7,r5,255
    3f3c:	38001026 	beq	r7,zero,3f80 <__lesf2+0x9c>
    3f40:	1800071e 	bne	r3,zero,3f60 <__lesf2+0x7c>
    3f44:	3000011e 	bne	r6,zero,3f4c <__lesf2+0x68>
    3f48:	20000b26 	beq	r4,zero,3f78 <__lesf2+0x94>
    3f4c:	48800626 	beq	r9,r2,3f68 <__lesf2+0x84>
    3f50:	00800044 	movi	r2,1
    3f54:	48000926 	beq	r9,zero,3f7c <__lesf2+0x98>
    3f58:	00bfffc4 	movi	r2,-1
    3f5c:	f800283a 	ret
    3f60:	00800084 	movi	r2,2
    3f64:	f800283a 	ret
    3f68:	29800816 	blt	r5,r6,3f8c <__lesf2+0xa8>
    3f6c:	31400216 	blt	r6,r5,3f78 <__lesf2+0x94>
    3f70:	19000636 	bltu	r3,r4,3f8c <__lesf2+0xa8>
    3f74:	20ffed2e 	bgeu	r4,r3,3f2c <__lesf2+0x48>
    3f78:	103ff726 	beq	r2,zero,3f58 <__lesf2+0x74>
    3f7c:	f800283a 	ret
    3f80:	283ff21e 	bne	r5,zero,3f4c <__lesf2+0x68>
    3f84:	183ff11e 	bne	r3,zero,3f4c <__lesf2+0x68>
    3f88:	003ff106 	br	3f50 <__lesf2+0x6c>
    3f8c:	103ff21e 	bne	r2,zero,3f58 <__lesf2+0x74>
    3f90:	00800044 	movi	r2,1
    3f94:	f800283a 	ret

00003f98 <_Unwind_ForcedUnwind_Phase2>:
    3f98:	28800017 	ldw	r2,0(r5)
    3f9c:	defff504 	addi	sp,sp,-44
    3fa0:	dd400815 	stw	r21,32(sp)
    3fa4:	dd000715 	stw	r20,28(sp)
    3fa8:	dcc00615 	stw	r19,24(sp)
    3fac:	dc800515 	stw	r18,20(sp)
    3fb0:	dc400415 	stw	r17,16(sp)
    3fb4:	dc000315 	stw	r16,12(sp)
    3fb8:	dfc00a15 	stw	ra,40(sp)
    3fbc:	dd800915 	stw	r22,36(sp)
    3fc0:	302b883a 	mov	r21,r6
    3fc4:	24c00317 	ldw	r19,12(r4)
    3fc8:	25000417 	ldw	r20,16(r4)
    3fcc:	21800017 	ldw	r6,0(r4)
    3fd0:	21c00117 	ldw	r7,4(r4)
    3fd4:	2823883a 	mov	r17,r5
    3fd8:	2021883a 	mov	r16,r4
    3fdc:	04800044 	movi	r18,1
    3fe0:	10001d26 	beq	r2,zero,4058 <_Unwind_ForcedUnwind_Phase2+0xc0>
    3fe4:	15800617 	ldw	r22,24(r2)
    3fe8:	01400284 	movi	r5,10
    3fec:	01000044 	movi	r4,1
    3ff0:	dd000215 	stw	r20,8(sp)
    3ff4:	dc400115 	stw	r17,4(sp)
    3ff8:	dc000015 	stw	r16,0(sp)
    3ffc:	983ee83a 	callr	r19
    4000:	01400284 	movi	r5,10
    4004:	01000044 	movi	r4,1
    4008:	10001a1e 	bne	r2,zero,4074 <_Unwind_ForcedUnwind_Phase2+0xdc>
    400c:	81800017 	ldw	r6,0(r16)
    4010:	81c00117 	ldw	r7,4(r16)
    4014:	b0000926 	beq	r22,zero,403c <_Unwind_ForcedUnwind_Phase2+0xa4>
    4018:	dc400115 	stw	r17,4(sp)
    401c:	dc000015 	stw	r16,0(sp)
    4020:	b03ee83a 	callr	r22
    4024:	10c001e0 	cmpeqi	r3,r2,7
    4028:	11000218 	cmpnei	r4,r2,8
    402c:	18001d1e 	bne	r3,zero,40a4 <_Unwind_ForcedUnwind_Phase2+0x10c>
    4030:	2000101e 	bne	r4,zero,4074 <_Unwind_ForcedUnwind_Phase2+0xdc>
    4034:	81800017 	ldw	r6,0(r16)
    4038:	81c00117 	ldw	r7,4(r16)
    403c:	88800017 	ldw	r2,0(r17)
    4040:	00c00074 	movhi	r3,1
    4044:	94800044 	addi	r18,r18,1
    4048:	10800017 	ldw	r2,0(r2)
    404c:	18a0b515 	stw	r2,-32044(r3)
    4050:	88800015 	stw	r2,0(r17)
    4054:	103fe31e 	bne	r2,zero,3fe4 <_Unwind_ForcedUnwind_Phase2+0x4c>
    4058:	dd000215 	stw	r20,8(sp)
    405c:	dc400115 	stw	r17,4(sp)
    4060:	dc000015 	stw	r16,0(sp)
    4064:	01400684 	movi	r5,26
    4068:	01000044 	movi	r4,1
    406c:	983ee83a 	callr	r19
    4070:	10000b26 	beq	r2,zero,40a0 <_Unwind_ForcedUnwind_Phase2+0x108>
    4074:	00800084 	movi	r2,2
    4078:	dfc00a17 	ldw	ra,40(sp)
    407c:	dd800917 	ldw	r22,36(sp)
    4080:	dd400817 	ldw	r21,32(sp)
    4084:	dd000717 	ldw	r20,28(sp)
    4088:	dcc00617 	ldw	r19,24(sp)
    408c:	dc800517 	ldw	r18,20(sp)
    4090:	dc400417 	ldw	r17,16(sp)
    4094:	dc000317 	ldw	r16,12(sp)
    4098:	dec00b04 	addi	sp,sp,44
    409c:	f800283a 	ret
    40a0:	00800144 	movi	r2,5
    40a4:	ac800015 	stw	r18,0(r21)
    40a8:	003ff306 	br	4078 <_Unwind_ForcedUnwind_Phase2+0xe0>

000040ac <_Unwind_RaiseException_Phase2>:
    40ac:	28800017 	ldw	r2,0(r5)
    40b0:	10002f26 	beq	r2,zero,4170 <_Unwind_RaiseException_Phase2+0xc4>
    40b4:	defff804 	addi	sp,sp,-32
    40b8:	dcc00515 	stw	r19,20(sp)
    40bc:	dc800415 	stw	r18,16(sp)
    40c0:	dc400315 	stw	r17,12(sp)
    40c4:	dc000215 	stw	r16,8(sp)
    40c8:	dfc00715 	stw	ra,28(sp)
    40cc:	dd000615 	stw	r20,24(sp)
    40d0:	2823883a 	mov	r17,r5
    40d4:	2021883a 	mov	r16,r4
    40d8:	3027883a 	mov	r19,r6
    40dc:	04800044 	movi	r18,1
    40e0:	00001306 	br	4130 <_Unwind_RaiseException_Phase2+0x84>
    40e4:	18000e26 	beq	r3,zero,4120 <_Unwind_RaiseException_Phase2+0x74>
    40e8:	01400084 	movi	r5,2
    40ec:	0029883a 	mov	r20,zero
    40f0:	81800017 	ldw	r6,0(r16)
    40f4:	81c00117 	ldw	r7,4(r16)
    40f8:	01000044 	movi	r4,1
    40fc:	dc400115 	stw	r17,4(sp)
    4100:	dc000015 	stw	r16,0(sp)
    4104:	183ee83a 	callr	r3
    4108:	10c001e0 	cmpeqi	r3,r2,7
    410c:	18001a1e 	bne	r3,zero,4178 <_Unwind_RaiseException_Phase2+0xcc>
    4110:	10800218 	cmpnei	r2,r2,8
    4114:	10000d1e 	bne	r2,zero,414c <_Unwind_RaiseException_Phase2+0xa0>
    4118:	a000191e 	bne	r20,zero,4180 <_Unwind_RaiseException_Phase2+0xd4>
    411c:	88800017 	ldw	r2,0(r17)
    4120:	10800017 	ldw	r2,0(r2)
    4124:	94800044 	addi	r18,r18,1
    4128:	88800015 	stw	r2,0(r17)
    412c:	10000726 	beq	r2,zero,414c <_Unwind_RaiseException_Phase2+0xa0>
    4130:	81000417 	ldw	r4,16(r16)
    4134:	10c00617 	ldw	r3,24(r2)
    4138:	113fea1e 	bne	r2,r4,40e4 <_Unwind_RaiseException_Phase2+0x38>
    413c:	18001026 	beq	r3,zero,4180 <_Unwind_RaiseException_Phase2+0xd4>
    4140:	01400184 	movi	r5,6
    4144:	05000104 	movi	r20,4
    4148:	003fe906 	br	40f0 <_Unwind_RaiseException_Phase2+0x44>
    414c:	00800084 	movi	r2,2
    4150:	dfc00717 	ldw	ra,28(sp)
    4154:	dd000617 	ldw	r20,24(sp)
    4158:	dcc00517 	ldw	r19,20(sp)
    415c:	dc800417 	ldw	r18,16(sp)
    4160:	dc400317 	ldw	r17,12(sp)
    4164:	dc000217 	ldw	r16,8(sp)
    4168:	dec00804 	addi	sp,sp,32
    416c:	f800283a 	ret
    4170:	00800084 	movi	r2,2
    4174:	f800283a 	ret
    4178:	9c800015 	stw	r18,0(r19)
    417c:	003ff406 	br	4150 <_Unwind_RaiseException_Phase2+0xa4>
    4180:	00044bc0 	call	44bc <abort>

00004184 <uw_install_context.constprop.0.isra.0>:
    4184:	deffff04 	addi	sp,sp,-4
    4188:	df000015 	stw	fp,0(sp)
    418c:	20800804 	addi	r2,r4,32
    4190:	00c00074 	movhi	r3,1
    4194:	1920b515 	stw	r4,-32044(r3)
    4198:	d839883a 	mov	fp,sp
    419c:	20c00917 	ldw	r3,36(r4)
    41a0:	21000817 	ldw	r4,32(r4)
    41a4:	16c00217 	ldw	sp,8(r2)
    41a8:	2039883a 	mov	fp,r4
    41ac:	1800683a 	jmp	r3

000041b0 <_Unwind_SjLj_Register>:
    41b0:	00800074 	movhi	r2,1
    41b4:	10a0b517 	ldw	r2,-32044(r2)
    41b8:	20800015 	stw	r2,0(r4)
    41bc:	00800074 	movhi	r2,1
    41c0:	1120b515 	stw	r4,-32044(r2)
    41c4:	f800283a 	ret

000041c8 <_Unwind_SjLj_Unregister>:
    41c8:	20c00017 	ldw	r3,0(r4)
    41cc:	00800074 	movhi	r2,1
    41d0:	10e0b515 	stw	r3,-32044(r2)
    41d4:	f800283a 	ret

000041d8 <_Unwind_GetGR>:
    41d8:	29400084 	addi	r5,r5,2
    41dc:	20800017 	ldw	r2,0(r4)
    41e0:	280a90ba 	slli	r5,r5,2
    41e4:	114b883a 	add	r5,r2,r5
    41e8:	28800017 	ldw	r2,0(r5)
    41ec:	f800283a 	ret

000041f0 <_Unwind_GetCFA>:
    41f0:	20800017 	ldw	r2,0(r4)
    41f4:	10000226 	beq	r2,zero,4200 <_Unwind_GetCFA+0x10>
    41f8:	10800a17 	ldw	r2,40(r2)
    41fc:	f800283a 	ret
    4200:	0005883a 	mov	r2,zero
    4204:	f800283a 	ret

00004208 <_Unwind_SetGR>:
    4208:	29400084 	addi	r5,r5,2
    420c:	20800017 	ldw	r2,0(r4)
    4210:	280a90ba 	slli	r5,r5,2
    4214:	114b883a 	add	r5,r2,r5
    4218:	29800015 	stw	r6,0(r5)
    421c:	f800283a 	ret

00004220 <_Unwind_GetIP>:
    4220:	20800017 	ldw	r2,0(r4)
    4224:	10800117 	ldw	r2,4(r2)
    4228:	10800044 	addi	r2,r2,1
    422c:	f800283a 	ret

00004230 <_Unwind_GetIPInfo>:
    4230:	20800017 	ldw	r2,0(r4)
    4234:	28000015 	stw	zero,0(r5)
    4238:	10000326 	beq	r2,zero,4248 <_Unwind_GetIPInfo+0x18>
    423c:	10800117 	ldw	r2,4(r2)
    4240:	10800044 	addi	r2,r2,1
    4244:	f800283a 	ret
    4248:	0005883a 	mov	r2,zero
    424c:	f800283a 	ret

00004250 <_Unwind_SetIP>:
    4250:	20800017 	ldw	r2,0(r4)
    4254:	297fffc4 	addi	r5,r5,-1
    4258:	11400115 	stw	r5,4(r2)
    425c:	f800283a 	ret

00004260 <_Unwind_GetLanguageSpecificData>:
    4260:	20800017 	ldw	r2,0(r4)
    4264:	10800717 	ldw	r2,28(r2)
    4268:	f800283a 	ret

0000426c <_Unwind_GetRegionStart>:
    426c:	0005883a 	mov	r2,zero
    4270:	f800283a 	ret

00004274 <_Unwind_FindEnclosingFunction>:
    4274:	0005883a 	mov	r2,zero
    4278:	f800283a 	ret

0000427c <_Unwind_GetDataRelBase>:
    427c:	0005883a 	mov	r2,zero
    4280:	f800283a 	ret

00004284 <_Unwind_GetTextRelBase>:
    4284:	0005883a 	mov	r2,zero
    4288:	f800283a 	ret

0000428c <_Unwind_SjLj_RaiseException>:
    428c:	defff804 	addi	sp,sp,-32
    4290:	00800074 	movhi	r2,1
    4294:	dc400515 	stw	r17,20(sp)
    4298:	1460b517 	ldw	r17,-32044(r2)
    429c:	dfc00715 	stw	ra,28(sp)
    42a0:	dc800615 	stw	r18,24(sp)
    42a4:	dc000415 	stw	r16,16(sp)
    42a8:	dc400215 	stw	r17,8(sp)
    42ac:	88001426 	beq	r17,zero,4300 <_Unwind_SjLj_RaiseException+0x74>
    42b0:	2021883a 	mov	r16,r4
    42b4:	8805883a 	mov	r2,r17
    42b8:	dc800204 	addi	r18,sp,8
    42bc:	10800617 	ldw	r2,24(r2)
    42c0:	10000b26 	beq	r2,zero,42f0 <_Unwind_SjLj_RaiseException+0x64>
    42c4:	81800017 	ldw	r6,0(r16)
    42c8:	81c00117 	ldw	r7,4(r16)
    42cc:	01400044 	movi	r5,1
    42d0:	dc800115 	stw	r18,4(sp)
    42d4:	dc000015 	stw	r16,0(sp)
    42d8:	01000044 	movi	r4,1
    42dc:	103ee83a 	callr	r2
    42e0:	10c001a0 	cmpeqi	r3,r2,6
    42e4:	18000d1e 	bne	r3,zero,431c <_Unwind_SjLj_RaiseException+0x90>
    42e8:	10800218 	cmpnei	r2,r2,8
    42ec:	1000171e 	bne	r2,zero,434c <_Unwind_SjLj_RaiseException+0xc0>
    42f0:	d8800217 	ldw	r2,8(sp)
    42f4:	10800017 	ldw	r2,0(r2)
    42f8:	d8800215 	stw	r2,8(sp)
    42fc:	103fef1e 	bne	r2,zero,42bc <_Unwind_SjLj_RaiseException+0x30>
    4300:	00800144 	movi	r2,5
    4304:	dfc00717 	ldw	ra,28(sp)
    4308:	dc800617 	ldw	r18,24(sp)
    430c:	dc400517 	ldw	r17,20(sp)
    4310:	dc000417 	ldw	r16,16(sp)
    4314:	dec00804 	addi	sp,sp,32
    4318:	f800283a 	ret
    431c:	d8800217 	ldw	r2,8(sp)
    4320:	80000315 	stw	zero,12(r16)
    4324:	d9800304 	addi	r6,sp,12
    4328:	80800415 	stw	r2,16(r16)
    432c:	900b883a 	mov	r5,r18
    4330:	8009883a 	mov	r4,r16
    4334:	dc400215 	stw	r17,8(sp)
    4338:	00040ac0 	call	40ac <_Unwind_RaiseException_Phase2>
    433c:	10c001d8 	cmpnei	r3,r2,7
    4340:	183ff01e 	bne	r3,zero,4304 <_Unwind_SjLj_RaiseException+0x78>
    4344:	d9000217 	ldw	r4,8(sp)
    4348:	00041840 	call	4184 <uw_install_context.constprop.0.isra.0>
    434c:	008000c4 	movi	r2,3
    4350:	003fec06 	br	4304 <_Unwind_SjLj_RaiseException+0x78>

00004354 <_Unwind_SjLj_ForcedUnwind>:
    4354:	00800074 	movhi	r2,1
    4358:	defffd04 	addi	sp,sp,-12
    435c:	10e0b517 	ldw	r3,-32044(r2)
    4360:	dfc00215 	stw	ra,8(sp)
    4364:	21400315 	stw	r5,12(r4)
    4368:	21800415 	stw	r6,16(r4)
    436c:	d80b883a 	mov	r5,sp
    4370:	d9800104 	addi	r6,sp,4
    4374:	d8c00015 	stw	r3,0(sp)
    4378:	0003f980 	call	3f98 <_Unwind_ForcedUnwind_Phase2>
    437c:	10c001e0 	cmpeqi	r3,r2,7
    4380:	1800031e 	bne	r3,zero,4390 <_Unwind_SjLj_ForcedUnwind+0x3c>
    4384:	dfc00217 	ldw	ra,8(sp)
    4388:	dec00304 	addi	sp,sp,12
    438c:	f800283a 	ret
    4390:	d9000017 	ldw	r4,0(sp)
    4394:	00041840 	call	4184 <uw_install_context.constprop.0.isra.0>

00004398 <_Unwind_SjLj_Resume>:
    4398:	00800074 	movhi	r2,1
    439c:	10e0b517 	ldw	r3,-32044(r2)
    43a0:	20800317 	ldw	r2,12(r4)
    43a4:	defffd04 	addi	sp,sp,-12
    43a8:	dfc00215 	stw	ra,8(sp)
    43ac:	d8c00015 	stw	r3,0(sp)
    43b0:	d9800104 	addi	r6,sp,4
    43b4:	d80b883a 	mov	r5,sp
    43b8:	1000051e 	bne	r2,zero,43d0 <_Unwind_SjLj_Resume+0x38>
    43bc:	00040ac0 	call	40ac <_Unwind_RaiseException_Phase2>
    43c0:	108001e0 	cmpeqi	r2,r2,7
    43c4:	10000426 	beq	r2,zero,43d8 <_Unwind_SjLj_Resume+0x40>
    43c8:	d9000017 	ldw	r4,0(sp)
    43cc:	00041840 	call	4184 <uw_install_context.constprop.0.isra.0>
    43d0:	0003f980 	call	3f98 <_Unwind_ForcedUnwind_Phase2>
    43d4:	003ffa06 	br	43c0 <_Unwind_SjLj_Resume+0x28>
    43d8:	00044bc0 	call	44bc <abort>

000043dc <_Unwind_SjLj_Resume_or_Rethrow>:
    43dc:	20800317 	ldw	r2,12(r4)
    43e0:	1000011e 	bne	r2,zero,43e8 <_Unwind_SjLj_Resume_or_Rethrow+0xc>
    43e4:	000428c1 	jmpi	428c <_Unwind_SjLj_RaiseException>
    43e8:	00800074 	movhi	r2,1
    43ec:	10a0b517 	ldw	r2,-32044(r2)
    43f0:	defffd04 	addi	sp,sp,-12
    43f4:	d9800104 	addi	r6,sp,4
    43f8:	d80b883a 	mov	r5,sp
    43fc:	dfc00215 	stw	ra,8(sp)
    4400:	d8800015 	stw	r2,0(sp)
    4404:	0003f980 	call	3f98 <_Unwind_ForcedUnwind_Phase2>
    4408:	108001e0 	cmpeqi	r2,r2,7
    440c:	10000226 	beq	r2,zero,4418 <_Unwind_SjLj_Resume_or_Rethrow+0x3c>
    4410:	d9000017 	ldw	r4,0(sp)
    4414:	00041840 	call	4184 <uw_install_context.constprop.0.isra.0>
    4418:	00044bc0 	call	44bc <abort>

0000441c <_Unwind_DeleteException>:
    441c:	20800217 	ldw	r2,8(r4)
    4420:	200b883a 	mov	r5,r4
    4424:	10000226 	beq	r2,zero,4430 <_Unwind_DeleteException+0x14>
    4428:	01000044 	movi	r4,1
    442c:	1000683a 	jmp	r2
    4430:	f800283a 	ret

00004434 <_Unwind_Backtrace>:
    4434:	00800074 	movhi	r2,1
    4438:	10a0b517 	ldw	r2,-32044(r2)
    443c:	defffb04 	addi	sp,sp,-20
    4440:	dc800315 	stw	r18,12(sp)
    4444:	dc400215 	stw	r17,8(sp)
    4448:	dc000115 	stw	r16,4(sp)
    444c:	dfc00415 	stw	ra,16(sp)
    4450:	d8800015 	stw	r2,0(sp)
    4454:	2021883a 	mov	r16,r4
    4458:	2823883a 	mov	r17,r5
    445c:	d825883a 	mov	r18,sp
    4460:	10000826 	beq	r2,zero,4484 <_Unwind_Backtrace+0x50>
    4464:	880b883a 	mov	r5,r17
    4468:	9009883a 	mov	r4,r18
    446c:	803ee83a 	callr	r16
    4470:	1000101e 	bne	r2,zero,44b4 <_Unwind_Backtrace+0x80>
    4474:	d8800017 	ldw	r2,0(sp)
    4478:	10800017 	ldw	r2,0(r2)
    447c:	d8800015 	stw	r2,0(sp)
    4480:	103ff81e 	bne	r2,zero,4464 <_Unwind_Backtrace+0x30>
    4484:	880b883a 	mov	r5,r17
    4488:	9009883a 	mov	r4,r18
    448c:	803ee83a 	callr	r16
    4490:	00c00144 	movi	r3,5
    4494:	1000071e 	bne	r2,zero,44b4 <_Unwind_Backtrace+0x80>
    4498:	1805883a 	mov	r2,r3
    449c:	dfc00417 	ldw	ra,16(sp)
    44a0:	dc800317 	ldw	r18,12(sp)
    44a4:	dc400217 	ldw	r17,8(sp)
    44a8:	dc000117 	ldw	r16,4(sp)
    44ac:	dec00504 	addi	sp,sp,20
    44b0:	f800283a 	ret
    44b4:	00c000c4 	movi	r3,3
    44b8:	003ff706 	br	4498 <_Unwind_Backtrace+0x64>

000044bc <abort>:
    44bc:	deffff04 	addi	sp,sp,-4
    44c0:	01000184 	movi	r4,6
    44c4:	dfc00015 	stw	ra,0(sp)
    44c8:	00049400 	call	4940 <raise>
    44cc:	01000044 	movi	r4,1
    44d0:	000000c0 	call	c <_exit>

000044d4 <malloc>:
    44d4:	00800074 	movhi	r2,1
    44d8:	200b883a 	mov	r5,r4
    44dc:	11209c17 	ldw	r4,-32144(r2)
    44e0:	000469c1 	jmpi	469c <_malloc_r>

000044e4 <free>:
    44e4:	00800074 	movhi	r2,1
    44e8:	200b883a 	mov	r5,r4
    44ec:	11209c17 	ldw	r4,-32144(r2)
    44f0:	000459c1 	jmpi	459c <_free_r>

000044f4 <memcpy>:
    44f4:	2005883a 	mov	r2,r4
    44f8:	0007883a 	mov	r3,zero
    44fc:	30c0011e 	bne	r6,r3,4504 <memcpy+0x10>
    4500:	f800283a 	ret
    4504:	28cf883a 	add	r7,r5,r3
    4508:	39c00003 	ldbu	r7,0(r7)
    450c:	10c9883a 	add	r4,r2,r3
    4510:	18c00044 	addi	r3,r3,1
    4514:	21c00005 	stb	r7,0(r4)
    4518:	003ff806 	br	44fc <memcpy+0x8>

0000451c <memmove>:
    451c:	2005883a 	mov	r2,r4
    4520:	2900142e 	bgeu	r5,r4,4574 <memmove+0x58>
    4524:	298f883a 	add	r7,r5,r6
    4528:	21c0122e 	bgeu	r4,r7,4574 <memmove+0x58>
    452c:	018a303a 	nor	r5,zero,r6
    4530:	0007883a 	mov	r3,zero
    4534:	18ffffc4 	addi	r3,r3,-1
    4538:	28c0011e 	bne	r5,r3,4540 <memmove+0x24>
    453c:	f800283a 	ret
    4540:	38c9883a 	add	r4,r7,r3
    4544:	22000003 	ldbu	r8,0(r4)
    4548:	30c9883a 	add	r4,r6,r3
    454c:	1109883a 	add	r4,r2,r4
    4550:	22000005 	stb	r8,0(r4)
    4554:	003ff706 	br	4534 <memmove+0x18>
    4558:	28c9883a 	add	r4,r5,r3
    455c:	21c00003 	ldbu	r7,0(r4)
    4560:	10c9883a 	add	r4,r2,r3
    4564:	18c00044 	addi	r3,r3,1
    4568:	21c00005 	stb	r7,0(r4)
    456c:	30fffa1e 	bne	r6,r3,4558 <memmove+0x3c>
    4570:	f800283a 	ret
    4574:	0007883a 	mov	r3,zero
    4578:	003ffc06 	br	456c <memmove+0x50>

0000457c <memset>:
    457c:	2005883a 	mov	r2,r4
    4580:	218d883a 	add	r6,r4,r6
    4584:	2007883a 	mov	r3,r4
    4588:	1980011e 	bne	r3,r6,4590 <memset+0x14>
    458c:	f800283a 	ret
    4590:	18c00044 	addi	r3,r3,1
    4594:	197fffc5 	stb	r5,-1(r3)
    4598:	003ffb06 	br	4588 <memset+0xc>

0000459c <_free_r>:
    459c:	28003e26 	beq	r5,zero,4698 <_free_r+0xfc>
    45a0:	28bfff17 	ldw	r2,-4(r5)
    45a4:	defffd04 	addi	sp,sp,-12
    45a8:	dc000115 	stw	r16,4(sp)
    45ac:	dfc00215 	stw	ra,8(sp)
    45b0:	2c3fff04 	addi	r16,r5,-4
    45b4:	1000010e 	bge	r2,zero,45bc <_free_r+0x20>
    45b8:	80a1883a 	add	r16,r16,r2
    45bc:	d9000015 	stw	r4,0(sp)
    45c0:	000540c0 	call	540c <__malloc_lock>
    45c4:	00800074 	movhi	r2,1
    45c8:	10a0b717 	ldw	r2,-32036(r2)
    45cc:	d9000017 	ldw	r4,0(sp)
    45d0:	1000071e 	bne	r2,zero,45f0 <_free_r+0x54>
    45d4:	80000115 	stw	zero,4(r16)
    45d8:	00800074 	movhi	r2,1
    45dc:	1420b715 	stw	r16,-32036(r2)
    45e0:	dfc00217 	ldw	ra,8(sp)
    45e4:	dc000117 	ldw	r16,4(sp)
    45e8:	dec00304 	addi	sp,sp,12
    45ec:	00054101 	jmpi	5410 <__malloc_unlock>
    45f0:	8080092e 	bgeu	r16,r2,4618 <_free_r+0x7c>
    45f4:	81400017 	ldw	r5,0(r16)
    45f8:	8147883a 	add	r3,r16,r5
    45fc:	10c0041e 	bne	r2,r3,4610 <_free_r+0x74>
    4600:	10c00017 	ldw	r3,0(r2)
    4604:	10800117 	ldw	r2,4(r2)
    4608:	1947883a 	add	r3,r3,r5
    460c:	80c00015 	stw	r3,0(r16)
    4610:	80800115 	stw	r2,4(r16)
    4614:	003ff006 	br	45d8 <_free_r+0x3c>
    4618:	1007883a 	mov	r3,r2
    461c:	10800117 	ldw	r2,4(r2)
    4620:	10000126 	beq	r2,zero,4628 <_free_r+0x8c>
    4624:	80bffc2e 	bgeu	r16,r2,4618 <_free_r+0x7c>
    4628:	19400017 	ldw	r5,0(r3)
    462c:	194d883a 	add	r6,r3,r5
    4630:	34000b1e 	bne	r6,r16,4660 <_free_r+0xc4>
    4634:	81800017 	ldw	r6,0(r16)
    4638:	298b883a 	add	r5,r5,r6
    463c:	19400015 	stw	r5,0(r3)
    4640:	194d883a 	add	r6,r3,r5
    4644:	11bfe61e 	bne	r2,r6,45e0 <_free_r+0x44>
    4648:	11800017 	ldw	r6,0(r2)
    464c:	10800117 	ldw	r2,4(r2)
    4650:	314b883a 	add	r5,r6,r5
    4654:	19400015 	stw	r5,0(r3)
    4658:	18800115 	stw	r2,4(r3)
    465c:	003fe006 	br	45e0 <_free_r+0x44>
    4660:	8180032e 	bgeu	r16,r6,4670 <_free_r+0xd4>
    4664:	00800304 	movi	r2,12
    4668:	20800015 	stw	r2,0(r4)
    466c:	003fdc06 	br	45e0 <_free_r+0x44>
    4670:	81800017 	ldw	r6,0(r16)
    4674:	818b883a 	add	r5,r16,r6
    4678:	1140041e 	bne	r2,r5,468c <_free_r+0xf0>
    467c:	11400017 	ldw	r5,0(r2)
    4680:	10800117 	ldw	r2,4(r2)
    4684:	298b883a 	add	r5,r5,r6
    4688:	81400015 	stw	r5,0(r16)
    468c:	80800115 	stw	r2,4(r16)
    4690:	1c000115 	stw	r16,4(r3)
    4694:	003fd206 	br	45e0 <_free_r+0x44>
    4698:	f800283a 	ret

0000469c <_malloc_r>:
    469c:	defffc04 	addi	sp,sp,-16
    46a0:	00bfff04 	movi	r2,-4
    46a4:	dc400115 	stw	r17,4(sp)
    46a8:	2c4000c4 	addi	r17,r5,3
    46ac:	88a2703a 	and	r17,r17,r2
    46b0:	8c400204 	addi	r17,r17,8
    46b4:	dc800215 	stw	r18,8(sp)
    46b8:	dfc00315 	stw	ra,12(sp)
    46bc:	dc000015 	stw	r16,0(sp)
    46c0:	88800328 	cmpgeui	r2,r17,12
    46c4:	2025883a 	mov	r18,r4
    46c8:	10001a1e 	bne	r2,zero,4734 <_malloc_r+0x98>
    46cc:	04400304 	movi	r17,12
    46d0:	89401936 	bltu	r17,r5,4738 <_malloc_r+0x9c>
    46d4:	9009883a 	mov	r4,r18
    46d8:	000540c0 	call	540c <__malloc_lock>
    46dc:	00800074 	movhi	r2,1
    46e0:	10e0b717 	ldw	r3,-32036(r2)
    46e4:	1821883a 	mov	r16,r3
    46e8:	80001c1e 	bne	r16,zero,475c <_malloc_r+0xc0>
    46ec:	00800074 	movhi	r2,1
    46f0:	10a0b617 	ldw	r2,-32040(r2)
    46f4:	1000051e 	bne	r2,zero,470c <_malloc_r+0x70>
    46f8:	000b883a 	mov	r5,zero
    46fc:	9009883a 	mov	r4,r18
    4700:	00048440 	call	4844 <_sbrk_r>
    4704:	00c00074 	movhi	r3,1
    4708:	18a0b615 	stw	r2,-32040(r3)
    470c:	880b883a 	mov	r5,r17
    4710:	9009883a 	mov	r4,r18
    4714:	00048440 	call	4844 <_sbrk_r>
    4718:	10ffffd8 	cmpnei	r3,r2,-1
    471c:	18002d1e 	bne	r3,zero,47d4 <_malloc_r+0x138>
    4720:	00800304 	movi	r2,12
    4724:	90800015 	stw	r2,0(r18)
    4728:	9009883a 	mov	r4,r18
    472c:	00054100 	call	5410 <__malloc_unlock>
    4730:	00000306 	br	4740 <_malloc_r+0xa4>
    4734:	883fe60e 	bge	r17,zero,46d0 <_malloc_r+0x34>
    4738:	00800304 	movi	r2,12
    473c:	90800015 	stw	r2,0(r18)
    4740:	0005883a 	mov	r2,zero
    4744:	dfc00317 	ldw	ra,12(sp)
    4748:	dc800217 	ldw	r18,8(sp)
    474c:	dc400117 	ldw	r17,4(sp)
    4750:	dc000017 	ldw	r16,0(sp)
    4754:	dec00404 	addi	sp,sp,16
    4758:	f800283a 	ret
    475c:	80800017 	ldw	r2,0(r16)
    4760:	1445c83a 	sub	r2,r2,r17
    4764:	10001816 	blt	r2,zero,47c8 <_malloc_r+0x12c>
    4768:	11000330 	cmpltui	r4,r2,12
    476c:	2000041e 	bne	r4,zero,4780 <_malloc_r+0xe4>
    4770:	80800015 	stw	r2,0(r16)
    4774:	80a1883a 	add	r16,r16,r2
    4778:	84400015 	stw	r17,0(r16)
    477c:	00000406 	br	4790 <_malloc_r+0xf4>
    4780:	80800117 	ldw	r2,4(r16)
    4784:	1c000e1e 	bne	r3,r16,47c0 <_malloc_r+0x124>
    4788:	00c00074 	movhi	r3,1
    478c:	18a0b715 	stw	r2,-32036(r3)
    4790:	9009883a 	mov	r4,r18
    4794:	00054100 	call	5410 <__malloc_unlock>
    4798:	013ffe04 	movi	r4,-8
    479c:	808002c4 	addi	r2,r16,11
    47a0:	80c00104 	addi	r3,r16,4
    47a4:	1104703a 	and	r2,r2,r4
    47a8:	10c9c83a 	sub	r4,r2,r3
    47ac:	10ffe526 	beq	r2,r3,4744 <_malloc_r+0xa8>
    47b0:	8121883a 	add	r16,r16,r4
    47b4:	1887c83a 	sub	r3,r3,r2
    47b8:	80c00015 	stw	r3,0(r16)
    47bc:	003fe106 	br	4744 <_malloc_r+0xa8>
    47c0:	18800115 	stw	r2,4(r3)
    47c4:	003ff206 	br	4790 <_malloc_r+0xf4>
    47c8:	8007883a 	mov	r3,r16
    47cc:	84000117 	ldw	r16,4(r16)
    47d0:	003fc506 	br	46e8 <_malloc_r+0x4c>
    47d4:	140000c4 	addi	r16,r2,3
    47d8:	00ffff04 	movi	r3,-4
    47dc:	80e0703a 	and	r16,r16,r3
    47e0:	143fe526 	beq	r2,r16,4778 <_malloc_r+0xdc>
    47e4:	808bc83a 	sub	r5,r16,r2
    47e8:	9009883a 	mov	r4,r18
    47ec:	00048440 	call	4844 <_sbrk_r>
    47f0:	10bfffe0 	cmpeqi	r2,r2,-1
    47f4:	103fe026 	beq	r2,zero,4778 <_malloc_r+0xdc>
    47f8:	003fc906 	br	4720 <_malloc_r+0x84>

000047fc <printf>:
    47fc:	defffc04 	addi	sp,sp,-16
    4800:	dfc00015 	stw	ra,0(sp)
    4804:	d9400115 	stw	r5,4(sp)
    4808:	d9800215 	stw	r6,8(sp)
    480c:	d9c00315 	stw	r7,12(sp)
    4810:	00800074 	movhi	r2,1
    4814:	10e09c17 	ldw	r3,-32144(r2)
    4818:	00800034 	movhi	r2,0
    481c:	1093d504 	addi	r2,r2,20308
    4820:	19400217 	ldw	r5,8(r3)
    4824:	d9800104 	addi	r6,sp,4
    4828:	28800115 	stw	r2,4(r5)
    482c:	200b883a 	mov	r5,r4
    4830:	19000217 	ldw	r4,8(r3)
    4834:	0004f3c0 	call	4f3c <__vfprintf_internal>
    4838:	dfc00017 	ldw	ra,0(sp)
    483c:	dec00404 	addi	sp,sp,16
    4840:	f800283a 	ret

00004844 <_sbrk_r>:
    4844:	defffe04 	addi	sp,sp,-8
    4848:	dc000015 	stw	r16,0(sp)
    484c:	00800074 	movhi	r2,1
    4850:	2021883a 	mov	r16,r4
    4854:	2809883a 	mov	r4,r5
    4858:	dfc00115 	stw	ra,4(sp)
    485c:	1020b815 	stw	zero,-32032(r2)
    4860:	00054980 	call	5498 <sbrk>
    4864:	10ffffd8 	cmpnei	r3,r2,-1
    4868:	1800041e 	bne	r3,zero,487c <_sbrk_r+0x38>
    486c:	00c00074 	movhi	r3,1
    4870:	18e0b817 	ldw	r3,-32032(r3)
    4874:	18000126 	beq	r3,zero,487c <_sbrk_r+0x38>
    4878:	80c00015 	stw	r3,0(r16)
    487c:	dfc00117 	ldw	ra,4(sp)
    4880:	dc000017 	ldw	r16,0(sp)
    4884:	dec00204 	addi	sp,sp,8
    4888:	f800283a 	ret

0000488c <_raise_r>:
    488c:	defffd04 	addi	sp,sp,-12
    4890:	dc000015 	stw	r16,0(sp)
    4894:	dfc00215 	stw	ra,8(sp)
    4898:	dc400115 	stw	r17,4(sp)
    489c:	28800830 	cmpltui	r2,r5,32
    48a0:	2021883a 	mov	r16,r4
    48a4:	1000081e 	bne	r2,zero,48c8 <_raise_r+0x3c>
    48a8:	00800584 	movi	r2,22
    48ac:	20800015 	stw	r2,0(r4)
    48b0:	00bfffc4 	movi	r2,-1
    48b4:	dfc00217 	ldw	ra,8(sp)
    48b8:	dc400117 	ldw	r17,4(sp)
    48bc:	dc000017 	ldw	r16,0(sp)
    48c0:	dec00304 	addi	sp,sp,12
    48c4:	f800283a 	ret
    48c8:	20800c17 	ldw	r2,48(r4)
    48cc:	2823883a 	mov	r17,r5
    48d0:	10000426 	beq	r2,zero,48e4 <_raise_r+0x58>
    48d4:	280690ba 	slli	r3,r5,2
    48d8:	10c5883a 	add	r2,r2,r3
    48dc:	10c00017 	ldw	r3,0(r2)
    48e0:	18000a1e 	bne	r3,zero,490c <_raise_r+0x80>
    48e4:	8009883a 	mov	r4,r16
    48e8:	000499c0 	call	499c <_getpid_r>
    48ec:	880d883a 	mov	r6,r17
    48f0:	100b883a 	mov	r5,r2
    48f4:	8009883a 	mov	r4,r16
    48f8:	dfc00217 	ldw	ra,8(sp)
    48fc:	dc400117 	ldw	r17,4(sp)
    4900:	dc000017 	ldw	r16,0(sp)
    4904:	dec00304 	addi	sp,sp,12
    4908:	00049501 	jmpi	4950 <_kill_r>
    490c:	19000060 	cmpeqi	r4,r3,1
    4910:	2000091e 	bne	r4,zero,4938 <_raise_r+0xac>
    4914:	193fffd8 	cmpnei	r4,r3,-1
    4918:	2000041e 	bne	r4,zero,492c <_raise_r+0xa0>
    491c:	00800584 	movi	r2,22
    4920:	80800015 	stw	r2,0(r16)
    4924:	00800044 	movi	r2,1
    4928:	003fe206 	br	48b4 <_raise_r+0x28>
    492c:	10000015 	stw	zero,0(r2)
    4930:	2809883a 	mov	r4,r5
    4934:	183ee83a 	callr	r3
    4938:	0005883a 	mov	r2,zero
    493c:	003fdd06 	br	48b4 <_raise_r+0x28>

00004940 <raise>:
    4940:	00800074 	movhi	r2,1
    4944:	200b883a 	mov	r5,r4
    4948:	11209c17 	ldw	r4,-32144(r2)
    494c:	000488c1 	jmpi	488c <_raise_r>

00004950 <_kill_r>:
    4950:	defffe04 	addi	sp,sp,-8
    4954:	dc000015 	stw	r16,0(sp)
    4958:	00800074 	movhi	r2,1
    495c:	2021883a 	mov	r16,r4
    4960:	2809883a 	mov	r4,r5
    4964:	300b883a 	mov	r5,r6
    4968:	dfc00115 	stw	ra,4(sp)
    496c:	1020b815 	stw	zero,-32032(r2)
    4970:	00052640 	call	5264 <kill>
    4974:	10ffffd8 	cmpnei	r3,r2,-1
    4978:	1800041e 	bne	r3,zero,498c <_kill_r+0x3c>
    497c:	00c00074 	movhi	r3,1
    4980:	18e0b817 	ldw	r3,-32032(r3)
    4984:	18000126 	beq	r3,zero,498c <_kill_r+0x3c>
    4988:	80c00015 	stw	r3,0(r16)
    498c:	dfc00117 	ldw	ra,4(sp)
    4990:	dc000017 	ldw	r16,0(sp)
    4994:	dec00204 	addi	sp,sp,8
    4998:	f800283a 	ret

0000499c <_getpid_r>:
    499c:	000525c1 	jmpi	525c <getpid>

000049a0 <strcmp>:
    49a0:	20800003 	ldbu	r2,0(r4)
    49a4:	28c00003 	ldbu	r3,0(r5)
    49a8:	11803fcc 	andi	r6,r2,255
    49ac:	3180201c 	xori	r6,r6,128
    49b0:	31bfe004 	addi	r6,r6,-128
    49b4:	30000426 	beq	r6,zero,49c8 <strcmp+0x28>
    49b8:	19c03fcc 	andi	r7,r3,255
    49bc:	39c0201c 	xori	r7,r7,128
    49c0:	39ffe004 	addi	r7,r7,-128
    49c4:	31c00426 	beq	r6,r7,49d8 <strcmp+0x38>
    49c8:	18c03fcc 	andi	r3,r3,255
    49cc:	10803fcc 	andi	r2,r2,255
    49d0:	10c5c83a 	sub	r2,r2,r3
    49d4:	f800283a 	ret
    49d8:	21000044 	addi	r4,r4,1
    49dc:	29400044 	addi	r5,r5,1
    49e0:	003fef06 	br	49a0 <strcmp>

000049e4 <print_repeat>:
    49e4:	defffb04 	addi	sp,sp,-20
    49e8:	dc800315 	stw	r18,12(sp)
    49ec:	dc400215 	stw	r17,8(sp)
    49f0:	dc000115 	stw	r16,4(sp)
    49f4:	dfc00415 	stw	ra,16(sp)
    49f8:	2025883a 	mov	r18,r4
    49fc:	2823883a 	mov	r17,r5
    4a00:	d9800005 	stb	r6,0(sp)
    4a04:	3821883a 	mov	r16,r7
    4a08:	04000716 	blt	zero,r16,4a28 <print_repeat+0x44>
    4a0c:	0005883a 	mov	r2,zero
    4a10:	dfc00417 	ldw	ra,16(sp)
    4a14:	dc800317 	ldw	r18,12(sp)
    4a18:	dc400217 	ldw	r17,8(sp)
    4a1c:	dc000117 	ldw	r16,4(sp)
    4a20:	dec00504 	addi	sp,sp,20
    4a24:	f800283a 	ret
    4a28:	88800117 	ldw	r2,4(r17)
    4a2c:	01c00044 	movi	r7,1
    4a30:	d80d883a 	mov	r6,sp
    4a34:	880b883a 	mov	r5,r17
    4a38:	9009883a 	mov	r4,r18
    4a3c:	103ee83a 	callr	r2
    4a40:	843fffc4 	addi	r16,r16,-1
    4a44:	103ff026 	beq	r2,zero,4a08 <print_repeat+0x24>
    4a48:	00bfffc4 	movi	r2,-1
    4a4c:	003ff006 	br	4a10 <print_repeat+0x2c>

00004a50 <___vfprintf_internal_r>:
    4a50:	deffe604 	addi	sp,sp,-104
    4a54:	df001815 	stw	fp,96(sp)
    4a58:	ddc01715 	stw	r23,92(sp)
    4a5c:	dd801615 	stw	r22,88(sp)
    4a60:	dd001415 	stw	r20,80(sp)
    4a64:	dcc01315 	stw	r19,76(sp)
    4a68:	dc801215 	stw	r18,72(sp)
    4a6c:	dc401115 	stw	r17,68(sp)
    4a70:	dc001015 	stw	r16,64(sp)
    4a74:	dfc01915 	stw	ra,100(sp)
    4a78:	dd401515 	stw	r21,84(sp)
    4a7c:	2021883a 	mov	r16,r4
    4a80:	282f883a 	mov	r23,r5
    4a84:	d9800515 	stw	r6,20(sp)
    4a88:	3839883a 	mov	fp,r7
    4a8c:	002d883a 	mov	r22,zero
    4a90:	d8000215 	stw	zero,8(sp)
    4a94:	0027883a 	mov	r19,zero
    4a98:	0029883a 	mov	r20,zero
    4a9c:	0025883a 	mov	r18,zero
    4aa0:	0023883a 	mov	r17,zero
    4aa4:	d8000115 	stw	zero,4(sp)
    4aa8:	d8000015 	stw	zero,0(sp)
    4aac:	0005883a 	mov	r2,zero
    4ab0:	00000206 	br	4abc <___vfprintf_internal_r+0x6c>
    4ab4:	118000e0 	cmpeqi	r6,r2,3
    4ab8:	30003d1e 	bne	r6,zero,4bb0 <___vfprintf_internal_r+0x160>
    4abc:	d8c00517 	ldw	r3,20(sp)
    4ac0:	19000003 	ldbu	r4,0(r3)
    4ac4:	18c00044 	addi	r3,r3,1
    4ac8:	d8c00515 	stw	r3,20(sp)
    4acc:	21403fcc 	andi	r5,r4,255
    4ad0:	2940201c 	xori	r5,r5,128
    4ad4:	297fe004 	addi	r5,r5,-128
    4ad8:	28001426 	beq	r5,zero,4b2c <___vfprintf_internal_r+0xdc>
    4adc:	118000a0 	cmpeqi	r6,r2,2
    4ae0:	3000231e 	bne	r6,zero,4b70 <___vfprintf_internal_r+0x120>
    4ae4:	118000c8 	cmpgei	r6,r2,3
    4ae8:	303ff21e 	bne	r6,zero,4ab4 <___vfprintf_internal_r+0x64>
    4aec:	10000426 	beq	r2,zero,4b00 <___vfprintf_internal_r+0xb0>
    4af0:	10800060 	cmpeqi	r2,r2,1
    4af4:	10001a1e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x110>
    4af8:	00800084 	movi	r2,2
    4afc:	003fef06 	br	4abc <___vfprintf_internal_r+0x6c>
    4b00:	29400960 	cmpeqi	r5,r5,37
    4b04:	2800f61e 	bne	r5,zero,4ee0 <___vfprintf_internal_r+0x490>
    4b08:	b8800117 	ldw	r2,4(r23)
    4b0c:	d9000805 	stb	r4,32(sp)
    4b10:	01c00044 	movi	r7,1
    4b14:	d9800804 	addi	r6,sp,32
    4b18:	b80b883a 	mov	r5,r23
    4b1c:	8009883a 	mov	r4,r16
    4b20:	103ee83a 	callr	r2
    4b24:	10001b26 	beq	r2,zero,4b94 <___vfprintf_internal_r+0x144>
    4b28:	05bfffc4 	movi	r22,-1
    4b2c:	b005883a 	mov	r2,r22
    4b30:	dfc01917 	ldw	ra,100(sp)
    4b34:	df001817 	ldw	fp,96(sp)
    4b38:	ddc01717 	ldw	r23,92(sp)
    4b3c:	dd801617 	ldw	r22,88(sp)
    4b40:	dd401517 	ldw	r21,84(sp)
    4b44:	dd001417 	ldw	r20,80(sp)
    4b48:	dcc01317 	ldw	r19,76(sp)
    4b4c:	dc801217 	ldw	r18,72(sp)
    4b50:	dc401117 	ldw	r17,68(sp)
    4b54:	dc001017 	ldw	r16,64(sp)
    4b58:	dec01a04 	addi	sp,sp,104
    4b5c:	f800283a 	ret
    4b60:	28800c20 	cmpeqi	r2,r5,48
    4b64:	1000e71e 	bne	r2,zero,4f04 <___vfprintf_internal_r+0x4b4>
    4b68:	28800958 	cmpnei	r2,r5,37
    4b6c:	103fe626 	beq	r2,zero,4b08 <___vfprintf_internal_r+0xb8>
    4b70:	20bff404 	addi	r2,r4,-48
    4b74:	10803fcc 	andi	r2,r2,255
    4b78:	118002a8 	cmpgeui	r6,r2,10
    4b7c:	3000091e 	bne	r6,zero,4ba4 <___vfprintf_internal_r+0x154>
    4b80:	893fffe0 	cmpeqi	r4,r17,-1
    4b84:	2000051e 	bne	r4,zero,4b9c <___vfprintf_internal_r+0x14c>
    4b88:	8c4002a4 	muli	r17,r17,10
    4b8c:	1463883a 	add	r17,r2,r17
    4b90:	003fd906 	br	4af8 <___vfprintf_internal_r+0xa8>
    4b94:	b5800044 	addi	r22,r22,1
    4b98:	003fc806 	br	4abc <___vfprintf_internal_r+0x6c>
    4b9c:	0023883a 	mov	r17,zero
    4ba0:	003ffa06 	br	4b8c <___vfprintf_internal_r+0x13c>
    4ba4:	28800ba0 	cmpeqi	r2,r5,46
    4ba8:	1000db1e 	bne	r2,zero,4f18 <___vfprintf_internal_r+0x4c8>
    4bac:	00800084 	movi	r2,2
    4bb0:	213ff404 	addi	r4,r4,-48
    4bb4:	21003fcc 	andi	r4,r4,255
    4bb8:	218002a8 	cmpgeui	r6,r4,10
    4bbc:	3000071e 	bne	r6,zero,4bdc <___vfprintf_internal_r+0x18c>
    4bc0:	917fffe0 	cmpeqi	r5,r18,-1
    4bc4:	2800031e 	bne	r5,zero,4bd4 <___vfprintf_internal_r+0x184>
    4bc8:	948002a4 	muli	r18,r18,10
    4bcc:	24a5883a 	add	r18,r4,r18
    4bd0:	003fba06 	br	4abc <___vfprintf_internal_r+0x6c>
    4bd4:	0025883a 	mov	r18,zero
    4bd8:	003ffc06 	br	4bcc <___vfprintf_internal_r+0x17c>
    4bdc:	28801b20 	cmpeqi	r2,r5,108
    4be0:	1000cb1e 	bne	r2,zero,4f10 <___vfprintf_internal_r+0x4c0>
    4be4:	90bfffe0 	cmpeqi	r2,r18,-1
    4be8:	10000f1e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x1d8>
    4bec:	d8000015 	stw	zero,0(sp)
    4bf0:	28801be0 	cmpeqi	r2,r5,111
    4bf4:	1000ca1e 	bne	r2,zero,4f20 <___vfprintf_internal_r+0x4d0>
    4bf8:	28801c08 	cmpgei	r2,r5,112
    4bfc:	1000171e 	bne	r2,zero,4c5c <___vfprintf_internal_r+0x20c>
    4c00:	288018e0 	cmpeqi	r2,r5,99
    4c04:	10009f1e 	bne	r2,zero,4e84 <___vfprintf_internal_r+0x434>
    4c08:	28801908 	cmpgei	r2,r5,100
    4c0c:	1000081e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x1e0>
    4c10:	29401620 	cmpeqi	r5,r5,88
    4c14:	283fa526 	beq	r5,zero,4aac <___vfprintf_internal_r+0x5c>
    4c18:	00800044 	movi	r2,1
    4c1c:	d8800215 	stw	r2,8(sp)
    4c20:	05000404 	movi	r20,16
    4c24:	0000bf06 	br	4f24 <___vfprintf_internal_r+0x4d4>
    4c28:	04800044 	movi	r18,1
    4c2c:	003ff006 	br	4bf0 <___vfprintf_internal_r+0x1a0>
    4c30:	28801920 	cmpeqi	r2,r5,100
    4c34:	1000021e 	bne	r2,zero,4c40 <___vfprintf_internal_r+0x1f0>
    4c38:	29401a60 	cmpeqi	r5,r5,105
    4c3c:	283f9b26 	beq	r5,zero,4aac <___vfprintf_internal_r+0x5c>
    4c40:	e0800104 	addi	r2,fp,4
    4c44:	d8800415 	stw	r2,16(sp)
    4c48:	9800b626 	beq	r19,zero,4f24 <___vfprintf_internal_r+0x4d4>
    4c4c:	e5400017 	ldw	r21,0(fp)
    4c50:	a8002216 	blt	r21,zero,4cdc <___vfprintf_internal_r+0x28c>
    4c54:	04c00044 	movi	r19,1
    4c58:	0000b606 	br	4f34 <___vfprintf_internal_r+0x4e4>
    4c5c:	28801d60 	cmpeqi	r2,r5,117
    4c60:	1000b01e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x4d4>
    4c64:	28801e20 	cmpeqi	r2,r5,120
    4c68:	103fed1e 	bne	r2,zero,4c20 <___vfprintf_internal_r+0x1d0>
    4c6c:	29401ce0 	cmpeqi	r5,r5,115
    4c70:	283f8e26 	beq	r5,zero,4aac <___vfprintf_internal_r+0x5c>
    4c74:	e5400017 	ldw	r21,0(fp)
    4c78:	e0800104 	addi	r2,fp,4
    4c7c:	d8800315 	stw	r2,12(sp)
    4c80:	a809883a 	mov	r4,r21
    4c84:	0004ffc0 	call	4ffc <strlen>
    4c88:	888fc83a 	sub	r7,r17,r2
    4c8c:	1039883a 	mov	fp,r2
    4c90:	01c0080e 	bge	zero,r7,4cb4 <___vfprintf_internal_r+0x264>
    4c94:	01800804 	movi	r6,32
    4c98:	b80b883a 	mov	r5,r23
    4c9c:	8009883a 	mov	r4,r16
    4ca0:	d9c00415 	stw	r7,16(sp)
    4ca4:	00049e40 	call	49e4 <print_repeat>
    4ca8:	103f9f1e 	bne	r2,zero,4b28 <___vfprintf_internal_r+0xd8>
    4cac:	d9c00417 	ldw	r7,16(sp)
    4cb0:	b1ed883a 	add	r22,r22,r7
    4cb4:	b8800117 	ldw	r2,4(r23)
    4cb8:	e00f883a 	mov	r7,fp
    4cbc:	a80d883a 	mov	r6,r21
    4cc0:	b80b883a 	mov	r5,r23
    4cc4:	8009883a 	mov	r4,r16
    4cc8:	103ee83a 	callr	r2
    4ccc:	103f961e 	bne	r2,zero,4b28 <___vfprintf_internal_r+0xd8>
    4cd0:	b72d883a 	add	r22,r22,fp
    4cd4:	df000317 	ldw	fp,12(sp)
    4cd8:	003f7806 	br	4abc <___vfprintf_internal_r+0x6c>
    4cdc:	056bc83a 	sub	r21,zero,r21
    4ce0:	04c00044 	movi	r19,1
    4ce4:	00c00044 	movi	r3,1
    4ce8:	df000804 	addi	fp,sp,32
    4cec:	e00d883a 	mov	r6,fp
    4cf0:	a8002e1e 	bne	r21,zero,4dac <___vfprintf_internal_r+0x35c>
    4cf4:	e185c83a 	sub	r2,fp,r6
    4cf8:	d8800315 	stw	r2,12(sp)
    4cfc:	9085c83a 	sub	r2,r18,r2
    4d00:	0080090e 	bge	zero,r2,4d28 <___vfprintf_internal_r+0x2d8>
    4d04:	e085883a 	add	r2,fp,r2
    4d08:	d9001004 	addi	r4,sp,64
    4d0c:	e100042e 	bgeu	fp,r4,4d20 <___vfprintf_internal_r+0x2d0>
    4d10:	e7000044 	addi	fp,fp,1
    4d14:	01000c04 	movi	r4,48
    4d18:	e13fffc5 	stb	r4,-1(fp)
    4d1c:	e0bffa1e 	bne	fp,r2,4d08 <___vfprintf_internal_r+0x2b8>
    4d20:	e185c83a 	sub	r2,fp,r6
    4d24:	d8800315 	stw	r2,12(sp)
    4d28:	d8800317 	ldw	r2,12(sp)
    4d2c:	1897883a 	add	r11,r3,r2
    4d30:	d8800017 	ldw	r2,0(sp)
    4d34:	8aebc83a 	sub	r21,r17,r11
    4d38:	10003126 	beq	r2,zero,4e00 <___vfprintf_internal_r+0x3b0>
    4d3c:	18000a26 	beq	r3,zero,4d68 <___vfprintf_internal_r+0x318>
    4d40:	00800b44 	movi	r2,45
    4d44:	d88007c5 	stb	r2,31(sp)
    4d48:	b8800117 	ldw	r2,4(r23)
    4d4c:	01c00044 	movi	r7,1
    4d50:	d98007c4 	addi	r6,sp,31
    4d54:	b80b883a 	mov	r5,r23
    4d58:	8009883a 	mov	r4,r16
    4d5c:	103ee83a 	callr	r2
    4d60:	103f711e 	bne	r2,zero,4b28 <___vfprintf_internal_r+0xd8>
    4d64:	b5800044 	addi	r22,r22,1
    4d68:	0540070e 	bge	zero,r21,4d88 <___vfprintf_internal_r+0x338>
    4d6c:	a80f883a 	mov	r7,r21
    4d70:	01800c04 	movi	r6,48
    4d74:	b80b883a 	mov	r5,r23
    4d78:	8009883a 	mov	r4,r16
    4d7c:	00049e40 	call	49e4 <print_repeat>
    4d80:	103f691e 	bne	r2,zero,4b28 <___vfprintf_internal_r+0xd8>
    4d84:	b56d883a 	add	r22,r22,r21
    4d88:	d8800317 	ldw	r2,12(sp)
    4d8c:	b72d883a 	add	r22,r22,fp
    4d90:	172bc83a 	sub	r21,r2,fp
    4d94:	af05883a 	add	r2,r21,fp
    4d98:	b707c83a 	sub	r3,r22,fp
    4d9c:	00802e16 	blt	zero,r2,4e58 <___vfprintf_internal_r+0x408>
    4da0:	df000417 	ldw	fp,16(sp)
    4da4:	182d883a 	mov	r22,r3
    4da8:	003f4006 	br	4aac <___vfprintf_internal_r+0x5c>
    4dac:	a809883a 	mov	r4,r21
    4db0:	a00b883a 	mov	r5,r20
    4db4:	d8c00315 	stw	r3,12(sp)
    4db8:	000515c0 	call	515c <__udivsi3>
    4dbc:	1509383a 	mul	r4,r2,r20
    4dc0:	d8c00317 	ldw	r3,12(sp)
    4dc4:	d9800804 	addi	r6,sp,32
    4dc8:	a92bc83a 	sub	r21,r21,r4
    4dcc:	a9000288 	cmpgei	r4,r21,10
    4dd0:	2000051e 	bne	r4,zero,4de8 <___vfprintf_internal_r+0x398>
    4dd4:	ad400c04 	addi	r21,r21,48
    4dd8:	e7000044 	addi	fp,fp,1
    4ddc:	e57fffc5 	stb	r21,-1(fp)
    4de0:	102b883a 	mov	r21,r2
    4de4:	003fc206 	br	4cf0 <___vfprintf_internal_r+0x2a0>
    4de8:	d9000217 	ldw	r4,8(sp)
    4dec:	20000226 	beq	r4,zero,4df8 <___vfprintf_internal_r+0x3a8>
    4df0:	ad400dc4 	addi	r21,r21,55
    4df4:	003ff806 	br	4dd8 <___vfprintf_internal_r+0x388>
    4df8:	ad4015c4 	addi	r21,r21,87
    4dfc:	003ff606 	br	4dd8 <___vfprintf_internal_r+0x388>
    4e00:	0540090e 	bge	zero,r21,4e28 <___vfprintf_internal_r+0x3d8>
    4e04:	a80f883a 	mov	r7,r21
    4e08:	01800804 	movi	r6,32
    4e0c:	b80b883a 	mov	r5,r23
    4e10:	8009883a 	mov	r4,r16
    4e14:	d8c00615 	stw	r3,24(sp)
    4e18:	00049e40 	call	49e4 <print_repeat>
    4e1c:	103f421e 	bne	r2,zero,4b28 <___vfprintf_internal_r+0xd8>
    4e20:	d8c00617 	ldw	r3,24(sp)
    4e24:	b56d883a 	add	r22,r22,r21
    4e28:	183fd726 	beq	r3,zero,4d88 <___vfprintf_internal_r+0x338>
    4e2c:	00800b44 	movi	r2,45
    4e30:	d88007c5 	stb	r2,31(sp)
    4e34:	b8800117 	ldw	r2,4(r23)
    4e38:	01c00044 	movi	r7,1
    4e3c:	d98007c4 	addi	r6,sp,31
    4e40:	b80b883a 	mov	r5,r23
    4e44:	8009883a 	mov	r4,r16
    4e48:	103ee83a 	callr	r2
    4e4c:	103f361e 	bne	r2,zero,4b28 <___vfprintf_internal_r+0xd8>
    4e50:	b5800044 	addi	r22,r22,1
    4e54:	003fcc06 	br	4d88 <___vfprintf_internal_r+0x338>
    4e58:	e0bfffc3 	ldbu	r2,-1(fp)
    4e5c:	01c00044 	movi	r7,1
    4e60:	d98007c4 	addi	r6,sp,31
    4e64:	d88007c5 	stb	r2,31(sp)
    4e68:	b8800117 	ldw	r2,4(r23)
    4e6c:	b80b883a 	mov	r5,r23
    4e70:	8009883a 	mov	r4,r16
    4e74:	e73fffc4 	addi	fp,fp,-1
    4e78:	103ee83a 	callr	r2
    4e7c:	103fc526 	beq	r2,zero,4d94 <___vfprintf_internal_r+0x344>
    4e80:	003f2906 	br	4b28 <___vfprintf_internal_r+0xd8>
    4e84:	88800090 	cmplti	r2,r17,2
    4e88:	1000081e 	bne	r2,zero,4eac <___vfprintf_internal_r+0x45c>
    4e8c:	8d7fffc4 	addi	r21,r17,-1
    4e90:	a80f883a 	mov	r7,r21
    4e94:	01800804 	movi	r6,32
    4e98:	b80b883a 	mov	r5,r23
    4e9c:	8009883a 	mov	r4,r16
    4ea0:	00049e40 	call	49e4 <print_repeat>
    4ea4:	103f201e 	bne	r2,zero,4b28 <___vfprintf_internal_r+0xd8>
    4ea8:	b56d883a 	add	r22,r22,r21
    4eac:	e0800017 	ldw	r2,0(fp)
    4eb0:	01c00044 	movi	r7,1
    4eb4:	d9800804 	addi	r6,sp,32
    4eb8:	d8800805 	stb	r2,32(sp)
    4ebc:	b8800117 	ldw	r2,4(r23)
    4ec0:	b80b883a 	mov	r5,r23
    4ec4:	8009883a 	mov	r4,r16
    4ec8:	e5400104 	addi	r21,fp,4
    4ecc:	103ee83a 	callr	r2
    4ed0:	103f151e 	bne	r2,zero,4b28 <___vfprintf_internal_r+0xd8>
    4ed4:	b5800044 	addi	r22,r22,1
    4ed8:	a839883a 	mov	fp,r21
    4edc:	003ef706 	br	4abc <___vfprintf_internal_r+0x6c>
    4ee0:	d8000215 	stw	zero,8(sp)
    4ee4:	d8000115 	stw	zero,4(sp)
    4ee8:	d8000015 	stw	zero,0(sp)
    4eec:	04c00044 	movi	r19,1
    4ef0:	05000284 	movi	r20,10
    4ef4:	04bfffc4 	movi	r18,-1
    4ef8:	047fffc4 	movi	r17,-1
    4efc:	00800044 	movi	r2,1
    4f00:	003eee06 	br	4abc <___vfprintf_internal_r+0x6c>
    4f04:	00800044 	movi	r2,1
    4f08:	d8800015 	stw	r2,0(sp)
    4f0c:	003efa06 	br	4af8 <___vfprintf_internal_r+0xa8>
    4f10:	00800044 	movi	r2,1
    4f14:	d8800115 	stw	r2,4(sp)
    4f18:	008000c4 	movi	r2,3
    4f1c:	003ee706 	br	4abc <___vfprintf_internal_r+0x6c>
    4f20:	05000204 	movi	r20,8
    4f24:	e0800104 	addi	r2,fp,4
    4f28:	d8800415 	stw	r2,16(sp)
    4f2c:	e5400017 	ldw	r21,0(fp)
    4f30:	0027883a 	mov	r19,zero
    4f34:	0007883a 	mov	r3,zero
    4f38:	003f6b06 	br	4ce8 <___vfprintf_internal_r+0x298>

00004f3c <__vfprintf_internal>:
    4f3c:	00800074 	movhi	r2,1
    4f40:	300f883a 	mov	r7,r6
    4f44:	280d883a 	mov	r6,r5
    4f48:	200b883a 	mov	r5,r4
    4f4c:	11209c17 	ldw	r4,-32144(r2)
    4f50:	0004a501 	jmpi	4a50 <___vfprintf_internal_r>

00004f54 <__sfvwrite_small_dev>:
    4f54:	2880000b 	ldhu	r2,0(r5)
    4f58:	1080020c 	andi	r2,r2,8
    4f5c:	10002526 	beq	r2,zero,4ff4 <__sfvwrite_small_dev+0xa0>
    4f60:	2880008f 	ldh	r2,2(r5)
    4f64:	defffb04 	addi	sp,sp,-20
    4f68:	dcc00315 	stw	r19,12(sp)
    4f6c:	dc800215 	stw	r18,8(sp)
    4f70:	dc400115 	stw	r17,4(sp)
    4f74:	dc000015 	stw	r16,0(sp)
    4f78:	dfc00415 	stw	ra,16(sp)
    4f7c:	2027883a 	mov	r19,r4
    4f80:	2821883a 	mov	r16,r5
    4f84:	3025883a 	mov	r18,r6
    4f88:	3823883a 	mov	r17,r7
    4f8c:	1000100e 	bge	r2,zero,4fd0 <__sfvwrite_small_dev+0x7c>
    4f90:	8080000b 	ldhu	r2,0(r16)
    4f94:	10801014 	ori	r2,r2,64
    4f98:	8080000d 	sth	r2,0(r16)
    4f9c:	00bfffc4 	movi	r2,-1
    4fa0:	00000d06 	br	4fd8 <__sfvwrite_small_dev+0x84>
    4fa4:	88810050 	cmplti	r2,r17,1025
    4fa8:	880f883a 	mov	r7,r17
    4fac:	1000011e 	bne	r2,zero,4fb4 <__sfvwrite_small_dev+0x60>
    4fb0:	01c10004 	movi	r7,1024
    4fb4:	8140008f 	ldh	r5,2(r16)
    4fb8:	900d883a 	mov	r6,r18
    4fbc:	9809883a 	mov	r4,r19
    4fc0:	00050180 	call	5018 <_write_r>
    4fc4:	00bff20e 	bge	zero,r2,4f90 <__sfvwrite_small_dev+0x3c>
    4fc8:	88a3c83a 	sub	r17,r17,r2
    4fcc:	90a5883a 	add	r18,r18,r2
    4fd0:	047ff416 	blt	zero,r17,4fa4 <__sfvwrite_small_dev+0x50>
    4fd4:	0005883a 	mov	r2,zero
    4fd8:	dfc00417 	ldw	ra,16(sp)
    4fdc:	dcc00317 	ldw	r19,12(sp)
    4fe0:	dc800217 	ldw	r18,8(sp)
    4fe4:	dc400117 	ldw	r17,4(sp)
    4fe8:	dc000017 	ldw	r16,0(sp)
    4fec:	dec00504 	addi	sp,sp,20
    4ff0:	f800283a 	ret
    4ff4:	00bfffc4 	movi	r2,-1
    4ff8:	f800283a 	ret

00004ffc <strlen>:
    4ffc:	2005883a 	mov	r2,r4
    5000:	10c00007 	ldb	r3,0(r2)
    5004:	1800021e 	bne	r3,zero,5010 <strlen+0x14>
    5008:	1105c83a 	sub	r2,r2,r4
    500c:	f800283a 	ret
    5010:	10800044 	addi	r2,r2,1
    5014:	003ffa06 	br	5000 <strlen+0x4>

00005018 <_write_r>:
    5018:	defffe04 	addi	sp,sp,-8
    501c:	dc000015 	stw	r16,0(sp)
    5020:	00800074 	movhi	r2,1
    5024:	2021883a 	mov	r16,r4
    5028:	2809883a 	mov	r4,r5
    502c:	300b883a 	mov	r5,r6
    5030:	380d883a 	mov	r6,r7
    5034:	dfc00115 	stw	ra,4(sp)
    5038:	1020b815 	stw	zero,-32032(r2)
    503c:	00055040 	call	5504 <write>
    5040:	10ffffd8 	cmpnei	r3,r2,-1
    5044:	1800041e 	bne	r3,zero,5058 <_write_r+0x40>
    5048:	00c00074 	movhi	r3,1
    504c:	18e0b817 	ldw	r3,-32032(r3)
    5050:	18000126 	beq	r3,zero,5058 <_write_r+0x40>
    5054:	80c00015 	stw	r3,0(r16)
    5058:	dfc00117 	ldw	ra,4(sp)
    505c:	dc000017 	ldw	r16,0(sp)
    5060:	dec00204 	addi	sp,sp,8
    5064:	f800283a 	ret

00005068 <__divsi3>:
    5068:	20001a16 	blt	r4,zero,50d4 <__divsi3+0x6c>
    506c:	000f883a 	mov	r7,zero
    5070:	2800020e 	bge	r5,zero,507c <__divsi3+0x14>
    5074:	014bc83a 	sub	r5,zero,r5
    5078:	39c0005c 	xori	r7,r7,1
    507c:	200d883a 	mov	r6,r4
    5080:	00c00044 	movi	r3,1
    5084:	2900092e 	bgeu	r5,r4,50ac <__divsi3+0x44>
    5088:	00800804 	movi	r2,32
    508c:	00c00044 	movi	r3,1
    5090:	00000106 	br	5098 <__divsi3+0x30>
    5094:	10001226 	beq	r2,zero,50e0 <__divsi3+0x78>
    5098:	294b883a 	add	r5,r5,r5
    509c:	10bfffc4 	addi	r2,r2,-1
    50a0:	18c7883a 	add	r3,r3,r3
    50a4:	293ffb36 	bltu	r5,r4,5094 <__divsi3+0x2c>
    50a8:	18000d26 	beq	r3,zero,50e0 <__divsi3+0x78>
    50ac:	0005883a 	mov	r2,zero
    50b0:	31400236 	bltu	r6,r5,50bc <__divsi3+0x54>
    50b4:	314dc83a 	sub	r6,r6,r5
    50b8:	10c4b03a 	or	r2,r2,r3
    50bc:	1806d07a 	srli	r3,r3,1
    50c0:	280ad07a 	srli	r5,r5,1
    50c4:	183ffa1e 	bne	r3,zero,50b0 <__divsi3+0x48>
    50c8:	38000126 	beq	r7,zero,50d0 <__divsi3+0x68>
    50cc:	0085c83a 	sub	r2,zero,r2
    50d0:	f800283a 	ret
    50d4:	0109c83a 	sub	r4,zero,r4
    50d8:	01c00044 	movi	r7,1
    50dc:	003fe406 	br	5070 <__divsi3+0x8>
    50e0:	0005883a 	mov	r2,zero
    50e4:	003ff806 	br	50c8 <__divsi3+0x60>

000050e8 <__modsi3>:
    50e8:	20001916 	blt	r4,zero,5150 <__modsi3+0x68>
    50ec:	000f883a 	mov	r7,zero
    50f0:	2005883a 	mov	r2,r4
    50f4:	2800010e 	bge	r5,zero,50fc <__modsi3+0x14>
    50f8:	014bc83a 	sub	r5,zero,r5
    50fc:	00c00044 	movi	r3,1
    5100:	2900092e 	bgeu	r5,r4,5128 <__modsi3+0x40>
    5104:	01800804 	movi	r6,32
    5108:	00c00044 	movi	r3,1
    510c:	00000106 	br	5114 <__modsi3+0x2c>
    5110:	30000d26 	beq	r6,zero,5148 <__modsi3+0x60>
    5114:	294b883a 	add	r5,r5,r5
    5118:	31bfffc4 	addi	r6,r6,-1
    511c:	18c7883a 	add	r3,r3,r3
    5120:	293ffb36 	bltu	r5,r4,5110 <__modsi3+0x28>
    5124:	18000826 	beq	r3,zero,5148 <__modsi3+0x60>
    5128:	1806d07a 	srli	r3,r3,1
    512c:	11400136 	bltu	r2,r5,5134 <__modsi3+0x4c>
    5130:	1145c83a 	sub	r2,r2,r5
    5134:	280ad07a 	srli	r5,r5,1
    5138:	183ffb1e 	bne	r3,zero,5128 <__modsi3+0x40>
    513c:	38000126 	beq	r7,zero,5144 <__modsi3+0x5c>
    5140:	0085c83a 	sub	r2,zero,r2
    5144:	f800283a 	ret
    5148:	2005883a 	mov	r2,r4
    514c:	003ffb06 	br	513c <__modsi3+0x54>
    5150:	0109c83a 	sub	r4,zero,r4
    5154:	01c00044 	movi	r7,1
    5158:	003fe506 	br	50f0 <__modsi3+0x8>

0000515c <__udivsi3>:
    515c:	200d883a 	mov	r6,r4
    5160:	2900152e 	bgeu	r5,r4,51b8 <__udivsi3+0x5c>
    5164:	28001416 	blt	r5,zero,51b8 <__udivsi3+0x5c>
    5168:	00800804 	movi	r2,32
    516c:	00c00044 	movi	r3,1
    5170:	00000206 	br	517c <__udivsi3+0x20>
    5174:	10000e26 	beq	r2,zero,51b0 <__udivsi3+0x54>
    5178:	28000516 	blt	r5,zero,5190 <__udivsi3+0x34>
    517c:	294b883a 	add	r5,r5,r5
    5180:	10bfffc4 	addi	r2,r2,-1
    5184:	18c7883a 	add	r3,r3,r3
    5188:	293ffa36 	bltu	r5,r4,5174 <__udivsi3+0x18>
    518c:	18000826 	beq	r3,zero,51b0 <__udivsi3+0x54>
    5190:	0005883a 	mov	r2,zero
    5194:	31400236 	bltu	r6,r5,51a0 <__udivsi3+0x44>
    5198:	314dc83a 	sub	r6,r6,r5
    519c:	10c4b03a 	or	r2,r2,r3
    51a0:	1806d07a 	srli	r3,r3,1
    51a4:	280ad07a 	srli	r5,r5,1
    51a8:	183ffa1e 	bne	r3,zero,5194 <__udivsi3+0x38>
    51ac:	f800283a 	ret
    51b0:	0005883a 	mov	r2,zero
    51b4:	f800283a 	ret
    51b8:	00c00044 	movi	r3,1
    51bc:	003ff406 	br	5190 <__udivsi3+0x34>

000051c0 <__umodsi3>:
    51c0:	2005883a 	mov	r2,r4
    51c4:	2900132e 	bgeu	r5,r4,5214 <__umodsi3+0x54>
    51c8:	28001216 	blt	r5,zero,5214 <__umodsi3+0x54>
    51cc:	01800804 	movi	r6,32
    51d0:	00c00044 	movi	r3,1
    51d4:	00000206 	br	51e0 <__umodsi3+0x20>
    51d8:	30000c26 	beq	r6,zero,520c <__umodsi3+0x4c>
    51dc:	28000516 	blt	r5,zero,51f4 <__umodsi3+0x34>
    51e0:	294b883a 	add	r5,r5,r5
    51e4:	31bfffc4 	addi	r6,r6,-1
    51e8:	18c7883a 	add	r3,r3,r3
    51ec:	293ffa36 	bltu	r5,r4,51d8 <__umodsi3+0x18>
    51f0:	18000626 	beq	r3,zero,520c <__umodsi3+0x4c>
    51f4:	1806d07a 	srli	r3,r3,1
    51f8:	11400136 	bltu	r2,r5,5200 <__umodsi3+0x40>
    51fc:	1145c83a 	sub	r2,r2,r5
    5200:	280ad07a 	srli	r5,r5,1
    5204:	183ffb1e 	bne	r3,zero,51f4 <__umodsi3+0x34>
    5208:	f800283a 	ret
    520c:	2005883a 	mov	r2,r4
    5210:	f800283a 	ret
    5214:	00c00044 	movi	r3,1
    5218:	003ff606 	br	51f4 <__umodsi3+0x34>

0000521c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    521c:	00800074 	movhi	r2,1
    5220:	11e07d17 	ldw	r7,-32268(r2)
{
    5224:	defffe04 	addi	sp,sp,-8
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    5228:	01000074 	movhi	r4,1
    522c:	01800044 	movi	r6,1
    5230:	d94000c4 	addi	r5,sp,3
    5234:	21209e04 	addi	r4,r4,-32136
{
    5238:	dfc00115 	stw	ra,4(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    523c:	00055ac0 	call	55ac <altera_avalon_jtag_uart_read>
    5240:	0080040e 	bge	zero,r2,5254 <alt_getchar+0x38>
        return -1;
    }
    return c;
    5244:	d88000c7 	ldb	r2,3(sp)
#else
    return getchar();
#endif
#endif
}
    5248:	dfc00117 	ldw	ra,4(sp)
    524c:	dec00204 	addi	sp,sp,8
    5250:	f800283a 	ret
        return -1;
    5254:	00bfffc4 	movi	r2,-1
    5258:	003ffb06 	br	5248 <alt_getchar+0x2c>

0000525c <getpid>:
 */
 
int ALT_GETPID (void)
{
  return 0;
}
    525c:	0005883a 	mov	r2,zero
    5260:	f800283a 	ret

00005264 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    5264:	defffe04 	addi	sp,sp,-8
    5268:	dfc00115 	stw	ra,4(sp)
    526c:	dc000015 	stw	r16,0(sp)
  int status = 0;

  if (pid <= 0)
    5270:	01002916 	blt	zero,r4,5318 <kill+0xb4>
  {
    switch (sig)
    5274:	28800828 	cmpgeui	r2,r5,32
    5278:	1000311e 	bne	r2,zero,5340 <kill+0xdc>
    527c:	280a90ba 	slli	r5,r5,2
    5280:	00800034 	movhi	r2,0
    5284:	2885883a 	add	r2,r5,r2
    5288:	1094a417 	ldw	r2,21136(r2)
    528c:	1000683a 	jmp	r2
    5290:	00005350 	cmplti	zero,zero,333
    5294:	00005340 	call	534 <microshell_getline+0x2dc>
    5298:	00005340 	call	534 <microshell_getline+0x2dc>
    529c:	00005310 	cmplti	zero,zero,332
    52a0:	00005310 	cmplti	zero,zero,332
    52a4:	00005310 	cmplti	zero,zero,332
    52a8:	00005310 	cmplti	zero,zero,332
    52ac:	00005340 	call	534 <microshell_getline+0x2dc>
    52b0:	00005310 	cmplti	zero,zero,332
    52b4:	00005310 	cmplti	zero,zero,332
    52b8:	00005310 	cmplti	zero,zero,332
    52bc:	00005310 	cmplti	zero,zero,332
    52c0:	00005310 	cmplti	zero,zero,332
    52c4:	00005310 	cmplti	zero,zero,332
    52c8:	00005310 	cmplti	zero,zero,332
    52cc:	00005310 	cmplti	zero,zero,332
    52d0:	00005350 	cmplti	zero,zero,333
    52d4:	00005340 	call	534 <microshell_getline+0x2dc>
    52d8:	00005340 	call	534 <microshell_getline+0x2dc>
    52dc:	00005340 	call	534 <microshell_getline+0x2dc>
    52e0:	00005350 	cmplti	zero,zero,333
    52e4:	00005340 	call	534 <microshell_getline+0x2dc>
    52e8:	00005340 	call	534 <microshell_getline+0x2dc>
    52ec:	00005310 	cmplti	zero,zero,332
    52f0:	00005310 	cmplti	zero,zero,332
    52f4:	00005310 	cmplti	zero,zero,332
    52f8:	00005310 	cmplti	zero,zero,332
    52fc:	00005310 	cmplti	zero,zero,332
    5300:	00005340 	call	534 <microshell_getline+0x2dc>
    5304:	00005340 	call	534 <microshell_getline+0x2dc>
    5308:	00005310 	cmplti	zero,zero,332
    530c:	00005310 	cmplti	zero,zero,332
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    5310:	0009883a 	mov	r4,zero
    5314:	000000c0 	call	c <_exit>

  else if (pid > 0)
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    5318:	040000c4 	movi	r16,3

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    531c:	d0a01217 	ldw	r2,-32696(gp)
    5320:	10000926 	beq	r2,zero,5348 <kill+0xe4>
    5324:	103ee83a 	callr	r2
  }

  if (status)
  {
    ALT_ERRNO = status;
    5328:	14000015 	stw	r16,0(r2)
    return -1;
    532c:	00bfffc4 	movi	r2,-1
  }

  return 0;
}
    5330:	dfc00117 	ldw	ra,4(sp)
    5334:	dc000017 	ldw	r16,0(sp)
    5338:	dec00204 	addi	sp,sp,8
    533c:	f800283a 	ret
  if (pid <= 0)
    5340:	04000584 	movi	r16,22
    5344:	003ff506 	br	531c <kill+0xb8>
    5348:	d0a02704 	addi	r2,gp,-32612
    534c:	003ff606 	br	5328 <kill+0xc4>
    5350:	0005883a 	mov	r2,zero
    5354:	003ff606 	br	5330 <kill+0xcc>

00005358 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5358:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    535c:	01000074 	movhi	r4,1
    5360:	01400034 	movhi	r5,0
    5364:	dfc00015 	stw	ra,0(sp)
    5368:	21200004 	addi	r4,r4,-32768
    536c:	29583f04 	addi	r5,r5,24828
    5370:	21400426 	beq	r4,r5,5384 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    5374:	01800074 	movhi	r6,1
    5378:	31a0a404 	addi	r6,r6,-32112
    537c:	310dc83a 	sub	r6,r6,r4
    5380:	00044f40 	call	44f4 <memcpy>
  if (to != from)
    5384:	01000034 	movhi	r4,0
    5388:	01400034 	movhi	r5,0
    538c:	21000804 	addi	r4,r4,32
    5390:	29400804 	addi	r5,r5,32
    5394:	21400426 	beq	r4,r5,53a8 <alt_load+0x50>
      *to++ = *from++;
    5398:	01800034 	movhi	r6,0
    539c:	31800804 	addi	r6,r6,32
    53a0:	310dc83a 	sub	r6,r6,r4
    53a4:	00044f40 	call	44f4 <memcpy>
  if (to != from)
    53a8:	01000034 	movhi	r4,0
    53ac:	01400034 	movhi	r5,0
    53b0:	21174804 	addi	r4,r4,23840
    53b4:	29574804 	addi	r5,r5,23840
    53b8:	21400426 	beq	r4,r5,53cc <alt_load+0x74>
      *to++ = *from++;
    53bc:	01800034 	movhi	r6,0
    53c0:	31983f04 	addi	r6,r6,24828
    53c4:	310dc83a 	sub	r6,r6,r4
    53c8:	00044f40 	call	44f4 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    53cc:	0005b780 	call	5b78 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    53d0:	dfc00017 	ldw	ra,0(sp)
    53d4:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    53d8:	0005ca81 	jmpi	5ca8 <alt_icache_flush_all>

000053dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    53dc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    53e0:	0009883a 	mov	r4,zero
{
    53e4:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    53e8:	00055600 	call	5560 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    53ec:	000558c0 	call	558c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    53f0:	0005bf00 	call	5bf0 <_do_ctors>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    53f4:	d1a02817 	ldw	r6,-32608(gp)
    53f8:	d1602917 	ldw	r5,-32604(gp)
    53fc:	d1202a17 	ldw	r4,-32600(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5400:	dfc00017 	ldw	ra,0(sp)
    5404:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    5408:	0001b441 	jmpi	1b44 <main>

0000540c <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    540c:	f800283a 	ret

00005410 <__malloc_unlock>:
    5410:	f800283a 	ret

00005414 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    5414:	defffd04 	addi	sp,sp,-12
    5418:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    541c:	d90000c5 	stb	r4,3(sp)
{
    5420:	2021883a 	mov	r16,r4

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    5424:	01000074 	movhi	r4,1
    5428:	000f883a 	mov	r7,zero
    542c:	01800044 	movi	r6,1
    5430:	d94000c4 	addi	r5,sp,3
    5434:	21209e04 	addi	r4,r4,-32136
{
    5438:	dfc00215 	stw	ra,8(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    543c:	00056040 	call	5604 <altera_avalon_jtag_uart_write>
    5440:	10bfffd8 	cmpnei	r2,r2,-1
    5444:	1000011e 	bne	r2,zero,544c <alt_putchar+0x38>
        return -1;
    5448:	043fffc4 	movi	r16,-1
    return c;
#else
    return putchar(c);
#endif
#endif
}
    544c:	8005883a 	mov	r2,r16
    5450:	dfc00217 	ldw	ra,8(sp)
    5454:	dc000117 	ldw	r16,4(sp)
    5458:	dec00304 	addi	sp,sp,12
    545c:	f800283a 	ret

00005460 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    5460:	defffe04 	addi	sp,sp,-8
    5464:	dc000015 	stw	r16,0(sp)
    5468:	dfc00115 	stw	ra,4(sp)
    546c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5470:	0004ffc0 	call	4ffc <strlen>
    5474:	01000074 	movhi	r4,1
    5478:	000f883a 	mov	r7,zero
    547c:	100d883a 	mov	r6,r2
    5480:	800b883a 	mov	r5,r16
    5484:	21209e04 	addi	r4,r4,-32136
#else
    return fputs(str, stdout);
#endif
#endif
}
    5488:	dfc00117 	ldw	ra,4(sp)
    548c:	dc000017 	ldw	r16,0(sp)
    5490:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5494:	00056041 	jmpi	5604 <altera_avalon_jtag_uart_write>

00005498 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5498:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    549c:	017fff84 	movi	r5,-2
    54a0:	1944703a 	and	r2,r3,r5
    54a4:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    54a8:	d0a00c17 	ldw	r2,-32720(gp)
    54ac:	01bfff04 	movi	r6,-4
    54b0:	18c0004c 	andi	r3,r3,1
    54b4:	108000c4 	addi	r2,r2,3
    54b8:	1184703a 	and	r2,r2,r6
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    54bc:	01800074 	movhi	r6,1
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    54c0:	d0a00c15 	stw	r2,-32720(gp)
  if ((heap_end + incr) > __alt_heap_limit) {
    54c4:	1109883a 	add	r4,r2,r4
    54c8:	31a40004 	addi	r6,r6,-28672
    54cc:	3100062e 	bgeu	r6,r4,54e8 <sbrk+0x50>
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    54d0:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    54d4:	2148703a 	and	r4,r4,r5
  status |= (context & NIOS2_STATUS_PIE_MSK);
    54d8:	1906b03a 	or	r3,r3,r4
  
  NIOS2_WRITE_STATUS (status);
    54dc:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    54e0:	00bfffc4 	movi	r2,-1
    54e4:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    54e8:	d1200c15 	stw	r4,-32720(gp)
  NIOS2_READ_STATUS (status);
    54ec:	0009303a 	rdctl	r4,status
  status &= ~NIOS2_STATUS_PIE_MSK;
    54f0:	2148703a 	and	r4,r4,r5
  status |= (context & NIOS2_STATUS_PIE_MSK);
    54f4:	1906b03a 	or	r3,r3,r4
  NIOS2_WRITE_STATUS (status);
    54f8:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    54fc:	f800283a 	ret

00005500 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    5500:	0005af41 	jmpi	5af4 <alt_busy_sleep>

00005504 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5504:	213fffc4 	addi	r4,r4,-1
    5508:	210000a8 	cmpgeui	r4,r4,2
    550c:	2000041e 	bne	r4,zero,5520 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    5510:	01000074 	movhi	r4,1
    5514:	000f883a 	mov	r7,zero
    5518:	21209e04 	addi	r4,r4,-32136
    551c:	00056041 	jmpi	5604 <altera_avalon_jtag_uart_write>
    5520:	d0a01217 	ldw	r2,-32696(gp)
    5524:	10000926 	beq	r2,zero,554c <write+0x48>
{
    5528:	deffff04 	addi	sp,sp,-4
    552c:	dfc00015 	stw	ra,0(sp)
    5530:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5534:	00c01444 	movi	r3,81
    5538:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    553c:	00bfffc4 	movi	r2,-1
    5540:	dfc00017 	ldw	ra,0(sp)
    5544:	dec00104 	addi	sp,sp,4
    5548:	f800283a 	ret
    554c:	d0a02704 	addi	r2,gp,-32612
        ALT_ERRNO = EBADFD;
    5550:	00c01444 	movi	r3,81
    5554:	10c00015 	stw	r3,0(r2)
}
    5558:	00bfffc4 	movi	r2,-1
    555c:	f800283a 	ret

00005560 <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    5560:	01000074 	movhi	r4,1
{
    5564:	deffff04 	addi	sp,sp,-4
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    5568:	21205404 	addi	r4,r4,-32432
{
    556c:	dfc00015 	stw	ra,0(sp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    5570:	00059dc0 	call	59dc <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5574:	00802034 	movhi	r2,128
    5578:	10800044 	addi	r2,r2,1
    557c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5580:	dfc00017 	ldw	ra,0(sp)
    5584:	dec00104 	addi	sp,sp,4
    5588:	f800283a 	ret

0000558c <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
    558c:	00c00044 	movi	r3,1
    5590:	00b1c014 	movui	r2,50944
    5594:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SPI_INIT ( SPIM_0, spim_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_MSGDMA_INIT ( MSGDMA_0, msgdma_0);
    5598:	01000074 	movhi	r4,1
    559c:	21203c04 	addi	r4,r4,-32528
    55a0:	21800817 	ldw	r6,32(r4)
    55a4:	21400717 	ldw	r5,28(r4)
    55a8:	00058541 	jmpi	5854 <alt_msgdma_init>

000055ac <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    55ac:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    55b0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    55b4:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    55b8:	3a10000c 	andi	r8,r7,16384
  while (ptr < end)
    55bc:	11800536 	bltu	r2,r6,55d4 <altera_avalon_jtag_uart_read+0x28>
      break;   
    
  }

  if (ptr != buffer)
    55c0:	11400b1e 	bne	r2,r5,55f0 <altera_avalon_jtag_uart_read+0x44>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    55c4:	39d0000c 	andi	r7,r7,16384
    55c8:	38000c1e 	bne	r7,zero,55fc <altera_avalon_jtag_uart_read+0x50>
    return -EWOULDBLOCK;
  else
    return -EIO;
    55cc:	00bffec4 	movi	r2,-5
}
    55d0:	f800283a 	ret
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    55d4:	20c00037 	ldwio	r3,0(r4)
    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    55d8:	1a60000c 	andi	r9,r3,32768
    55dc:	48000326 	beq	r9,zero,55ec <altera_avalon_jtag_uart_read+0x40>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    55e0:	10c00005 	stb	r3,0(r2)
    55e4:	10800044 	addi	r2,r2,1
    55e8:	003ff406 	br	55bc <altera_avalon_jtag_uart_read+0x10>
    else if (ptr != buffer)
    55ec:	11400226 	beq	r2,r5,55f8 <altera_avalon_jtag_uart_read+0x4c>
    return ptr - buffer;
    55f0:	1145c83a 	sub	r2,r2,r5
    55f4:	f800283a 	ret
    else if(flags & O_NONBLOCK)
    55f8:	403ff026 	beq	r8,zero,55bc <altera_avalon_jtag_uart_read+0x10>
    return -EWOULDBLOCK;
    55fc:	00bffd44 	movi	r2,-11
    5600:	f800283a 	ret

00005604 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    5604:	21000017 	ldw	r4,0(r4)
{
    5608:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    560c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    5610:	29800136 	bltu	r5,r6,5618 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    5614:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5618:	20c00137 	ldwio	r3,4(r4)
    561c:	18ffffec 	andhi	r3,r3,65535
    5620:	183ffb26 	beq	r3,zero,5610 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5624:	28c00007 	ldb	r3,0(r5)
    5628:	29400044 	addi	r5,r5,1
    562c:	20c00035 	stwio	r3,0(r4)
    5630:	003ff706 	br	5610 <altera_avalon_jtag_uart_write+0xc>

00005634 <perf_get_section_time>:
{
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;

  PERF_STOP_MEASURING(hw_base_address);
    5634:	20000035 	stwio	zero,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
    5638:	2804913a 	slli	r2,r5,4
    563c:	2085883a 	add	r2,r4,r2
    5640:	10800037 	ldwio	r2,0(r2)
  hi = IORD(hw_base_address, ((which_section*4)+1));
    5644:	280a913a 	slli	r5,r5,4
    5648:	29400104 	addi	r5,r5,4
    564c:	214b883a 	add	r5,r4,r5
    5650:	28c00037 	ldwio	r3,0(r5)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
}
    5654:	f800283a 	ret

00005658 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    5658:	d8800017 	ldw	r2,0(sp)
    565c:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5660:	00c00044 	movi	r3,1
{
    5664:	da400217 	ldw	r9,8(sp)
  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5668:	1946983a 	sll	r3,r3,r5
  const alt_u8 * write_end = write_data + write_length;
    566c:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
    5670:	409b883a 	add	r13,r8,r2
  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5674:	20c00535 	stwio	r3,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    5678:	48c0008c 	andi	r3,r9,2
    567c:	1800021e 	bne	r3,zero,5688 <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    5680:	00c10004 	movi	r3,1024
    5684:	20c00335 	stwio	r3,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5688:	20c00037 	ldwio	r3,0(r4)
  alt_32 credits = 1;
    568c:	00c00044 	movi	r3,1
  alt_u32 write_zeros = read_length;
    5690:	1015883a 	mov	r10,r2
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5694:	23000204 	addi	r12,r4,8
    5698:	21400237 	ldwio	r5,8(r4)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    569c:	2ac0100c 	andi	r11,r5,64
    56a0:	2940200c 	andi	r5,r5,128
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    56a4:	58000126 	beq	r11,zero,56ac <alt_avalon_spi_command+0x54>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    56a8:	1800021e 	bne	r3,zero,56b4 <alt_avalon_spi_command+0x5c>
    56ac:	283ff926 	beq	r5,zero,5694 <alt_avalon_spi_command+0x3c>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    56b0:	58000726 	beq	r11,zero,56d0 <alt_avalon_spi_command+0x78>
    56b4:	00c0060e 	bge	zero,r3,56d0 <alt_avalon_spi_command+0x78>
    {
      credits--;
    56b8:	18ffffc4 	addi	r3,r3,-1

      if (write_data < write_end)
    56bc:	3b80122e 	bgeu	r7,r14,5708 <alt_avalon_spi_command+0xb0>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    56c0:	3ac00044 	addi	r11,r7,1
    56c4:	39c00003 	ldbu	r7,0(r7)
    56c8:	21c00135 	stwio	r7,4(r4)
    56cc:	580f883a 	mov	r7,r11
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    56d0:	283ff026 	beq	r5,zero,5694 <alt_avalon_spi_command+0x3c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    56d4:	21400037 	ldwio	r5,0(r4)

      if (read_ignore > 0)
    56d8:	30001126 	beq	r6,zero,5720 <alt_avalon_spi_command+0xc8>
        read_ignore--;
    56dc:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;
    56e0:	18c00044 	addi	r3,r3,1

      if (read_ignore == 0 && read_data == read_end)
    56e4:	303feb1e 	bne	r6,zero,5694 <alt_avalon_spi_command+0x3c>
    56e8:	437fea1e 	bne	r8,r13,5694 <alt_avalon_spi_command+0x3c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    56ec:	60c00037 	ldwio	r3,0(r12)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    56f0:	18c0080c 	andi	r3,r3,32
    56f4:	183ffd26 	beq	r3,zero,56ec <alt_avalon_spi_command+0x94>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    56f8:	4a40004c 	andi	r9,r9,1
    56fc:	4800011e 	bne	r9,zero,5704 <alt_avalon_spi_command+0xac>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    5700:	20000335 	stwio	zero,12(r4)

  return read_length;
}
    5704:	f800283a 	ret
      else if (write_zeros > 0)
    5708:	50000326 	beq	r10,zero,5718 <alt_avalon_spi_command+0xc0>
        write_zeros--;
    570c:	52bfffc4 	addi	r10,r10,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    5710:	20000135 	stwio	zero,4(r4)
    5714:	003fee06 	br	56d0 <alt_avalon_spi_command+0x78>
        credits = -1024;
    5718:	00ff0004 	movi	r3,-1024
    571c:	003fec06 	br	56d0 <alt_avalon_spi_command+0x78>
        *read_data++ = (alt_u8)rxdata;
    5720:	41400005 	stb	r5,0(r8)
    5724:	42000044 	addi	r8,r8,1
    5728:	003fed06 	br	56e0 <alt_avalon_spi_command+0x88>

0000572c <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
    572c:	defffc04 	addi	sp,sp,-16
    5730:	dc000015 	stw	r16,0(sp)
    5734:	dfc00315 	stw	ra,12(sp)
    5738:	dc800215 	stw	r18,8(sp)
    573c:	dc400115 	stw	r17,4(sp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    5740:	20801783 	ldbu	r2,94(r4)
{
    5744:	2021883a 	mov	r16,r4
    if (dev->prefetcher_enable)
    5748:	10002126 	beq	r2,zero,57d0 <alt_msgdma_irq+0xa4>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
    574c:	20c00617 	ldw	r3,24(r4)
    5750:	18800037 	ldwio	r2,0(r3)
        temporary_control = 
    5754:	013ffdc4 	movi	r4,-9
    5758:	1104703a 	and	r2,r2,r4
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    575c:	18800035 	stwio	r2,0(r3)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
    5760:	80800617 	ldw	r2,24(r16)
    5764:	00c00044 	movi	r3,1
    5768:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
    576c:	80800b17 	ldw	r2,44(r16)
    5770:	10000b26 	beq	r2,zero,57a0 <alt_msgdma_irq+0x74>
  NIOS2_READ_STATUS (context);
    5774:	0023303a 	rdctl	r17,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5778:	04bfff84 	movi	r18,-2
    577c:	8c86703a 	and	r3,r17,r18
    5780:	1801703a 	wrctl	status,r3
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback (dev->callback_context);
    5784:	81000c17 	ldw	r4,48(r16)
    5788:	103ee83a 	callr	r2
  NIOS2_READ_STATUS (status);
    578c:	0005303a 	rdctl	r2,status
  status &= ~NIOS2_STATUS_PIE_MSK;
    5790:	1484703a 	and	r2,r2,r18
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5794:	8c40004c 	andi	r17,r17,1
    5798:	88a2b03a 	or	r17,r17,r2
  NIOS2_WRITE_STATUS (status);
    579c:	8801703a 	wrctl	status,r17
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    57a0:	80801783 	ldbu	r2,94(r16)
    57a4:	10001326 	beq	r2,zero,57f4 <alt_msgdma_irq+0xc8>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
    57a8:	80c00617 	ldw	r3,24(r16)
    57ac:	18800037 	ldwio	r2,0(r3)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    57b0:	10800214 	ori	r2,r2,8
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    57b4:	18800035 	stwio	r2,0(r3)
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
}
    57b8:	dfc00317 	ldw	ra,12(sp)
    57bc:	dc800217 	ldw	r18,8(sp)
    57c0:	dc400117 	ldw	r17,4(sp)
    57c4:	dc000017 	ldw	r16,0(sp)
    57c8:	dec00404 	addi	sp,sp,16
    57cc:	f800283a 	ret
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
    57d0:	20c00317 	ldw	r3,12(r4)
    57d4:	18800137 	ldwio	r2,4(r3)
    57d8:	013ffbc4 	movi	r4,-17
    57dc:	1104703a 	and	r2,r2,r4
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    57e0:	18800135 	stwio	r2,4(r3)
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
    57e4:	80800317 	ldw	r2,12(r16)
    57e8:	00c08004 	movi	r3,512
    57ec:	10c00035 	stwio	r3,0(r2)
    57f0:	003fde06 	br	576c <alt_msgdma_irq+0x40>
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
    57f4:	80c00317 	ldw	r3,12(r16)
    57f8:	18800137 	ldwio	r2,4(r3)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    57fc:	10800414 	ori	r2,r2,16
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    5800:	18800135 	stwio	r2,4(r3)
    return;
    5804:	003fec06 	br	57b8 <alt_msgdma_irq+0x8c>

00005808 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
    5808:	defffe04 	addi	sp,sp,-8
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
    580c:	d1600e04 	addi	r5,gp,-32712
{
    5810:	dc000015 	stw	r16,0(sp)
    5814:	dfc00115 	stw	ra,4(sp)
    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
    5818:	0005c380 	call	5c38 <alt_find_dev>
    581c:	1021883a 	mov	r16,r2

    if (NULL == dev)
    5820:	1000051e 	bne	r2,zero,5838 <alt_msgdma_open+0x30>
    5824:	d0a01217 	ldw	r2,-32696(gp)
    5828:	10000826 	beq	r2,zero,584c <alt_msgdma_open+0x44>
    582c:	103ee83a 	callr	r2
    {
        ALT_ERRNO = ENODEV;
    5830:	00c004c4 	movi	r3,19
    5834:	10c00015 	stw	r3,0(r2)
    }

    return dev;
}
    5838:	8005883a 	mov	r2,r16
    583c:	dfc00117 	ldw	ra,4(sp)
    5840:	dc000017 	ldw	r16,0(sp)
    5844:	dec00204 	addi	sp,sp,8
    5848:	f800283a 	ret
    584c:	d0a02704 	addi	r2,gp,-32612
    5850:	003ff706 	br	5830 <alt_msgdma_open+0x28>

00005854 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
    5854:	defffb04 	addi	sp,sp,-20
    5858:	dc800315 	stw	r18,12(sp)
    585c:	dc400215 	stw	r17,8(sp)
    5860:	dc000115 	stw	r16,4(sp)
    5864:	dfc00415 	stw	ra,16(sp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
    5868:	20801783 	ldbu	r2,94(r4)
{
    586c:	2021883a 	mov	r16,r4
    5870:	2823883a 	mov	r17,r5
    5874:	3025883a 	mov	r18,r6
    if (dev->prefetcher_enable)
    5878:	10000726 	beq	r2,zero,5898 <alt_msgdma_init+0x44>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
    587c:	20800617 	ldw	r2,24(r4)
    5880:	00c00104 	movi	r3,4
    5884:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
    5888:	80800617 	ldw	r2,24(r16)
    588c:	10800037 	ldwio	r2,0(r2)
    5890:	1080010c 	andi	r2,r2,4
    5894:	103ffc1e 	bne	r2,zero,5888 <alt_msgdma_init+0x34>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    5898:	80800317 	ldw	r2,12(r16)
    589c:	00c00084 	movi	r3,2
    58a0:	10c00135 	stwio	r3,4(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
    58a4:	80c00317 	ldw	r3,12(r16)
    58a8:	18800037 	ldwio	r2,0(r3)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
    58ac:	1080100c 	andi	r2,r2,64
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
    58b0:	103ffc1e 	bne	r2,zero,58a4 <alt_msgdma_init+0x50>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
    58b4:	18800137 	ldwio	r2,4(r3)
    58b8:	013ffbc4 	movi	r4,-17
    58bc:	1104703a 	and	r2,r2,r4
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    58c0:	10800814 	ori	r2,r2,32
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    58c4:	18800135 	stwio	r2,4(r3)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
    58c8:	80800317 	ldw	r2,12(r16)
    58cc:	10c00037 	ldwio	r3,0(r2)
    58d0:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
    58d4:	80801783 	ldbu	r2,94(r16)
    58d8:	10000326 	beq	r2,zero,58e8 <alt_msgdma_init+0x94>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
    58dc:	80800617 	ldw	r2,24(r16)
    58e0:	10c00437 	ldwio	r3,16(r2)
    58e4:	10c00435 	stwio	r3,16(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
    58e8:	8009883a 	mov	r4,r16
    58ec:	d1600e04 	addi	r5,gp,-32712
    58f0:	0005b840 	call	5b84 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
            
    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    58f4:	01800034 	movhi	r6,0
    58f8:	d8000015 	stw	zero,0(sp)
    58fc:	800f883a 	mov	r7,r16
    5900:	3195cb04 	addi	r6,r6,22316
    5904:	900b883a 	mov	r5,r18
    5908:	8809883a 	mov	r4,r17
    590c:	0005a780 	call	5a78 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }
    
    return;

}
    5910:	dfc00417 	ldw	ra,16(sp)
    5914:	dc800317 	ldw	r18,12(sp)
    5918:	dc400217 	ldw	r17,8(sp)
    591c:	dc000117 	ldw	r16,4(sp)
    5920:	dec00504 	addi	sp,sp,20
    5924:	f800283a 	ret

00005928 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5928:	0030e03a 	nextpc	et
    592c:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5938:	0030e03a 	nextpc	et
    593c:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5948:	0030e03a 	nextpc	et
    594c:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5958:	0030e03a 	nextpc	et
    595c:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5968:	0030e03a 	nextpc	et
    596c:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5978:	0030e03a 	nextpc	et
    597c:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5988:	0030e03a 	nextpc	et
    598c:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5998:	0030e03a 	nextpc	et
    599c:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    59a8:	0030e03a 	nextpc	et
    59ac:	00059b81 	jmpi	59b8 <alt_shadow_non_preemptive_interrupt>
	...

000059b8 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
    59b8:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
    59bc:	dec00038 	rdprs	sp,sp,0
   */
    ALT_OS_INT_ENTER_ASM

    /* Re-enable interrupts if preemption into a new register set is enabled */
#ifdef ALTERA_VIC_DRIVER_PREEMPTION_INTO_NEW_REGISTER_SET_ENABLED
    rdctl r5, status
    59c0:	000b303a 	rdctl	r5,status
    ori   r5, r5, NIOS2_STATUS_PIE_MSK
    59c4:	29400054 	ori	r5,r5,1
    wrctl status, r5
    59c8:	2801703a 	wrctl	status,r5
#endif

    ldw r4, 8(et)               /* load isr_context */
    59cc:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
    59d0:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
    59d4:	ef7fff04 	addi	ea,ea,-4
    eret
    59d8:	ef80083a 	eret

000059dc <alt_vic_irq_init>:
{
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
    59dc:	20800117 	ldw	r2,4(r4)
    59e0:	100690ba 	slli	r3,r2,2
    59e4:	d0a02b04 	addi	r2,gp,-32596
    59e8:	10c5883a 	add	r2,r2,r3
    59ec:	11000015 	stw	r4,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
    59f0:	20800017 	ldw	r2,0(r4)
    59f4:	00ffffc4 	movi	r3,-1
    59f8:	10c02235 	stwio	r3,136(r2)

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    59fc:	20c00704 	addi	r3,r4,28
    5a00:	0005883a 	mov	r2,zero
    5a04:	21800217 	ldw	r6,8(r4)
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    5a08:	21400017 	ldw	r5,0(r4)
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    5a0c:	11800e36 	bltu	r2,r6,5a48 <alt_vic_irq_init+0x6c>
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
    5a10:	21c00517 	ldw	r7,20(r4)
    5a14:	00800034 	movhi	r2,0
    5a18:	10983404 	addi	r2,r2,24784
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    5a1c:	0007883a 	mov	r3,zero
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
    5a20:	11800017 	ldw	r6,0(r2)
    5a24:	31c00f1e 	bne	r6,r7,5a64 <alt_vic_irq_init+0x88>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
    5a28:	20800417 	ldw	r2,16(r4)
    5a2c:	100490fa 	slli	r2,r2,3
    5a30:	10c4b03a 	or	r2,r2,r3
    5a34:	28802835 	stwio	r2,160(r5)
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
    5a38:	20800017 	ldw	r2,0(r4)
    5a3c:	20c00617 	ldw	r3,24(r4)
    5a40:	10c02a35 	stwio	r3,168(r2)
}
    5a44:	f800283a 	ret
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    5a48:	100c90ba 	slli	r6,r2,2
    5a4c:	298b883a 	add	r5,r5,r6
    5a50:	19800017 	ldw	r6,0(r3)
    5a54:	29800035 	stwio	r6,0(r5)
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    5a58:	10800044 	addi	r2,r2,1
    5a5c:	18c00104 	addi	r3,r3,4
    5a60:	003fe806 	br	5a04 <alt_vic_irq_init+0x28>
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    5a64:	18c00044 	addi	r3,r3,1
    5a68:	19800218 	cmpnei	r6,r3,8
    5a6c:	10800104 	addi	r2,r2,4
    5a70:	303feb1e 	bne	r6,zero,5a20 <alt_vic_irq_init+0x44>
    5a74:	003ff006 	br	5a38 <alt_vic_irq_init+0x5c>

00005a78 <alt_ic_isr_register>:
{
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
    5a78:	20001c1e 	bne	r4,zero,5aec <alt_ic_isr_register+0x74>
        return -1;

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
    5a7c:	d0e02b17 	ldw	r3,-32596(gp)

    if(irq < pdev->num_of_intr_ports)
    5a80:	18800217 	ldw	r2,8(r3)
    5a84:	2880192e 	bgeu	r5,r2,5aec <alt_ic_isr_register+0x74>
  NIOS2_READ_STATUS (context);
    5a88:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a8c:	013fff84 	movi	r4,-2
    5a90:	1108703a 	and	r4,r2,r4
    5a94:	2001703a 	wrctl	status,r4
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
    5a98:	19000517 	ldw	r4,20(r3)
    5a9c:	2911383a 	mul	r8,r5,r4
    5aa0:	19000617 	ldw	r4,24(r3)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);

        if(isr)
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    5aa4:	18c00017 	ldw	r3,0(r3)
        offset = pdev->vec_addr + (irq * pdev->vec_size);
    5aa8:	2209883a 	add	r4,r4,r8
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
    5aac:	21800215 	stw	r6,8(r4)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
    5ab0:	21c00315 	stw	r7,12(r4)
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    5ab4:	01000044 	movi	r4,1
    5ab8:	214a983a 	sll	r5,r4,r5
        if(isr)
    5abc:	30000926 	beq	r6,zero,5ae4 <alt_ic_isr_register+0x6c>
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    5ac0:	19402135 	stwio	r5,132(r3)
  NIOS2_READ_STATUS (status);
    5ac4:	0007303a 	rdctl	r3,status
  status &= ~NIOS2_STATUS_PIE_MSK;
    5ac8:	013fff84 	movi	r4,-2
    5acc:	1906703a 	and	r3,r3,r4
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5ad0:	1080004c 	andi	r2,r2,1
    5ad4:	10c4b03a 	or	r2,r2,r3
  NIOS2_WRITE_STATUS (status);
    5ad8:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
    5adc:	0005883a 	mov	r2,zero
    5ae0:	f800283a 	ret
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
    5ae4:	19402235 	stwio	r5,136(r3)
    5ae8:	003ff606 	br	5ac4 <alt_ic_isr_register+0x4c>
        return -1;
    5aec:	00bfffc4 	movi	r2,-1
    }

    return -1;
}
    5af0:	f800283a 	ret

00005af4 <alt_busy_sleep>:
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    5af4:	008147f4 	movhi	r2,1311
    5af8:	10ae1404 	addi	r2,r2,-18352
    5afc:	11001a2e 	bgeu	r2,r4,5b68 <alt_busy_sleep+0x74>
  big_loops = us / (INT_MAX/
    5b00:	008147f4 	movhi	r2,1311
    5b04:	10ae1444 	addi	r2,r2,-18351
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5b08:	01600034 	movhi	r5,32768
  big_loops = us / (INT_MAX/
    5b0c:	2085203a 	divu	r2,r4,r2
    for(i=0;i<big_loops;i++)
    5b10:	0007883a 	mov	r3,zero
      __asm__ volatile (
    5b14:	297fffc4 	addi	r5,r5,-1
    5b18:	297fffc4 	addi	r5,r5,-1
    5b1c:	283ffe1e 	bne	r5,zero,5b18 <alt_busy_sleep+0x24>
    for(i=0;i<big_loops;i++)
    5b20:	18c00044 	addi	r3,r3,1
    5b24:	18bffc16 	blt	r3,r2,5b18 <alt_busy_sleep+0x24>
    5b28:	00feb874 	movhi	r3,64225
    5b2c:	18d1ebc4 	addi	r3,r3,18351
    5b30:	20c9883a 	add	r4,r4,r3
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5b34:	00800a0e 	bge	zero,r2,5b60 <alt_busy_sleep+0x6c>
    5b38:	10c5383a 	mul	r2,r2,r3
    5b3c:	00c147f4 	movhi	r3,1311
    5b40:	18ee1444 	addi	r3,r3,-18351
    5b44:	10c5883a 	add	r2,r2,r3
    5b48:	1105883a 	add	r2,r2,r4
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5b4c:	10800664 	muli	r2,r2,25
    __asm__ volatile (
    5b50:	10bfffc4 	addi	r2,r2,-1
    5b54:	103ffe1e 	bne	r2,zero,5b50 <alt_busy_sleep+0x5c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    5b58:	0005883a 	mov	r2,zero
    5b5c:	f800283a 	ret
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5b60:	0005883a 	mov	r2,zero
    5b64:	003ff806 	br	5b48 <alt_busy_sleep+0x54>
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5b68:	21000664 	muli	r4,r4,25
    __asm__ volatile (
    5b6c:	213fffc4 	addi	r4,r4,-1
    5b70:	013ffe16 	blt	zero,r4,5b6c <alt_busy_sleep+0x78>
    5b74:	003ff806 	br	5b58 <alt_busy_sleep+0x64>

00005b78 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5b78:	f800283a 	ret

00005b7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    5b7c:	3005883a 	mov	r2,r6
  return len;
}
    5b80:	f800283a 	ret

00005b84 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5b84:	20000226 	beq	r4,zero,5b90 <alt_dev_llist_insert+0xc>
    5b88:	20800217 	ldw	r2,8(r4)
    5b8c:	10000b1e 	bne	r2,zero,5bbc <alt_dev_llist_insert+0x38>
    5b90:	d0a01217 	ldw	r2,-32696(gp)
    5b94:	10001126 	beq	r2,zero,5bdc <alt_dev_llist_insert+0x58>
{
    5b98:	deffff04 	addi	sp,sp,-4
    5b9c:	dfc00015 	stw	ra,0(sp)
    5ba0:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
    5ba4:	00c00584 	movi	r3,22
    5ba8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    5bac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    5bb0:	dfc00017 	ldw	ra,0(sp)
    5bb4:	dec00104 	addi	sp,sp,4
    5bb8:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    5bbc:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
    5bc0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    5bc4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    5bc8:	28800017 	ldw	r2,0(r5)
    5bcc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    5bd0:	29000015 	stw	r4,0(r5)
  return 0;  
    5bd4:	0005883a 	mov	r2,zero
    5bd8:	f800283a 	ret
    5bdc:	d0a02704 	addi	r2,gp,-32612
    ALT_ERRNO = EINVAL;
    5be0:	00c00584 	movi	r3,22
    5be4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    5be8:	00bffa84 	movi	r2,-22
}
    5bec:	f800283a 	ret

00005bf0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5bf0:	defffd04 	addi	sp,sp,-12
    5bf4:	dc400115 	stw	r17,4(sp)
    5bf8:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5bfc:	04400034 	movhi	r17,0
    5c00:	04000034 	movhi	r16,0
{
    5c04:	dfc00215 	stw	ra,8(sp)
    5c08:	84174804 	addi	r16,r16,23840
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5c0c:	8c574644 	addi	r17,r17,23833
    5c10:	843fff04 	addi	r16,r16,-4
    5c14:	8440052e 	bgeu	r16,r17,5c2c <_do_ctors+0x3c>
        (*ctor) (); 
}
    5c18:	dfc00217 	ldw	ra,8(sp)
    5c1c:	dc400117 	ldw	r17,4(sp)
    5c20:	dc000017 	ldw	r16,0(sp)
    5c24:	dec00304 	addi	sp,sp,12
    5c28:	f800283a 	ret
        (*ctor) (); 
    5c2c:	80800017 	ldw	r2,0(r16)
    5c30:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5c34:	003ff606 	br	5c10 <_do_ctors+0x20>

00005c38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5c38:	defffb04 	addi	sp,sp,-20
    5c3c:	dcc00315 	stw	r19,12(sp)
    5c40:	dc800215 	stw	r18,8(sp)
    5c44:	dc400115 	stw	r17,4(sp)
    5c48:	dc000015 	stw	r16,0(sp)
    5c4c:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
    5c50:	2c000017 	ldw	r16,0(r5)
{
    5c54:	2027883a 	mov	r19,r4
    5c58:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
    5c5c:	0004ffc0 	call	4ffc <strlen>
    5c60:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5c64:	8440091e 	bne	r16,r17,5c8c <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5c68:	0021883a 	mov	r16,zero
}
    5c6c:	8005883a 	mov	r2,r16
    5c70:	dfc00417 	ldw	ra,16(sp)
    5c74:	dcc00317 	ldw	r19,12(sp)
    5c78:	dc800217 	ldw	r18,8(sp)
    5c7c:	dc400117 	ldw	r17,4(sp)
    5c80:	dc000017 	ldw	r16,0(sp)
    5c84:	dec00504 	addi	sp,sp,20
    5c88:	f800283a 	ret
    if (!memcmp (next->name, name, len))
    5c8c:	81000217 	ldw	r4,8(r16)
    5c90:	900d883a 	mov	r6,r18
    5c94:	980b883a 	mov	r5,r19
    5c98:	0005cac0 	call	5cac <memcmp>
    5c9c:	103ff326 	beq	r2,zero,5c6c <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
    5ca0:	84000017 	ldw	r16,0(r16)
    5ca4:	003fef06 	br	5c64 <alt_find_dev+0x2c>

00005ca8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5ca8:	f800283a 	ret

00005cac <memcmp>:
    5cac:	0007883a 	mov	r3,zero
    5cb0:	30c0021e 	bne	r6,r3,5cbc <memcmp+0x10>
    5cb4:	0005883a 	mov	r2,zero
    5cb8:	f800283a 	ret
    5cbc:	20c5883a 	add	r2,r4,r3
    5cc0:	18c00044 	addi	r3,r3,1
    5cc4:	28cf883a 	add	r7,r5,r3
    5cc8:	10800003 	ldbu	r2,0(r2)
    5ccc:	39ffffc3 	ldbu	r7,-1(r7)
    5cd0:	11fff726 	beq	r2,r7,5cb0 <memcmp+0x4>
    5cd4:	11c5c83a 	sub	r2,r2,r7
    5cd8:	f800283a 	ret
    5cdc:	0201ffff 	0x201ffff
    5ce0:	883a0000 	call	883a000 <_gp+0x8829dbc>
    5ce4:	010d00ff 	0x10d00ff
    5ce8:	01010002 	0x1010002
	...
    5cf4:	010d00ff 	0x10d00ff
    5cf8:	01010004 	movi	r4,1024
    5cfc:	00000100 	call	10 <_exit+0x4>
    5d00:	00000000 	call	0 <__reset>
    5d04:	011100ff 	0x11100ff
    5d08:	01010004 	movi	r4,1024
    5d0c:	7f000105 	stb	fp,4(r15)
    5d10:	007d0000 	call	7d000 <_gp+0x6cdbc>
    5d14:	00000000 	call	0 <__reset>
    5d18:	01883a00 	call	1883a0 <_gp+0x17815c>
    5d1c:	00003548 	cmpgei	zero,zero,213
