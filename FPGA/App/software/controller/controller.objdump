
controller.elf:     file format elf32-littlenios2
controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005d58 memsz 0x00005d58 flags r-x
    LOAD off    0x00007000 vaddr 0x00008000 paddr 0x00005d78 align 2**12
         filesz 0x00000290 memsz 0x000003dc flags rw-
    LOAD off    0x00008000 vaddr 0x0000b000 paddr 0x0000b000 align 2**12
         filesz 0x00000030 memsz 0x00000030 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00008030  2**0
                  CONTENTS
  2 .shared       00000030  0000b000  0000b000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         000059ac  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000003ac  000059cc  000059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00000290  00008000  00005d78  00007000  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          0000014c  00008290  00006008  00007290  2**2
                  ALLOC, SMALL_DATA
  7 .instruction_rom_0 00000000  00006008  00006008  00008030  2**0
                  CONTENTS
  8 .data_ram_0   00000000  000083dc  000083dc  00008030  2**0
                  CONTENTS
  9 .data_ram_1   00000000  0000b030  0000b030  00008030  2**0
                  CONTENTS
 10 .comment      0000002d  00000000  00000000  00008030  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000f18  00000000  00000000  00008060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00027928  00000000  00000000  00008f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b11d  00000000  00000000  000308a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001064d  00000000  00000000  0003b9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00001f04  00000000  00000000  0004c00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000adca  00000000  00000000  0004df10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0000dae4  00000000  00000000  00058cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_alt_sim_info 00000040  00000000  00000000  000667c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001f10  00000000  00000000  00066800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  0006c89e  2**0
                  CONTENTS, READONLY
 21 .cpu          00000006  00000000  00000000  0006c8a1  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0006c8a7  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0006c8a8  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  0006c8a9  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  0006c8ad  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  0006c8b1  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   0000000b  00000000  00000000  0006c8b5  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    0000000b  00000000  00000000  0006c8c0  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   0000000b  00000000  00000000  0006c8cb  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 0000000a  00000000  00000000  0006c8d6  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 00000029  00000000  00000000  0006c8e0  2**0
                  CONTENTS, READONLY
 32 .jdi          00004c4b  00000000  00000000  0006c909  2**0
                  CONTENTS, READONLY
 33 .sopcinfo     000db230  00000000  00000000  00071554  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000b000 l    d  .shared	00000000 .shared
00000020 l    d  .text	00000000 .text
000059cc l    d  .rodata	00000000 .rodata
00008000 l    d  .rwdata	00000000 .rwdata
00008290 l    d  .bss	00000000 .bss
00006008 l    d  .instruction_rom_0	00000000 .instruction_rom_0
000083dc l    d  .data_ram_0	00000000 .data_ram_0
0000b030 l    d  .data_ram_1	00000000 .data_ram_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/work/Robocup/phoenix-firmware/FPGA/App/software/controller_bsp//obj/HAL/src/crt0.o
00000098 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 shared_memory_manager.cpp
00000000 l    df *ABS*	00000000 microshell.c
0000009c l     F .text	00000068 print_buffer
00000104 l     F .text	00000034 print_return
00000138 l     F .text	00000068 cursor_left
000001a0 l     F .text	00000064 cursor_right
00000000 l    df *ABS*	00000000 mscore.c
00005a10 l     O .rodata	00000070 kmlist
00000000 l    df *ABS*	00000000 mscmd.c
00000000 l    df *ABS*	00000000 msopt.c
00000000 l    df *ABS*	00000000 ntlibc.c
00000000 l    df *ABS*	00000000 centralized_monitor.cpp
000082a0 l     O .bss	00000004 _ZZN18CentralizedMonitor12Adc2CallbackEvE3cnt
0000829c l     O .bss	00000004 _ZZN18CentralizedMonitor20DoPeriodicCommonWorkEvE19performance_counter
00008298 l     O .bss	00000004 _ZZN18CentralizedMonitor20DoPeriodicCommonWorkEvE3cnt
00000000 l    df *ABS*	00000000 data_holder.cpp
00000000 l    df *ABS*	00000000 dribble_controller.cpp
00000000 l    df *ABS*	00000000 adc2.cpp
00000000 l    df *ABS*	00000000 imu.cpp
00000000 l    df *ABS*	00000000 main.cpp
00001970 l     F .text	00000010 _ZZ4mainENUlcE_4_FUNEc
00001980 l     F .text	00000018 _ZZ4mainENUlvE0_4_FUNEv
00001998 l     F .text	0000001c _ZL13command_faultP5MSOPTPv
000019b4 l     F .text	00000014 _ZL13command_clearP5MSOPTPv
000019c8 l     F .text	00000034 _ZL12command_adc2P5MSOPTPv
000019fc l     F .text	00000088 _ZL14command_statusP5MSOPTPv
00001a84 l     F .text	00000050 _ZL11command_imuP5MSOPTPv
00001ad4 l     F .text	00000098 _ZL14command_switchP5MSOPTPv
00005b70 l     O .rodata	00000030 _ZZ4mainE13command_table
00000000 l    df *ABS*	00000000 msgdma.cpp
00000000 l    df *ABS*	00000000 stream_transmitter.cpp
000082c8 l     O .bss	00000008 _ZL16StreamDataStatus
00005bc0 l     O .rodata	00000010 _ZL25StreamDataDesciptorStatus
000082c0 l     O .bss	00000006 _ZL14StreamDataAdc2
00005bb0 l     O .rodata	00000010 _ZL23StreamDataDesciptorAdc2
0000837c l     O .bss	0000002e _ZL16StreamDataMotion
00005ba0 l     O .rodata	00000010 _ZL25StreamDataDesciptorMotion
00000000 l    df *ABS*	00000000 wheel_controller.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
00002290 l     F .text	00000090 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00002320 l     F .text	000001e8 _ZL28read_encoded_value_with_basehjPKhPj
00002508 l     F .text	00000070 _ZL21base_of_encoded_valuehP15_Unwind_Context
00002578 l     F .text	0000012c _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
000026a4 l     F .text	00000110 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
000030e0 l     F .text	00000068 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_alloc.cc
00003290 l     F .text	000000cc _ZN12_GLOBAL__N_14pool4freeEPv.constprop.0
000083cc l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000335c l     F .text	00000090 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.0
0000346c l     F .text	00000064 _GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
000082d0 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_ops.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00003c44 l     F .text	00000114 _Unwind_ForcedUnwind_Phase2
000082d8 l     O .bss	00000004 fc_static
00003d58 l     F .text	000000d8 _Unwind_RaiseException_Phase2
00003e30 l     F .text	0000002c uw_install_context.constprop.0.isra.0
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004690 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00008274 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008150 l     O .rwdata	0000009c vic_0
000080f0 l     O .rwdata	00000060 msgdma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
000053d8 l     F .text	000000dc alt_msgdma_irq
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
00005d4c l     O .rodata	00000020 VEC_SIZE_ARRAY.0
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005828 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 impure.c
00008000 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 int_errno.c
00003444 g     F .text	00000028 __cxa_free_exception
00003990 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
000030b4 g     F .text	00000014 _ZSt10unexpectedv
00005088 g     F .text	00000030 alt_main
0000147c  w    F .text	00000014 _ZN4Adc213AwaitCompleteEv
00003edc g     F .text	00000020 .hidden _Unwind_GetIPInfo
00005d78 g       *ABS*	00000000 __flash_rwdata_start
00000258 g     F .text	00000368 microshell_getline
000007d4 g     F .text	00000110 msopt_init
0000320c g     F .text	00000084 __cxa_rethrow
00003e74 g     F .text	00000010 .hidden _Unwind_SjLj_Unregister
00003ecc g     F .text	00000010 .hidden _Unwind_GetIP
000083dc g       *ABS*	00000000 __alt_heap_start
000045fc g     F .text	0000004c _kill_r
000082a8 g     O .bss	00000008 _ZN4Adc27_ResultE
000044a8 g     F .text	00000048 printf
0000090c g     F .text	00000070 msopt_get_argv
000036c4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00005c6c  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000082bc g     O .bss	00000004 _ZN17StreamTransmitter7_DeviceE
00001784 g     F .text	00000050 _ZN3Imu7SetBankEm
000050bc g     F .text	00000004 __malloc_unlock
000041c8 g     F .text	00000060 memmove
00001040 g     F .text	00000114 _ZN18CentralizedMonitor20DoPeriodicCommonWorkEv
00000a54 g     F .text	00000040 _ZN18CentralizedMonitor5StartEv
000017d4 g     F .text	00000060 _ZN3Imu12ReadRegisterEm
0000510c g     F .text	00000038 alt_putstr
00005c58  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000 g     F .entry	0000000c __reset
00001518 g     F .text	00000170 _ZN4Adc27HandlerEPv
00003f18 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00008290 g     O .bss	00000004 _ZN18CentralizedMonitor11_FaultFlagsE
00000020 g       *ABS*	00000000 __flash_exceptions_start
000082e4 g     O .bss	00000004 errno
000083bc g     O .bss	00000010 _ZN15WheelController15_LastSpeedErrorE
000040e0 g     F .text	00000088 .hidden _Unwind_Backtrace
000082ec g     O .bss	00000004 alt_argv
00010244 g       *ABS*	00000000 _gp
000051ac g     F .text	00000004 usleep
000013bc g     F .text	00000018 _ZN17DribbleController12StartControlEv
00004f08 g     F .text	00000008 getpid
00000b30 g     F .text	00000094 _ZN18CentralizedMonitor12Adc2CallbackEv
000082b0 g     O .bss	00000004 _ZN4Adc29_SequenceE
00002e4c g     F .text	0000017c __cxa_call_unexpected
000081ec g     O .rwdata	00000030 alt_fd_list
00004000 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
000055d4 g       .text	00000000 VIC_0_VECTOR_TABLE
00003e9c g     F .text	00000018 .hidden _Unwind_GetCFA
000058e4 g     F .text	00000070 alt_find_dev
000041a0 g     F .text	00000028 memcpy
00000204 g     F .text	00000054 microshell_init
00008304 g     O .bss	00000058 _ZN10DataHolder11_MotionDataE
00003a10 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
00003a28 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00005258 g     F .text	00000058 altera_avalon_jtag_uart_read
00004180 g     F .text	00000010 malloc
00004e08 g     F .text	00000064 .hidden __udivsi3
00004538 g     F .text	000000b4 _raise_r
000013d4 g     F .text	00000018 _ZN17DribbleController11StopControlEv
000082b8 g     O .bss	00000001 _ZN3Imu6_ValidE
00001ef4 g     F .text	00000034 _ZN17StreamTransmitter12TransmitAdc2ERK10Adc2Data_t
00004648 g     F .text	00000004 _getpid_r
00001df0 g     F .text	000000a4 _ZN12SharedMemory16UpdateParametersEv
00003adc g     F .text	0000009c _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
000044f0 g     F .text	00000048 _sbrk_r
000006f0 g     F .text	00000014 mscmd_init
00005ca0  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00003a70 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00003c40 g     F .text	00000004 _ZdlPv
000083dc g       *ABS*	00000000 __bss_end
00004ec8 g     F .text	00000040 alt_getchar
00003e5c g     F .text	00000018 .hidden _Unwind_SjLj_Register
00005500 g     F .text	000000d4 alt_msgdma_init
00004168 g     F .text	00000018 abort
000082b4 g     O .bss	00000004 _ZN4Adc26_StateE
000035e0 g     F .text	000000b4 __cxa_end_catch
00003694 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000020a0 g     F .text	0000007c _ZN15WheelController12StartControlEv
00001e94 g     F .text	00000040 _ZN12SharedMemory15ClearParametersEv
00003090 g     F .text	00000014 _ZSt9terminatev
0000821c g     O .rwdata	00000028 alt_dev_null
00005cdc  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00005824 g     F .text	00000004 alt_dcache_flush_all
0000824c  w    O .rwdata	00000008 _ZTISt9exception
000009dc  w    F .text	0000001c _ZN15CriticalSectionC1Ev
000082a4 g     O .bss	00000001 _ZN4Adc26_ValidE
00005664 g       .text	00000000 alt_shadow_non_preemptive_interrupt
00008290 g       *ABS*	00000000 __ram_rwdata_end
0000398c g     F .text	00000004 _ZNSt9type_infoD1Ev
00008284 g     O .rwdata	00000008 alt_dev_list
00000e28 g     F .text	00000028 _ZN18CentralizedMonitor24ResetMotorInterruptFlagsEv
000051b0 g     F .text	0000005c write
00005d78 g       *ABS*	00000000 __ram_rodata_end
00003c3c g     F .text	00000004 _ZdlPvj
00008278 g     O .rwdata	00000004 jtag_uart_0
00004f10 g     F .text	000000f4 kill
00004e6c g     F .text	0000005c .hidden __umodsi3
00003148 g     F .text	00000064 __cxa_init_primary_exception
000030c8 g     F .text	0000000c _ZSt13get_terminatev
000083dc g       *ABS*	00000000 end
000040c8 g     F .text	00000018 .hidden _Unwind_DeleteException
00003b78 g     F .text	000000c4 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
000059c5 g       *ABS*	00000000 __CTOR_LIST__
00009000 g       *ABS*	00000000 __alt_stack_pointer
00003998 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
000052b0 g     F .text	00000030 altera_avalon_jtag_uart_write
00005bf4  w    O .rodata	00000012 _ZTSSt13bad_exception
000046fc g     F .text	000004ec ___vfprintf_internal_r
00004248 g     F .text	00000100 _free_r
00000bc4 g     F .text	0000009c _ZN18CentralizedMonitor13SetFaultFlagsEm
00000a94 g     F .text	0000009c _ZN18CentralizedMonitor13SetErrorFlagsEm
00000020 g     F .text	0000007c _start
00005ccc  w    O .rodata	0000000d _ZTSSt9type_info
00005304 g     F .text	000000d4 alt_avalon_spi_command
00008000 g       *ABS*	00000000 __alt_mem_data_ram_0
00005238 g     F .text	00000020 alt_sys_init
00003698 g     F .text	0000000c _ZGTtNKSt13bad_exception4whatEv
00000db8 g     F .text	00000070 _ZN18CentralizedMonitor22MotorControllerHandlerEPv
0000370c g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00000d4c g     F .text	0000006c _ZN18CentralizedMonitor23VectorControllerHandlerEPv
0000b000 g     O .shared	00000030 _ZN12SharedMemory13_SharedMemoryE
00008000 g       *ABS*	00000000 __ram_rwdata_start
00003f38 g     F .text	000000c8 .hidden _Unwind_SjLj_RaiseException
000059cc g       *ABS*	00000000 __ram_rodata_start
00000e50 g     F .text	000000b4 _ZN18CentralizedMonitor10InitializeEv
00004044 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
0000398c g     F .text	00000004 _ZNSt9type_infoD2Ev
00003908 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000083ac g     O .bss	00000010 _ZN15WheelController21_LastCurrentReferenceE
000057a0 g     F .text	00000084 alt_busy_sleep
0000825c  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
000052e0 g     F .text	00000024 perf_get_section_time
00005958 g     F .text	00000030 memcmp
000083dc g       *ABS*	00000000 __alt_stack_base
000036c4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00004088 g     F .text	00000040 .hidden _Unwind_SjLj_Resume_or_Rethrow
00003990 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00008244 g     O .rwdata	00000004 _ZN18CentralizedMonitor12_Adc2TimeoutE
000009f8  w    F .text	0000005c _ZN15CriticalSectionD1Ev
00005830 g     F .text	0000006c alt_dev_llist_insert
000050b8 g     F .text	00000004 __malloc_lock
00005144 g     F .text	00000068 sbrk
00005d0c  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
000031ac g     F .text	00000060 __cxa_throw
00003efc g     F .text	00000010 .hidden _Unwind_SetIP
00004c00 g     F .text	000000a8 __sfvwrite_small_dev
00008290 g       *ABS*	00000000 __bss_start
00004228 g     F .text	00000020 memset
000054b4 g     F .text	0000004c alt_msgdma_open
00001b6c g     F .text	0000012c main
00001898 g     F .text	000000d8 _ZN3Imu10InitializeEv
000082e8 g     O .bss	00000004 alt_envp
000036ac g     F .text	0000000c __cxa_get_globals_fast
000009dc  w    F .text	0000001c _ZN15CriticalSectionC2Ev
00000c60 g     F .text	000000ec _ZN18CentralizedMonitor11Pio1HandlerEPv
00009000 g       *ABS*	00000000 __alt_heap_limit
00004348 g     F .text	00000160 _malloc_r
00003698 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0000215c g     F .text	00000134 _ZN15WheelController6UpdateEb
0000828c g     O .rwdata	00000004 alt_errno
00000f04 g     F .text	0000013c _ZN18CentralizedMonitor15ClearErrorFlagsEv
00005d00  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00001688 g     F .text	00000068 _ZN4Adc212ReadRegisterEiPt
00003694 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00004d14 g     F .text	00000080 .hidden __divsi3
000059cc g       *ABS*	00000000 __CTOR_END__
000082f4 g     O .bss	00000004 alt_vic_dev_list
0000464c g     F .text	00000044 strcmp
000059cc g       *ABS*	00000000 __flash_rodata_start
000014dc g     F .text	0000003c _ZN4Adc25StartEv
0000520c g     F .text	0000002c alt_irq_init
000036d4 g     F .text	00000038 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000013ec g     F .text	00000090 _ZN17DribbleController6UpdateEb
00004cc4 g     F .text	00000050 _write_r
00003f30 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
000034d0 g     F .text	00000058 __cxa_call_terminate
00008270 g     O .rwdata	00000004 _impure_ptr
00008254  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
000082f0 g     O .bss	00000004 alt_argc
000005c0 g     F .text	00000034 mscore_init
000011a0 g     F .text	000001dc _ZN10DataHolder30FetchRegistersOnPreControlLoopEv
000030d4 g     F .text	0000000c _ZSt14get_unexpectedv
00005688 g     F .text	0000009c alt_vic_irq_init
00003f20 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00005c34  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00003f0c g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00003528 g     F .text	000000b8 __cxa_begin_catch
00003a28 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
000030a4 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00000020 g       *ABS*	00000000 __ram_exceptions_start
000036a4 g     F .text	00000008 _ZNSt13bad_exceptionD0Ev
00008264 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00005724 g     F .text	0000007c alt_ic_isr_register
000033ec g     F .text	00000058 __cxa_allocate_exception
00005c94  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00008290 g       *ABS*	00000000 _edata
0000211c g     F .text	00000040 _ZN15WheelController11StopControlEv
000082b9 g     O .bss	00000001 _ZN3Imu5_BankE
000083dc g       *ABS*	00000000 _end
000027b4 g     F .text	00000698 __gxx_personality_sj0
00000020 g       *ABS*	00000000 __ram_exceptions_end
000008e4 g     F .text	00000028 msopt_get_argc
00001834 g     F .text	00000064 _ZN3Imu13WriteRegisterEmh
000009f8  w    F .text	0000005c _ZN15CriticalSectionD2Ev
0000b000 g       *ABS*	00000000 __alt_mem_data_ram_1
000082f8 g     O .bss	0000000c _ZN10DataHolder9_Adc2DataE
00003eb4 g     F .text	00000018 .hidden _Unwind_SetGR
0000386c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00002fc8 g     F .text	000000c8 _ZN10__cxxabiv111__terminateEPFvvE
00004d94 g     F .text	00000074 .hidden __modsi3
0000137c g     F .text	00000040 _ZN10DataHolder15FetchAdc2ResultEv
00009000 g       *ABS*	00000000 __alt_data_end
00005c08  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_instruction_rom_0
00008294 g     O .bss	00000004 _ZN18CentralizedMonitor11_ErrorFlagsE
0000000c g       .entry	00000000 _exit
00003e84 g     F .text	00000018 .hidden _Unwind_GetGR
000036b8 g     F .text	0000000c __cxa_get_globals
00008248 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0000827c g     O .rwdata	00000008 alt_msgdma_list
00004ca8 g     F .text	0000001c strlen
00008268  w    O .rwdata	00000008 _ZTISt9type_info
00001f28 g     F .text	00000178 _ZN17StreamTransmitter14TransmitMotionERK12MotionData_ti
000050c0 g     F .text	0000004c alt_putchar
000016f0 g     F .text	0000003c _ZN4Adc210InitializeEv
00005be4  w    O .rodata	0000000d _ZTSSt9exception
000082dc g     O .bss	00000004 __malloc_sbrk_start
00001c98 g     F .text	00000158 _ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev
00000704 g     F .text	000000d0 mscmd_execute
00001490 g     F .text	0000004c _ZN4Adc220StartConversionAsyncEi
00005954 g     F .text	00000004 alt_icache_flush_all
00001180 g     F .text	00000020 _ZN18CentralizedMonitor11Pio0HandlerEPv
00003f28 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00001ed4 g     F .text	00000020 _ZN17StreamTransmitter14TransmitStatusEv
000082e0 g     O .bss	00000004 __malloc_free_list
00004be8 g     F .text	00000018 __vfprintf_internal
00001154 g     F .text	0000002c _ZN18CentralizedMonitor12TimerHandlerEPv
0000589c g     F .text	00000048 _do_ctors
0000172c g     F .text	00000058 _ZN3Imu8ReadDataEP11ImuResult_t
00005c14  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00005004 g     F .text	00000084 alt_load
0000097c g     F .text	00000060 ntlibc_strcmp
000045ec g     F .text	00000010 raise
00004190 g     F .text	00000010 free
000005f4 g     F .text	000000fc mscore_push
00003a38 g     F .text	00000038 _ZN10__cxxabiv117__class_type_infoD0Ev
0000835c g     O .bss	00000020 _ZN12SharedMemory11_ParametersE



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
      20:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
      24:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
      28:	10000426 	beq	r2,zero,3c <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
      2c:	07800014 	movui	sstatus,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
      30:	07400034 	movhi	ea,0
    ori ea, ea, %lo(0f)
      34:	ef400f14 	ori	ea,ea,60
    eret
      38:	ef80083a 	eret

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      3c:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      40:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
      44:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
      48:	d6809114 	ori	gp,gp,580
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
      4c:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
      50:	00c000d4 	movui	r3,3
    movhi r4, 1     /* Constant to increment STATUS.PRS */
      54:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
      58:	1105883a 	add	r2,r2,r4
    wrctl status, r2
      5c:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
      60:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
      64:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
      68:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
      6c:	183ffa1e 	bne	r3,zero,58 <_start+0x38>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      70:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      74:	10a0a414 	ori	r2,r2,33424

    movhi r3, %hi(__bss_end)
      78:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      7c:	18e0f714 	ori	r3,r3,33756

    beq r2, r3, 1f
      80:	10c00326 	beq	r2,r3,90 <_start+0x70>

0:
    stw zero, (r2)
      84:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      88:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      8c:	10fffd36 	bltu	r2,r3,84 <_start+0x64>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      90:	00050040 	call	5004 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      94:	00050880 	call	5088 <alt_main>

00000098 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      98:	003fff06 	br	98 <alt_after_alt_main>

0000009c <print_buffer>:
    }
    return buf;
}

static int print_buffer(MICROSHELL *handle, char *buf, int ofs)
{
      9c:	defffb04 	addi	sp,sp,-20
      a0:	dcc00315 	stw	r19,12(sp)
      a4:	dc800215 	stw	r18,8(sp)
      a8:	dc400115 	stw	r17,4(sp)
      ac:	dc000015 	stw	r16,0(sp)
      b0:	dfc00415 	stw	ra,16(sp)
      b4:	2027883a 	mov	r19,r4
      b8:	2823883a 	mov	r17,r5
      bc:	3025883a 	mov	r18,r6
    int cnt = 0;
      c0:	0021883a 	mov	r16,zero
    char *p = buf + ofs;
    while (*p) {
      c4:	8485883a 	add	r2,r16,r18
      c8:	8885883a 	add	r2,r17,r2
      cc:	11000007 	ldb	r4,0(r2)
      d0:	2000081e 	bne	r4,zero,f4 <print_buffer+0x58>
        handle->uart_putc(*p++);
        cnt++;
    }
    return cnt;
}
      d4:	8005883a 	mov	r2,r16
      d8:	dfc00417 	ldw	ra,16(sp)
      dc:	dcc00317 	ldw	r19,12(sp)
      e0:	dc800217 	ldw	r18,8(sp)
      e4:	dc400117 	ldw	r17,4(sp)
      e8:	dc000017 	ldw	r16,0(sp)
      ec:	dec00504 	addi	sp,sp,20
      f0:	f800283a 	ret
        handle->uart_putc(*p++);
      f4:	98800317 	ldw	r2,12(r19)
        cnt++;
      f8:	84000044 	addi	r16,r16,1
        handle->uart_putc(*p++);
      fc:	103ee83a 	callr	r2
        cnt++;
     100:	003ff006 	br	c4 <print_buffer+0x28>

00000104 <print_return>:
    return 1;
}

static void print_return(MICROSHELL *handle)
{
    handle->uart_putc('\r');
     104:	20800317 	ldw	r2,12(r4)
{
     108:	defffe04 	addi	sp,sp,-8
     10c:	dc000015 	stw	r16,0(sp)
     110:	dfc00115 	stw	ra,4(sp)
     114:	2021883a 	mov	r16,r4
    handle->uart_putc('\r');
     118:	01000344 	movi	r4,13
     11c:	103ee83a 	callr	r2
    handle->uart_putc('\n');
     120:	80800317 	ldw	r2,12(r16)
     124:	01000284 	movi	r4,10
}
     128:	dfc00117 	ldw	ra,4(sp)
     12c:	dc000017 	ldw	r16,0(sp)
     130:	dec00204 	addi	sp,sp,8
    handle->uart_putc('\n');
     134:	1000683a 	jmp	r2

00000138 <cursor_left>:

static void cursor_left(MICROSHELL *handle, int n)
{
     138:	defffc04 	addi	sp,sp,-16
     13c:	dc800215 	stw	r18,8(sp)
     140:	dc400115 	stw	r17,4(sp)
     144:	dc000015 	stw	r16,0(sp)
     148:	dfc00315 	stw	ra,12(sp)
     14c:	2021883a 	mov	r16,r4
     150:	2823883a 	mov	r17,r5
    int i;
    for (i = 0; i < n; i++) {
     154:	0025883a 	mov	r18,zero
     158:	94400616 	blt	r18,r17,174 <cursor_left+0x3c>
        handle->uart_putc('\x1B');
        handle->uart_putc('[');
        handle->uart_putc('D');
    }
}
     15c:	dfc00317 	ldw	ra,12(sp)
     160:	dc800217 	ldw	r18,8(sp)
     164:	dc400117 	ldw	r17,4(sp)
     168:	dc000017 	ldw	r16,0(sp)
     16c:	dec00404 	addi	sp,sp,16
     170:	f800283a 	ret
        handle->uart_putc('\x1B');
     174:	80800317 	ldw	r2,12(r16)
     178:	010006c4 	movi	r4,27
    for (i = 0; i < n; i++) {
     17c:	94800044 	addi	r18,r18,1
        handle->uart_putc('\x1B');
     180:	103ee83a 	callr	r2
        handle->uart_putc('[');
     184:	80800317 	ldw	r2,12(r16)
     188:	010016c4 	movi	r4,91
     18c:	103ee83a 	callr	r2
        handle->uart_putc('D');
     190:	80800317 	ldw	r2,12(r16)
     194:	01001104 	movi	r4,68
     198:	103ee83a 	callr	r2
    for (i = 0; i < n; i++) {
     19c:	003fee06 	br	158 <cursor_left+0x20>

000001a0 <cursor_right>:

static void cursor_right(MICROSHELL *handle, int n)
{
     1a0:	defffc04 	addi	sp,sp,-16
     1a4:	dc800215 	stw	r18,8(sp)
     1a8:	dc400115 	stw	r17,4(sp)
     1ac:	dc000015 	stw	r16,0(sp)
     1b0:	dfc00315 	stw	ra,12(sp)
     1b4:	2021883a 	mov	r16,r4
     1b8:	2825883a 	mov	r18,r5
    int i;
    for (i = 0; i < n; i++) {
     1bc:	0023883a 	mov	r17,zero
        handle->uart_putc('\x1B');
     1c0:	80800317 	ldw	r2,12(r16)
     1c4:	010006c4 	movi	r4,27
    for (i = 0; i < n; i++) {
     1c8:	8c400044 	addi	r17,r17,1
        handle->uart_putc('\x1B');
     1cc:	103ee83a 	callr	r2
        handle->uart_putc('[');
     1d0:	80800317 	ldw	r2,12(r16)
     1d4:	010016c4 	movi	r4,91
     1d8:	103ee83a 	callr	r2
        handle->uart_putc('C');
     1dc:	80800317 	ldw	r2,12(r16)
     1e0:	010010c4 	movi	r4,67
     1e4:	103ee83a 	callr	r2
    for (i = 0; i < n; i++) {
     1e8:	947ff51e 	bne	r18,r17,1c0 <cursor_right+0x20>
    }
}
     1ec:	dfc00317 	ldw	ra,12(sp)
     1f0:	dc800217 	ldw	r18,8(sp)
     1f4:	dc400117 	ldw	r17,4(sp)
     1f8:	dc000017 	ldw	r16,0(sp)
     1fc:	dec00404 	addi	sp,sp,16
     200:	f800283a 	ret

00000204 <microshell_init>:

void microshell_init(MICROSHELL *handle, MICROSHELL_UART_PUTC uart_putc, MICROSHELL_UART_GETC uart_getc, MICROSHELL_ACTION_HOOK action_hook)
{
     204:	defffb04 	addi	sp,sp,-20
     208:	dcc00315 	stw	r19,12(sp)
     20c:	dc800215 	stw	r18,8(sp)
     210:	dc400115 	stw	r17,4(sp)
     214:	dc000015 	stw	r16,0(sp)
     218:	dfc00415 	stw	ra,16(sp)
     21c:	2021883a 	mov	r16,r4
     220:	2827883a 	mov	r19,r5
     224:	3025883a 	mov	r18,r6
     228:	3823883a 	mov	r17,r7
    mscore_init(&(handle->mscore));
     22c:	00005c00 	call	5c0 <mscore_init>
    handle->uart_putc = uart_putc;
     230:	84c00315 	stw	r19,12(r16)
    handle->uart_getc = uart_getc;
     234:	84800415 	stw	r18,16(r16)
    handle->action_hook = action_hook;
     238:	84400515 	stw	r17,20(r16)
}
     23c:	dfc00417 	ldw	ra,16(sp)
     240:	dcc00317 	ldw	r19,12(sp)
     244:	dc800217 	ldw	r18,8(sp)
     248:	dc400117 	ldw	r17,4(sp)
     24c:	dc000017 	ldw	r16,0(sp)
     250:	dec00504 	addi	sp,sp,20
     254:	f800283a 	ret

00000258 <microshell_getline>:

char *microshell_getline(MICROSHELL *handle, char *buf, int siz)
{
     258:	defff504 	addi	sp,sp,-44
     25c:	dd400615 	stw	r21,24(sp)
     260:	dc800315 	stw	r18,12(sp)
     264:	dc400215 	stw	r17,8(sp)
     268:	dfc00a15 	stw	ra,40(sp)
     26c:	df000915 	stw	fp,36(sp)
     270:	ddc00815 	stw	r23,32(sp)
     274:	dd800715 	stw	r22,28(sp)
     278:	dd000515 	stw	r20,20(sp)
     27c:	dcc00415 	stw	r19,16(sp)
     280:	dc000115 	stw	r16,4(sp)
     284:	2023883a 	mov	r17,r4
     288:	2825883a 	mov	r18,r5
     28c:	302b883a 	mov	r21,r6
        *p++ = 0;
     290:	3000330e 	bge	r6,zero,360 <microshell_getline+0x108>
     294:	002f883a 	mov	r23,zero
     298:	b80d883a 	mov	r6,r23
     29c:	000b883a 	mov	r5,zero
     2a0:	9009883a 	mov	r4,r18
     2a4:	00042280 	call	4228 <memset>
    char *ptr = buf;
     2a8:	9029883a 	mov	r20,r18
    int pos = 0;
    int len = 0;
     2ac:	0027883a 	mov	r19,zero
    int pos = 0;
     2b0:	0021883a 	mov	r16,zero
                    *ptr++ = c;
                    pos++;
                    len++;
                    n += print_buffer(handle, buf, pos);
                    cursor_left(handle, n);
                    if (len >= siz - 1) {
     2b4:	ad7fffc4 	addi	r21,r21,-1
        char c = handle->uart_getc();
     2b8:	88800417 	ldw	r2,16(r17)
     2bc:	103ee83a 	callr	r2
     2c0:	102d883a 	mov	r22,r2
        MSCORE_ACTION action = mscore_push(&(handle->mscore), c);
     2c4:	b7003fcc 	andi	fp,r22,255
     2c8:	e700201c 	xori	fp,fp,128
     2cc:	e73fe004 	addi	fp,fp,-128
     2d0:	8809883a 	mov	r4,r17
     2d4:	e00b883a 	mov	r5,fp
     2d8:	00005f40 	call	5f4 <mscore_push>
     2dc:	1009883a 	mov	r4,r2
        if (handle->action_hook) {
     2e0:	88800517 	ldw	r2,20(r17)
     2e4:	10000326 	beq	r2,zero,2f4 <microshell_getline+0x9c>
            handle->action_hook(action);
     2e8:	d9000015 	stw	r4,0(sp)
     2ec:	103ee83a 	callr	r2
     2f0:	d9000017 	ldw	r4,0(sp)
        switch (action) {
     2f4:	20800468 	cmpgeui	r2,r4,17
     2f8:	10001b1e 	bne	r2,zero,368 <microshell_getline+0x110>
     2fc:	203fee26 	beq	r4,zero,2b8 <microshell_getline+0x60>
     300:	213fffc4 	addi	r4,r4,-1
     304:	20800428 	cmpgeui	r2,r4,16
     308:	103feb1e 	bne	r2,zero,2b8 <microshell_getline+0x60>
     30c:	200890ba 	slli	r4,r4,2
     310:	00800034 	movhi	r2,0
     314:	2085883a 	add	r2,r4,r2
     318:	1080c817 	ldw	r2,800(r2)
     31c:	1000683a 	jmp	r2
     320:	0000042c 	andhi	zero,zero,16
     324:	000004bc 	xorhi	zero,zero,18
     328:	00000530 	cmpltui	zero,zero,20
     32c:	000002b8 	rdprs	zero,zero,10
     330:	000002b8 	rdprs	zero,zero,10
     334:	000003f0 	cmpltui	zero,zero,15
     338:	000005a4 	muli	zero,zero,22
     33c:	00000590 	cmplti	zero,zero,22
     340:	000003c8 	cmpgei	zero,zero,15
     344:	00000530 	cmpltui	zero,zero,20
     348:	000003ac 	andhi	zero,zero,14
     34c:	00000388 	cmpgei	zero,zero,14
     350:	000002b8 	rdprs	zero,zero,10
     354:	000004bc 	xorhi	zero,zero,18
     358:	000002b8 	rdprs	zero,zero,10
     35c:	000003f0 	cmpltui	zero,zero,15
     360:	302f883a 	mov	r23,r6
     364:	003fcc06 	br	298 <microshell_getline+0x40>
     368:	20800c60 	cmpeqi	r2,r4,49
     36c:	10008d1e 	bne	r2,zero,5a4 <microshell_getline+0x34c>
     370:	20800ca8 	cmpgeui	r2,r4,50
     374:	10000b1e 	bne	r2,zero,3a4 <microshell_getline+0x14c>
     378:	20800be0 	cmpeqi	r2,r4,47
     37c:	1000841e 	bne	r2,zero,590 <microshell_getline+0x338>
     380:	21000c20 	cmpeqi	r4,r4,48
     384:	203fcc26 	beq	r4,zero,2b8 <microshell_getline+0x60>
                    cursor_left(handle, 1);
                }
                break;
            case MSCORE_ACTION_ARROW_RIGHT:
            case MSCORE_ACTION_CTRL_F:
                if (pos < len) {
     388:	84ffcb0e 	bge	r16,r19,2b8 <microshell_getline+0x60>
                    ptr++;
                    pos++;
                    cursor_right(handle, 1);
     38c:	01400044 	movi	r5,1
     390:	8809883a 	mov	r4,r17
                    ptr++;
     394:	a5000044 	addi	r20,r20,1
                    pos++;
     398:	84000044 	addi	r16,r16,1
                    cursor_right(handle, 1);
     39c:	00001a00 	call	1a0 <cursor_right>
     3a0:	003fc506 	br	2b8 <microshell_getline+0x60>
        switch (action) {
     3a4:	21000ca0 	cmpeqi	r4,r4,50
     3a8:	203fc326 	beq	r4,zero,2b8 <microshell_getline+0x60>
                    cursor_left(handle, n);
                }
                break;
            case MSCORE_ACTION_END:
            case MSCORE_ACTION_CTRL_E:
                if (pos < len) {
     3ac:	84ffc20e 	bge	r16,r19,2b8 <microshell_getline+0x60>
                    int n = len - pos;
     3b0:	9c0bc83a 	sub	r5,r19,r16
                    ptr += n;
                    pos = len;
                    cursor_right(handle, n);
     3b4:	8809883a 	mov	r4,r17
                    ptr += n;
     3b8:	a169883a 	add	r20,r20,r5
                    cursor_right(handle, n);
     3bc:	9821883a 	mov	r16,r19
     3c0:	00001a00 	call	1a0 <cursor_right>
     3c4:	003fbc06 	br	2b8 <microshell_getline+0x60>
        *p++ = 0;
     3c8:	b80d883a 	mov	r6,r23
     3cc:	000b883a 	mov	r5,zero
     3d0:	9009883a 	mov	r4,r18
     3d4:	00042280 	call	4228 <memset>
    handle->uart_putc(c);
     3d8:	88800317 	ldw	r2,12(r17)
     3dc:	01001784 	movi	r4,94
     3e0:	103ee83a 	callr	r2
     3e4:	88800317 	ldw	r2,12(r17)
     3e8:	010010c4 	movi	r4,67
     3ec:	103ee83a 	callr	r2
                print_return(handle);
     3f0:	8809883a 	mov	r4,r17
     3f4:	00001040 	call	104 <print_return>
        }
    }

end:
    return buf;
}
     3f8:	9005883a 	mov	r2,r18
     3fc:	dfc00a17 	ldw	ra,40(sp)
     400:	df000917 	ldw	fp,36(sp)
     404:	ddc00817 	ldw	r23,32(sp)
     408:	dd800717 	ldw	r22,28(sp)
     40c:	dd400617 	ldw	r21,24(sp)
     410:	dd000517 	ldw	r20,20(sp)
     414:	dcc00417 	ldw	r19,16(sp)
     418:	dc800317 	ldw	r18,12(sp)
     41c:	dc400217 	ldw	r17,8(sp)
     420:	dc000117 	ldw	r16,4(sp)
     424:	dec00b04 	addi	sp,sp,44
     428:	f800283a 	ret
                    copy_backward(buf, pos - 1, pos - 0, len - pos + 1);
     42c:	9c05c83a 	sub	r2,r19,r16
        *p_des-- = *p_src--;
     430:	10ffffd0 	cmplti	r3,r2,-1
                    copy_backward(buf, pos - 1, pos - 0, len - pos + 1);
     434:	11000044 	addi	r4,r2,1
        *p_des-- = *p_src--;
     438:	18001c1e 	bne	r3,zero,4ac <microshell_getline+0x254>
     43c:	0085c83a 	sub	r2,zero,r2
     440:	18001c1e 	bne	r3,zero,4b4 <microshell_getline+0x25c>
     444:	200d883a 	mov	r6,r4
                    copy_backward(buf, pos - 1, pos - 0, len - pos + 1);
     448:	817fffc4 	addi	r5,r16,-1
    char *p_src = buf + ofs_src + siz;
     44c:	290b883a 	add	r5,r5,r4
    char *p_des = buf + ofs_des + siz;
     450:	8109883a 	add	r4,r16,r4
        *p_des-- = *p_src--;
     454:	288b883a 	add	r5,r5,r2
     458:	2089883a 	add	r4,r4,r2
     45c:	914b883a 	add	r5,r18,r5
     460:	9109883a 	add	r4,r18,r4
     464:	00041c80 	call	41c8 <memmove>
                    handle->uart_putc(c);
     468:	88800317 	ldw	r2,12(r17)
     46c:	e009883a 	mov	r4,fp
                    pos++;
     470:	84000044 	addi	r16,r16,1
                    handle->uart_putc(c);
     474:	103ee83a 	callr	r2
                    n += print_buffer(handle, buf, pos);
     478:	900b883a 	mov	r5,r18
     47c:	8809883a 	mov	r4,r17
                    *ptr++ = c;
     480:	a5800005 	stb	r22,0(r20)
                    n += print_buffer(handle, buf, pos);
     484:	800d883a 	mov	r6,r16
     488:	000009c0 	call	9c <print_buffer>
                    len++;
     48c:	9cc00044 	addi	r19,r19,1
                    cursor_left(handle, n);
     490:	100b883a 	mov	r5,r2
     494:	8809883a 	mov	r4,r17
                    *ptr++ = c;
     498:	a7000044 	addi	fp,r20,1
                    cursor_left(handle, n);
     49c:	00001380 	call	138 <cursor_left>
                    if (len >= siz - 1) {
     4a0:	9d7fd30e 	bge	r19,r21,3f0 <microshell_getline+0x198>
                    *ptr++ = c;
     4a4:	e029883a 	mov	r20,fp
     4a8:	003f8306 	br	2b8 <microshell_getline+0x60>
        *p_des-- = *p_src--;
     4ac:	00800044 	movi	r2,1
     4b0:	003fe306 	br	440 <microshell_getline+0x1e8>
     4b4:	000d883a 	mov	r6,zero
     4b8:	003fe306 	br	448 <microshell_getline+0x1f0>
                if (pos > 0) {
     4bc:	803f7e26 	beq	r16,zero,2b8 <microshell_getline+0x60>
                    copy_forward(buf, pos, pos - 1, len - pos + 1);
     4c0:	9c0dc83a 	sub	r6,r19,r16
        *p_des++ = *p_src++;
     4c4:	30bfffd0 	cmplti	r2,r6,-1
                    copy_forward(buf, pos, pos - 1, len - pos + 1);
     4c8:	85bfffc4 	addi	r22,r16,-1
        *p_des++ = *p_src++;
     4cc:	1000161e 	bne	r2,zero,528 <microshell_getline+0x2d0>
     4d0:	31800044 	addi	r6,r6,1
     4d4:	940b883a 	add	r5,r18,r16
     4d8:	9589883a 	add	r4,r18,r22
     4dc:	00041c80 	call	41c8 <memmove>
                    cursor_left(handle, 1);
     4e0:	01400044 	movi	r5,1
     4e4:	8809883a 	mov	r4,r17
     4e8:	00001380 	call	138 <cursor_left>
                    n += print_buffer(handle, buf, pos);
     4ec:	b00d883a 	mov	r6,r22
     4f0:	900b883a 	mov	r5,r18
     4f4:	8809883a 	mov	r4,r17
     4f8:	000009c0 	call	9c <print_buffer>
     4fc:	1021883a 	mov	r16,r2
    handle->uart_putc(c);
     500:	88800317 	ldw	r2,12(r17)
     504:	01000804 	movi	r4,32
                    ptr--;
     508:	a53fffc4 	addi	r20,r20,-1
    handle->uart_putc(c);
     50c:	103ee83a 	callr	r2
                    cursor_left(handle, n);
     510:	81400044 	addi	r5,r16,1
     514:	8809883a 	mov	r4,r17
                    len--;
     518:	9cffffc4 	addi	r19,r19,-1
                    cursor_left(handle, n);
     51c:	00001380 	call	138 <cursor_left>
                    pos--;
     520:	b021883a 	mov	r16,r22
     524:	003f6406 	br	2b8 <microshell_getline+0x60>
        *p_des++ = *p_src++;
     528:	000d883a 	mov	r6,zero
     52c:	003fe906 	br	4d4 <microshell_getline+0x27c>
                if (len > 0) {
     530:	04ff610e 	bge	zero,r19,2b8 <microshell_getline+0x60>
                    copy_forward(buf, pos + 1, pos + 0, len - pos + 1);
     534:	9c0dc83a 	sub	r6,r19,r16
        *p_des++ = *p_src++;
     538:	30bfffd0 	cmplti	r2,r6,-1
     53c:	1000121e 	bne	r2,zero,588 <microshell_getline+0x330>
     540:	31800044 	addi	r6,r6,1
                    copy_forward(buf, pos + 1, pos + 0, len - pos + 1);
     544:	81400044 	addi	r5,r16,1
        *p_des++ = *p_src++;
     548:	914b883a 	add	r5,r18,r5
     54c:	9409883a 	add	r4,r18,r16
     550:	00041c80 	call	41c8 <memmove>
                    n += print_buffer(handle, buf, pos);
     554:	900b883a 	mov	r5,r18
     558:	800d883a 	mov	r6,r16
     55c:	8809883a 	mov	r4,r17
     560:	000009c0 	call	9c <print_buffer>
     564:	102d883a 	mov	r22,r2
    handle->uart_putc(c);
     568:	88800317 	ldw	r2,12(r17)
     56c:	01000804 	movi	r4,32
                    len--;
     570:	9cffffc4 	addi	r19,r19,-1
    handle->uart_putc(c);
     574:	103ee83a 	callr	r2
                    cursor_left(handle, n);
     578:	b1400044 	addi	r5,r22,1
                    cursor_left(handle, 1);
     57c:	8809883a 	mov	r4,r17
     580:	00001380 	call	138 <cursor_left>
     584:	003f4c06 	br	2b8 <microshell_getline+0x60>
        *p_des++ = *p_src++;
     588:	000d883a 	mov	r6,zero
     58c:	003fed06 	br	544 <microshell_getline+0x2ec>
                if (pos > 0) {
     590:	803f4926 	beq	r16,zero,2b8 <microshell_getline+0x60>
                    ptr--;
     594:	a53fffc4 	addi	r20,r20,-1
                    pos--;
     598:	843fffc4 	addi	r16,r16,-1
                    cursor_left(handle, 1);
     59c:	01400044 	movi	r5,1
     5a0:	003ff606 	br	57c <microshell_getline+0x324>
                if (pos > 0) {
     5a4:	803f4426 	beq	r16,zero,2b8 <microshell_getline+0x60>
                    cursor_left(handle, n);
     5a8:	800b883a 	mov	r5,r16
     5ac:	8809883a 	mov	r4,r17
                    ptr -= n;
     5b0:	a429c83a 	sub	r20,r20,r16
                    cursor_left(handle, n);
     5b4:	00001380 	call	138 <cursor_left>
                    pos = 0;
     5b8:	0021883a 	mov	r16,zero
     5bc:	003f3e06 	br	2b8 <microshell_getline+0x60>

000005c0 <mscore_init>:
    }
    return 1;
}

void mscore_init(MSCORE *handle)
{
     5c0:	defffe04 	addi	sp,sp,-8
     5c4:	dc000015 	stw	r16,0(sp)
        buf[i] = 0;
     5c8:	01800204 	movi	r6,8
{
     5cc:	2021883a 	mov	r16,r4
        buf[i] = 0;
     5d0:	000b883a 	mov	r5,zero
     5d4:	21000104 	addi	r4,r4,4
{
     5d8:	dfc00115 	stw	ra,4(sp)
        buf[i] = 0;
     5dc:	00042280 	call	4228 <memset>
    buf_clear(handle->keybuf, MSCORE_BUFFER_SIZE);
    handle->keycnt = 0;
     5e0:	80000015 	stw	zero,0(r16)
}
     5e4:	dfc00117 	ldw	ra,4(sp)
     5e8:	dc000017 	ldw	r16,0(sp)
     5ec:	dec00204 	addi	sp,sp,8
     5f0:	f800283a 	ret

000005f4 <mscore_push>:

MSCORE_ACTION mscore_push(MSCORE *handle, char c)
{
    int match = 0;
    handle->keybuf[handle->keycnt++] = c;
     5f4:	20800017 	ldw	r2,0(r4)
{
     5f8:	defffd04 	addi	sp,sp,-12
     5fc:	dc400115 	stw	r17,4(sp)
     600:	dc000015 	stw	r16,0(sp)
     604:	dfc00215 	stw	ra,8(sp)
    handle->keybuf[handle->keycnt++] = c;
     608:	11c00044 	addi	r7,r2,1
     60c:	21c00015 	stw	r7,0(r4)
     610:	2085883a 	add	r2,r4,r2
    const MSCORE_KEYMAP *p = &kmlist[0];
     614:	04400034 	movhi	r17,0
    const int N = sizeof(kmlist) / sizeof(kmlist[0]);
    int i;
    for (i = 0; i < N; i++) {
     618:	01800034 	movhi	r6,0
{
     61c:	2007883a 	mov	r3,r4
     620:	2821883a 	mov	r16,r5
    handle->keybuf[handle->keycnt++] = c;
     624:	11400105 	stb	r5,4(r2)
    const MSCORE_KEYMAP *p = &kmlist[0];
     628:	8c568404 	addi	r17,r17,23056
        if (handle->keycnt == buf_length(p->stream))  {
            if (buf_match(p->stream, handle->keybuf, handle->keycnt)) {
     62c:	21000104 	addi	r4,r4,4
    for (i = 0; i < N; i++) {
     630:	3196a004 	addi	r6,r6,23168
        if (handle->keycnt == buf_length(p->stream))  {
     634:	8a000017 	ldw	r8,0(r17)
    int n = 0;
     638:	000b883a 	mov	r5,zero
    while (*buf++) {
     63c:	4145883a 	add	r2,r8,r5
     640:	10800007 	ldb	r2,0(r2)
     644:	1000081e 	bne	r2,zero,668 <mscore_push+0x74>
        if (handle->keycnt == buf_length(p->stream))  {
     648:	39401626 	beq	r7,r5,6a4 <mscore_push+0xb0>
    for (i = 0; i < n; i++) {
     64c:	11c01716 	blt	r2,r7,6ac <mscore_push+0xb8>
        buf_clear(handle->keybuf, MSCORE_BUFFER_SIZE);
        if ((' ' <= c) && (c <= '~')) {
            return MSCORE_ACTION_DISPLAYABLE;
        }
    }
    return MSCORE_ACTION_IGNORE;
     650:	0005883a 	mov	r2,zero
}
     654:	dfc00217 	ldw	ra,8(sp)
     658:	dc400117 	ldw	r17,4(sp)
     65c:	dc000017 	ldw	r16,0(sp)
     660:	dec00304 	addi	sp,sp,12
     664:	f800283a 	ret
        n++;
     668:	29400044 	addi	r5,r5,1
     66c:	003ff306 	br	63c <mscore_push+0x48>
        if (*a++ != *b++) {
     670:	4095883a 	add	r10,r8,r2
     674:	1893883a 	add	r9,r3,r2
     678:	52800007 	ldb	r10,0(r10)
     67c:	4a400107 	ldb	r9,4(r9)
     680:	5240111e 	bne	r10,r9,6c8 <mscore_push+0xd4>
    for (i = 0; i < n; i++) {
     684:	10800044 	addi	r2,r2,1
     688:	28bff91e 	bne	r5,r2,670 <mscore_push+0x7c>
                handle->keycnt = 0;
     68c:	18000015 	stw	zero,0(r3)
        buf[i] = 0;
     690:	01800204 	movi	r6,8
     694:	000b883a 	mov	r5,zero
     698:	00042280 	call	4228 <memset>
                return p->action;
     69c:	88800117 	ldw	r2,4(r17)
     6a0:	003fec06 	br	654 <mscore_push+0x60>
    for (i = 0; i < n; i++) {
     6a4:	0005883a 	mov	r2,zero
     6a8:	003ff706 	br	688 <mscore_push+0x94>
        if (*a++ != *b++) {
     6ac:	4093883a 	add	r9,r8,r2
     6b0:	188b883a 	add	r5,r3,r2
     6b4:	4a400007 	ldb	r9,0(r9)
     6b8:	29400107 	ldb	r5,4(r5)
     6bc:	4940021e 	bne	r9,r5,6c8 <mscore_push+0xd4>
    for (i = 0; i < n; i++) {
     6c0:	10800044 	addi	r2,r2,1
     6c4:	003fe106 	br	64c <mscore_push+0x58>
        p++;
     6c8:	8c400204 	addi	r17,r17,8
    for (i = 0; i < N; i++) {
     6cc:	89bfd91e 	bne	r17,r6,634 <mscore_push+0x40>
        handle->keycnt = 0;
     6d0:	18000015 	stw	zero,0(r3)
        buf[i] = 0;
     6d4:	01800204 	movi	r6,8
     6d8:	000b883a 	mov	r5,zero
     6dc:	00042280 	call	4228 <memset>
        if ((' ' <= c) && (c <= '~')) {
     6e0:	80bff804 	addi	r2,r16,-32
     6e4:	10803fcc 	andi	r2,r2,255
     6e8:	108017f0 	cmpltui	r2,r2,95
     6ec:	003fd906 	br	654 <mscore_push+0x60>

000006f0 <mscmd_init>:
#include "mscmd.h"
#include "ntlibc.h"

int mscmd_init(MSCMD *handle, MSCMD_COMMAND_TABLE *command_table, int command_count, MSCMD_USER_OBJECT usrobj)
{
    handle->command_table = command_table;
     6f0:	21400015 	stw	r5,0(r4)
    handle->command_count = command_count;
     6f4:	21800115 	stw	r6,4(r4)
    handle->usrobj = usrobj;
     6f8:	21c00215 	stw	r7,8(r4)
    return 0;
}
     6fc:	0005883a 	mov	r2,zero
     700:	f800283a 	ret

00000704 <mscmd_execute>:

int mscmd_execute(MSCMD *handle, char *text, MSCMD_USER_RESULT *result)
{
     704:	deffd504 	addi	sp,sp,-172
     708:	dc402615 	stw	r17,152(sp)
     70c:	2023883a 	mov	r17,r4
    MSOPT msopt;
    int argc = 0;
    char argv0[MSCONF_MAX_INPUT_LENGTH];

    msopt_init(&msopt, text);
     710:	d9000904 	addi	r4,sp,36
{
     714:	dfc02a15 	stw	ra,168(sp)
     718:	dd002915 	stw	r20,164(sp)
     71c:	dcc02815 	stw	r19,160(sp)
     720:	3029883a 	mov	r20,r6
     724:	dc802715 	stw	r18,156(sp)
     728:	dc002515 	stw	r16,148(sp)
    int argc = 0;
     72c:	d8000015 	stw	zero,0(sp)
    msopt_init(&msopt, text);
     730:	00007d40 	call	7d4 <msopt_init>
    msopt_get_argc(&msopt, &argc);
     734:	d80b883a 	mov	r5,sp
     738:	d9000904 	addi	r4,sp,36
     73c:	00008e40 	call	8e4 <msopt_get_argc>
    if (argc == 0) {
     740:	d8800017 	ldw	r2,0(sp)
     744:	10002126 	beq	r2,zero,7cc <mscmd_execute+0xc8>
        return -1;
    }
    MSCMD_COMMAND_TABLE *p = handle->command_table;
     748:	8c800017 	ldw	r18,0(r17)
    int i;
    for (i = 0; i < handle->command_count; i++) {
     74c:	0027883a 	mov	r19,zero
     750:	88800117 	ldw	r2,4(r17)
     754:	98800216 	blt	r19,r2,760 <mscmd_execute+0x5c>
            *result = p->func(&msopt, handle->usrobj);
            return 0;
        }
        p++;
    }
    return -2;
     758:	043fff84 	movi	r16,-2
     75c:	00000f06 	br	79c <mscmd_execute+0x98>
        msopt_get_argv(&msopt, 0, argv0, sizeof(argv0));
     760:	01c00804 	movi	r7,32
     764:	d9800104 	addi	r6,sp,4
     768:	000b883a 	mov	r5,zero
     76c:	d9000904 	addi	r4,sp,36
     770:	000090c0 	call	90c <msopt_get_argv>
        if (ntlibc_strcmp(argv0, p->argv0) == 0) {
     774:	91400017 	ldw	r5,0(r18)
     778:	d9000104 	addi	r4,sp,4
     77c:	000097c0 	call	97c <ntlibc_strcmp>
     780:	1021883a 	mov	r16,r2
     784:	10000e1e 	bne	r2,zero,7c0 <mscmd_execute+0xbc>
            *result = p->func(&msopt, handle->usrobj);
     788:	90800117 	ldw	r2,4(r18)
     78c:	89400217 	ldw	r5,8(r17)
     790:	d9000904 	addi	r4,sp,36
     794:	103ee83a 	callr	r2
     798:	a0800015 	stw	r2,0(r20)
}
     79c:	8005883a 	mov	r2,r16
     7a0:	dfc02a17 	ldw	ra,168(sp)
     7a4:	dd002917 	ldw	r20,164(sp)
     7a8:	dcc02817 	ldw	r19,160(sp)
     7ac:	dc802717 	ldw	r18,156(sp)
     7b0:	dc402617 	ldw	r17,152(sp)
     7b4:	dc002517 	ldw	r16,148(sp)
     7b8:	dec02b04 	addi	sp,sp,172
     7bc:	f800283a 	ret
        p++;
     7c0:	94800204 	addi	r18,r18,8
    for (i = 0; i < handle->command_count; i++) {
     7c4:	9cc00044 	addi	r19,r19,1
     7c8:	003fe106 	br	750 <mscmd_execute+0x4c>
        return -1;
     7cc:	043fffc4 	movi	r16,-1
     7d0:	003ff206 	br	79c <mscmd_execute+0x98>

000007d4 <msopt_init>:
}

MSOPT_RESULT msopt_init(MSOPT *handle, char *text)
{
    char *src = text;
    char *des = handle->argv;
     7d4:	20c00204 	addi	r3,r4,8
     7d8:	1805883a 	mov	r2,r3
    while (*src) {
     7dc:	29800003 	ldbu	r6,0(r5)
     7e0:	31c03fcc 	andi	r7,r6,255
     7e4:	39c0201c 	xori	r7,r7,128
     7e8:	39ffe004 	addi	r7,r7,-128
     7ec:	38000a1e 	bne	r7,zero,818 <msopt_init+0x44>
        *des++ = *src++;
    }
    *des = 0;
     7f0:	10000005 	stb	zero,0(r2)
    while (IS_WHITE_SPACE(*p)) {
     7f4:	02002034 	movhi	r8,128
    handle->argc = 0;
     7f8:	20000115 	stw	zero,4(r4)
    while (IS_WHITE_SPACE(*p)) {
     7fc:	420004c4 	addi	r8,r8,19
        if (*p == 0) {
     800:	027ff7c4 	movi	r9,-33
    char *p = handle->argv;
    while (1) {
        if (handle->argc >= MSCONF_MAX_INPUT_ARGS) {
     804:	21400117 	ldw	r5,4(r4)
     808:	28800248 	cmpgei	r2,r5,9
     80c:	10000726 	beq	r2,zero,82c <msopt_init+0x58>
            return MSOPT_RESULT_ERROR_TOO_MUCH_ARGUMENTS;
     810:	008000c4 	movi	r2,3
        p = skip_text_string(p, &(handle->info[handle->argc].length));
        handle->argc++;
    }
    handle->initcode = INITCODE;
    return MSOPT_RESULT_OK;
}
     814:	f800283a 	ret
        *des++ = *src++;
     818:	10800044 	addi	r2,r2,1
     81c:	29400044 	addi	r5,r5,1
     820:	11bfffc5 	stb	r6,-1(r2)
     824:	003fed06 	br	7dc <msopt_init+0x8>
        p++;
     828:	18c00044 	addi	r3,r3,1
    while (IS_WHITE_SPACE(*p)) {
     82c:	19800003 	ldbu	r6,0(r3)
     830:	30bffdc4 	addi	r2,r6,-9
     834:	10803fcc 	andi	r2,r2,255
     838:	11c00630 	cmpltui	r7,r2,24
     83c:	3800081e 	bne	r7,zero,860 <msopt_init+0x8c>
        if (*p == 0) {
     840:	31803fcc 	andi	r6,r6,255
     844:	3180201c 	xori	r6,r6,128
     848:	31bfe004 	addi	r6,r6,-128
     84c:	3000071e 	bne	r6,zero,86c <msopt_init+0x98>
    handle->initcode = INITCODE;
     850:	00a5f014 	movui	r2,38848
     854:	20800015 	stw	r2,0(r4)
    return MSOPT_RESULT_OK;
     858:	0005883a 	mov	r2,zero
     85c:	f800283a 	ret
    while (IS_WHITE_SPACE(*p)) {
     860:	4084d83a 	srl	r2,r8,r2
     864:	1080004c 	andi	r2,r2,1
     868:	103fef1e 	bne	r2,zero,828 <msopt_init+0x54>
        handle->info[handle->argc].head = p;
     86c:	28800144 	addi	r2,r5,5
     870:	100490fa 	slli	r2,r2,3
    int count = 0;
     874:	000f883a 	mov	r7,zero
        handle->info[handle->argc].head = p;
     878:	2085883a 	add	r2,r4,r2
     87c:	10c00015 	stw	r3,0(r2)
    while (!IS_WHITE_SPACE(*p)) {
     880:	19d5883a 	add	r10,r3,r7
     884:	50800003 	ldbu	r2,0(r10)
     888:	11bffdc4 	addi	r6,r2,-9
     88c:	31803fcc 	andi	r6,r6,255
     890:	318000b0 	cmpltui	r6,r6,2
     894:	3000051e 	bne	r6,zero,8ac <msopt_init+0xd8>
     898:	11803fcc 	andi	r6,r2,255
     89c:	3180201c 	xori	r6,r6,128
     8a0:	31bfe004 	addi	r6,r6,-128
     8a4:	31800358 	cmpnei	r6,r6,13
     8a8:	3000071e 	bne	r6,zero,8c8 <msopt_init+0xf4>
    *length = count;
     8ac:	280490fa 	slli	r2,r5,3
        handle->argc++;
     8b0:	29400044 	addi	r5,r5,1
        if (handle->argc >= MSCONF_MAX_INPUT_ARGS) {
     8b4:	5007883a 	mov	r3,r10
    *length = count;
     8b8:	2085883a 	add	r2,r4,r2
     8bc:	11c00b15 	stw	r7,44(r2)
        handle->argc++;
     8c0:	21400115 	stw	r5,4(r4)
        if (handle->argc >= MSCONF_MAX_INPUT_ARGS) {
     8c4:	003fcf06 	br	804 <msopt_init+0x30>
        if (*p == 0) {
     8c8:	1244703a 	and	r2,r2,r9
     8cc:	10803fcc 	andi	r2,r2,255
     8d0:	1080201c 	xori	r2,r2,128
     8d4:	10bfe004 	addi	r2,r2,-128
     8d8:	103ff426 	beq	r2,zero,8ac <msopt_init+0xd8>
        count++;
     8dc:	39c00044 	addi	r7,r7,1
     8e0:	003fe706 	br	880 <msopt_init+0xac>

000008e4 <msopt_get_argc>:

MSOPT_RESULT msopt_get_argc(MSOPT *handle, int *argc)
{
    if (handle->initcode != INITCODE) {
     8e4:	20c00017 	ldw	r3,0(r4)
     8e8:	00a5f014 	movui	r2,38848
     8ec:	18800326 	beq	r3,r2,8fc <msopt_get_argc+0x18>
        *argc = 0;
     8f0:	28000015 	stw	zero,0(r5)
        return MSOPT_RESULT_ERROR_ILLEGAL_OBJECT;
     8f4:	00800044 	movi	r2,1
     8f8:	f800283a 	ret
    }
    *argc = handle->argc;
     8fc:	20800117 	ldw	r2,4(r4)
     900:	28800015 	stw	r2,0(r5)
    return MSOPT_RESULT_OK;
     904:	0005883a 	mov	r2,zero
}
     908:	f800283a 	ret

0000090c <msopt_get_argv>:

MSOPT_RESULT msopt_get_argv(MSOPT *handle, int index, char *bufptr, int bufsiz)
{
    *bufptr = 0;
     90c:	30000005 	stb	zero,0(r6)
    if (handle->argc <= index) {
     910:	20800117 	ldw	r2,4(r4)
     914:	2880170e 	bge	r5,r2,974 <msopt_get_argv+0x68>
        return MSOPT_RESULT_ERROR_ILLEGAL_INDEX_NUMBER;
    }
    char *src = handle->info[index].head;
     918:	28800144 	addi	r2,r5,5
     91c:	100490fa 	slli	r2,r2,3
    char *des = bufptr;
    int i;
    for (i = 0; i < handle->info[index].length; i++) {
     920:	280a90fa 	slli	r5,r5,3
        if (i >= bufsiz - 1) {
     924:	39ffffc4 	addi	r7,r7,-1
    char *src = handle->info[index].head;
     928:	2085883a 	add	r2,r4,r2
     92c:	12000017 	ldw	r8,0(r2)
    for (i = 0; i < handle->info[index].length; i++) {
     930:	2149883a 	add	r4,r4,r5
     934:	0005883a 	mov	r2,zero
     938:	21400b17 	ldw	r5,44(r4)
     93c:	3087883a 	add	r3,r6,r2
     940:	11400316 	blt	r2,r5,950 <msopt_get_argv+0x44>
            *des = 0;
            return MSOPT_RESULT_ERROR_BUFFER_SIZE;
        }
        *des++ = *src++;
    }
    *des = 0;
     944:	18000005 	stb	zero,0(r3)
    return MSOPT_RESULT_OK;
     948:	0005883a 	mov	r2,zero
     94c:	f800283a 	ret
        if (i >= bufsiz - 1) {
     950:	11c00316 	blt	r2,r7,960 <msopt_get_argv+0x54>
            *des = 0;
     954:	18000005 	stb	zero,0(r3)
            return MSOPT_RESULT_ERROR_BUFFER_SIZE;
     958:	00800104 	movi	r2,4
     95c:	f800283a 	ret
        *des++ = *src++;
     960:	408b883a 	add	r5,r8,r2
     964:	29400003 	ldbu	r5,0(r5)
    for (i = 0; i < handle->info[index].length; i++) {
     968:	10800044 	addi	r2,r2,1
        *des++ = *src++;
     96c:	19400005 	stb	r5,0(r3)
    for (i = 0; i < handle->info[index].length; i++) {
     970:	003ff106 	br	938 <msopt_get_argv+0x2c>
        return MSOPT_RESULT_ERROR_ILLEGAL_INDEX_NUMBER;
     974:	00800084 	movi	r2,2
}
     978:	f800283a 	ret

0000097c <ntlibc_strcmp>:

int ntlibc_strcmp(const char *s1, const char *s2)
{
    char *p1 = (char *)s1;
    char *p2 = (char *)s2;
    while (*p1 || *p2) {
     97c:	20c00003 	ldbu	r3,0(r4)
        if (*p1 != *p2) {
     980:	28800003 	ldbu	r2,0(r5)
    while (*p1 || *p2) {
     984:	188cb03a 	or	r6,r3,r2
     988:	31803fcc 	andi	r6,r6,255
     98c:	3180201c 	xori	r6,r6,128
     990:	31bfe004 	addi	r6,r6,-128
     994:	3000021e 	bne	r6,zero,9a0 <ntlibc_strcmp+0x24>
        }
        p1++;
        p2++;
    }
    if (*p1 == *p2) {
        return 0;
     998:	0005883a 	mov	r2,zero
     99c:	f800283a 	ret
        if (*p1 != *p2) {
     9a0:	18c03fcc 	andi	r3,r3,255
     9a4:	10803fcc 	andi	r2,r2,255
     9a8:	18c0201c 	xori	r3,r3,128
     9ac:	1080201c 	xori	r2,r2,128
     9b0:	18ffe004 	addi	r3,r3,-128
     9b4:	10bfe004 	addi	r2,r2,-128
     9b8:	18800326 	beq	r3,r2,9c8 <ntlibc_strcmp+0x4c>
            return (*p1 < *p2) ? -1 : 1;
     9bc:	18800516 	blt	r3,r2,9d4 <ntlibc_strcmp+0x58>
     9c0:	00800044 	movi	r2,1
     9c4:	f800283a 	ret
        p1++;
     9c8:	21000044 	addi	r4,r4,1
        p2++;
     9cc:	29400044 	addi	r5,r5,1
     9d0:	003fea06 	br	97c <ntlibc_strcmp>
            return (*p1 < *p2) ? -1 : 1;
     9d4:	00bfffc4 	movi	r2,-1
    } else {
        return (*p1 < *p2) ? -1 : 1;
    }
}
     9d8:	f800283a 	ret

000009dc <_ZN15CriticalSectionC1Ev>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     9dc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     9e0:	00bfff84 	movi	r2,-2
     9e4:	1884703a 	and	r2,r3,r2
     9e8:	1001703a 	wrctl	status,r2
 * クリティカルセクションを作り出す
 */
class CriticalSection {
public:
    CriticalSection(void) {
        _Context = alt_irq_disable_all();
     9ec:	20c00015 	stw	r3,0(r4)
        __builtin_sync();
     9f0:	0001b03a 	sync
    }
     9f4:	f800283a 	ret

000009f8 <_ZN15CriticalSectionD1Ev>:
    
    ~CriticalSection() {
     9f8:	defff104 	addi	sp,sp,-60
     9fc:	00800034 	movhi	r2,0
     a00:	dc000d15 	stw	r16,52(sp)
     a04:	1089ed04 	addi	r2,r2,10164
     a08:	2021883a 	mov	r16,r4
     a0c:	d809883a 	mov	r4,sp
     a10:	dfc00e15 	stw	ra,56(sp)
     a14:	d8800615 	stw	r2,24(sp)
     a18:	d8000715 	stw	zero,28(sp)
     a1c:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
        alt_irq_enable_all(_Context);
     a20:	80800017 	ldw	r2,0(r16)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
     a24:	0007303a 	rdctl	r3,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
     a28:	013fff84 	movi	r4,-2
     a2c:	1906703a 	and	r3,r3,r4
  status |= (context & NIOS2_STATUS_PIE_MSK);
     a30:	1080004c 	andi	r2,r2,1
     a34:	10c4b03a 	or	r2,r2,r3
  
  NIOS2_WRITE_STATUS (status);
     a38:	1001703a 	wrctl	status,r2
     a3c:	d809883a 	mov	r4,sp
     a40:	0003e740 	call	3e74 <_Unwind_SjLj_Unregister>
    }
     a44:	dfc00e17 	ldw	ra,56(sp)
     a48:	dc000d17 	ldw	r16,52(sp)
     a4c:	dec00f04 	addi	sp,sp,60
     a50:	f800283a 	ret

00000a54 <_ZN18CentralizedMonitor5StartEv>:
    ResetMotorInterruptFlags();
}

void CentralizedMonitor::Start(void) {
    // pio_0の割り込みを有効にする
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE, Pio0Pulse1kHz);
     a54:	00c00044 	movi	r3,1
     a58:	00b80214 	movui	r2,57352
     a5c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0);
     a60:	00b80314 	movui	r2,57356
     a64:	10000035 	stwio	zero,0(r2)

    // pio_1のフォルト関連の割り込みを有効にする
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, Pio1Motor5SwitchFault | Pio1Motor4SwitchFault | Pio1Motor3SwitchFault | Pio1Motor2SwitchFault | Pio1Motor1SwitchFault | Pio1ModuleSleep | Pio1FpgaStop);
     a68:	00c03f84 	movi	r3,254
     a6c:	00b84214 	movui	r2,57608
     a70:	10c00035 	stwio	r3,0(r2)

    // timer_0を開始する
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
     a74:	00c001c4 	movi	r3,7
     a78:	00b20114 	movui	r2,51204
     a7c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     a80:	00b20014 	movui	r2,51200
     a84:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIOD_0(TIMER_0_BASE, 0);
     a88:	00b20214 	movui	r2,51208
     a8c:	10000035 	stwio	zero,0(r2)
}
     a90:	f800283a 	ret

00000a94 <_ZN18CentralizedMonitor13SetErrorFlagsEm>:
    // 新しいエラーフラグを格納する
    _ErrorFlags = new_error_flags;
    SharedMemory::WriteErrorFlags(new_error_flags);
}

void CentralizedMonitor::SetErrorFlags(uint32_t error_flags) {
     a94:	00800034 	movhi	r2,0
     a98:	deffef04 	addi	sp,sp,-68
     a9c:	1089ed04 	addi	r2,r2,10164
     aa0:	d8800715 	stw	r2,28(sp)
     aa4:	00800034 	movhi	r2,0
     aa8:	1082c604 	addi	r2,r2,2840
     aac:	d9000015 	stw	r4,0(sp)
     ab0:	d9000104 	addi	r4,sp,4
     ab4:	d8800a15 	stw	r2,40(sp)
     ab8:	dfc01015 	stw	ra,64(sp)
     abc:	df000f15 	stw	fp,60(sp)
     ac0:	d8000815 	stw	zero,32(sp)
     ac4:	df000915 	stw	fp,36(sp)
     ac8:	dec00b15 	stw	sp,44(sp)
     acc:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
#if DEBUG_PRINTF
    uint32_t previous = _ErrorFlags;
#endif
    uint32_t new_error_flags;
    {
        CriticalSection cs;
     ad0:	d9000e04 	addi	r4,sp,56
     ad4:	00009dc0 	call	9dc <_ZN15CriticalSectionC1Ev>
        new_error_flags = _ErrorFlags | error_flags;
     ad8:	d8c00017 	ldw	r3,0(sp)
     adc:	d0a01417 	ldw	r2,-32688(gp)
     ae0:	10c4b03a 	or	r2,r2,r3
     ae4:	d8800015 	stw	r2,0(sp)
    /**
     * エラーフラグを書き込む
     * @param new_error_flags 書き込むフォルトフラグ
     */
    static void WriteErrorFlags(uint32_t new_error_flags){
        __builtin_stwio(&_SharedMemory.ErrorFlags, new_error_flags);
     ae8:	d8c00017 	ldw	r3,0(sp)
        _ErrorFlags = new_error_flags;
     aec:	d0a01415 	stw	r2,-32688(gp)
     af0:	00800074 	movhi	r2,1
     af4:	10ec0035 	stwio	r3,-20480(r2)
        CriticalSection cs;
     af8:	d9000e04 	addi	r4,sp,56
     afc:	00009f80 	call	9f8 <_ZN15CriticalSectionD1Ev>
#if DEBUG_PRINTF
    if (new_error_flags != previous) {
        printf("Error=%08X\n", (unsigned int)new_error_flags);
    }
#endif
    if (new_error_flags != 0) {
     b00:	d8800017 	ldw	r2,0(sp)
     b04:	10000426 	beq	r2,zero,b18 <_ZN18CentralizedMonitor13SetErrorFlagsEm+0x84>
        WheelController::StopControl();
     b08:	00bfffc4 	movi	r2,-1
     b0c:	d8800215 	stw	r2,8(sp)
     b10:	000211c0 	call	211c <_ZN15WheelController11StopControlEv>
        DribbleController::StopControl();
     b14:	00013d40 	call	13d4 <_ZN17DribbleController11StopControlEv>
     b18:	d9000104 	addi	r4,sp,4
     b1c:	0003e740 	call	3e74 <_Unwind_SjLj_Unregister>
    }
}
     b20:	dfc01017 	ldw	ra,64(sp)
     b24:	df000f17 	ldw	fp,60(sp)
     b28:	dec01104 	addi	sp,sp,68
     b2c:	f800283a 	ret

00000b30 <_ZN18CentralizedMonitor12Adc2CallbackEv>:
    _Adc2Timeout = ADC2_TIMEOUT_THRESHOLD;
     b30:	00800c84 	movi	r2,50
void CentralizedMonitor::Adc2Callback(void) {
     b34:	deffff04 	addi	sp,sp,-4
    _Adc2Timeout = ADC2_TIMEOUT_THRESHOLD;
     b38:	d0a00015 	stw	r2,-32768(gp)
void CentralizedMonitor::Adc2Callback(void) {
     b3c:	dfc00015 	stw	ra,0(sp)
    DataHolder::FetchAdc2Result();
     b40:	000137c0 	call	137c <_ZN10DataHolder15FetchAdc2ResultEv>
    if (adc2_data.Dc48vVoltage < DC48V_UNDER_VOLTAGE_THRESHOLD) {
     b44:	00800074 	movhi	r2,1
     b48:	10a0be17 	ldw	r2,-32008(r2)
     b4c:	00d07c34 	movhi	r3,16880
     b50:	10c7f9f2 	custom	231,r3,r2,r3
     b54:	18001026 	beq	r3,zero,b98 <_ZN18CentralizedMonitor12Adc2CallbackEv+0x68>
        SetErrorFlags(ErrorCauseDc48vUnderVoltage);
     b58:	01000104 	movi	r4,4
        SetErrorFlags(ErrorCauseDc48vOverVoltage);
     b5c:	0000a940 	call	a94 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    StreamTransmitter::TransmitAdc2(adc2_data);
     b60:	01000074 	movhi	r4,1
     b64:	2120be04 	addi	r4,r4,-32008
     b68:	0001ef40 	call	1ef4 <_ZN17StreamTransmitter12TransmitAdc2ERK10Adc2Data_t>
    ++cnt;
     b6c:	d0a01717 	ldw	r2,-32676(gp)
     b70:	10800044 	addi	r2,r2,1
     b74:	d0a01715 	stw	r2,-32676(gp)
    if (cnt == 5) {
     b78:	10c00158 	cmpnei	r3,r2,5
     b7c:	18000b1e 	bne	r3,zero,bac <_ZN18CentralizedMonitor12Adc2CallbackEv+0x7c>
    static void SetMotor1Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1Led);
        }
        else {
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor1Led);
     b80:	00c00044 	movi	r3,1
     b84:	00b88414 	movui	r2,57872
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1Led);
     b88:	10c00035 	stwio	r3,0(r2)
}
     b8c:	dfc00017 	ldw	ra,0(sp)
     b90:	dec00104 	addi	sp,sp,4
     b94:	f800283a 	ret
    else if (DC48V_OVER_VOLTAGE_THRESHOLD < adc2_data.Dc48vVoltage) {
     b98:	00d094b4 	movhi	r3,16978
     b9c:	10c5f972 	custom	229,r2,r2,r3
     ba0:	103fef26 	beq	r2,zero,b60 <_ZN18CentralizedMonitor12Adc2CallbackEv+0x30>
        SetErrorFlags(ErrorCauseDc48vOverVoltage);
     ba4:	01000204 	movi	r4,8
     ba8:	003fec06 	br	b5c <_ZN18CentralizedMonitor12Adc2CallbackEv+0x2c>
    else if (10 <= cnt) {
     bac:	10800290 	cmplti	r2,r2,10
     bb0:	103ff61e 	bne	r2,zero,b8c <_ZN18CentralizedMonitor12Adc2CallbackEv+0x5c>
        cnt = 0;
     bb4:	d0201715 	stw	zero,-32676(gp)
     bb8:	00c00044 	movi	r3,1
     bbc:	00b88514 	movui	r2,57876
     bc0:	003ff106 	br	b88 <_ZN18CentralizedMonitor12Adc2CallbackEv+0x58>

00000bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>:

void CentralizedMonitor::SetFaultFlags(uint32_t fault_flags) {
     bc4:	00800034 	movhi	r2,0
     bc8:	deffef04 	addi	sp,sp,-68
     bcc:	1089ed04 	addi	r2,r2,10164
     bd0:	d8800715 	stw	r2,28(sp)
     bd4:	00800034 	movhi	r2,0
     bd8:	10831204 	addi	r2,r2,3144
     bdc:	d9000015 	stw	r4,0(sp)
     be0:	d9000104 	addi	r4,sp,4
     be4:	d8800a15 	stw	r2,40(sp)
     be8:	dfc01015 	stw	ra,64(sp)
     bec:	df000f15 	stw	fp,60(sp)
     bf0:	d8000815 	stw	zero,32(sp)
     bf4:	df000915 	stw	fp,36(sp)
     bf8:	dec00b15 	stw	sp,44(sp)
     bfc:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
#if DEBUG_PRINTF
    uint32_t previous = _FaultFlags;
#endif
    uint32_t new_fault_flags;
    {
        CriticalSection cs;
     c00:	d9000e04 	addi	r4,sp,56
     c04:	00009dc0 	call	9dc <_ZN15CriticalSectionC1Ev>
        new_fault_flags = _FaultFlags | fault_flags;
     c08:	d8c00017 	ldw	r3,0(sp)
     c0c:	d0a01317 	ldw	r2,-32692(gp)
     c10:	10c4b03a 	or	r2,r2,r3
     c14:	d8800015 	stw	r2,0(sp)
    /**
     * フォルトフラグを書き込む
     * @param new_fault_flags 書き込むフォルトフラグ
     */
    static void WriteFaultFlags(uint32_t new_fault_flags){
        __builtin_stwio(&_SharedMemory.FaultFlags, new_fault_flags);
     c18:	d8c00017 	ldw	r3,0(sp)
        _FaultFlags = new_fault_flags;
     c1c:	d0a01315 	stw	r2,-32692(gp)
     c20:	00800074 	movhi	r2,1
     c24:	10ec0135 	stwio	r3,-20476(r2)
        CriticalSection cs;
     c28:	d9000e04 	addi	r4,sp,56
     c2c:	00009f80 	call	9f8 <_ZN15CriticalSectionD1Ev>
#if DEBUG_PRINTF
    if (new_fault_flags != previous) {
        printf("Fault=%08X\n", (unsigned int)new_fault_flags);
    }
#endif
    if (new_fault_flags != 0) {
     c30:	d8800017 	ldw	r2,0(sp)
     c34:	10000426 	beq	r2,zero,c48 <_ZN18CentralizedMonitor13SetFaultFlagsEm+0x84>
        WheelController::StopControl();
     c38:	00bfffc4 	movi	r2,-1
     c3c:	d8800215 	stw	r2,8(sp)
     c40:	000211c0 	call	211c <_ZN15WheelController11StopControlEv>
        DribbleController::StopControl();
     c44:	00013d40 	call	13d4 <_ZN17DribbleController11StopControlEv>
     c48:	d9000104 	addi	r4,sp,4
     c4c:	0003e740 	call	3e74 <_Unwind_SjLj_Unregister>
    }
}
     c50:	dfc01017 	ldw	ra,64(sp)
     c54:	df000f17 	ldw	fp,60(sp)
     c58:	dec01104 	addi	sp,sp,68
     c5c:	f800283a 	ret

00000c60 <_ZN18CentralizedMonitor11Pio1HandlerEPv>:

    // 定期的な処理を行う
    DoPeriodicCommonWork();
}

void CentralizedMonitor::Pio1Handler(void *context) {
     c60:	defffe04 	addi	sp,sp,-8
    // pio_1から割り込み要因のI/Oビットを取得し以降のその要因の割り込みを禁止する
    uint32_t irq_masks = IORD_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE);
     c64:	00b84214 	movui	r2,57608
void CentralizedMonitor::Pio1Handler(void *context) {
     c68:	dfc00115 	stw	ra,4(sp)
     c6c:	dc000015 	stw	r16,0(sp)
    uint32_t irq_masks = IORD_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE);
     c70:	10c00037 	ldwio	r3,0(r2)
    uint32_t irq_flags = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE) & irq_masks;
     c74:	00b84014 	movui	r2,57600
     c78:	14000037 	ldwio	r16,0(r2)
     c7c:	80e0703a 	and	r16,r16,r3
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, irq_masks & ~irq_flags);
     c80:	0404303a 	nor	r2,zero,r16
     c84:	10c4703a 	and	r2,r2,r3
     c88:	00f84214 	movui	r3,57608
     c8c:	18800035 	stwio	r2,0(r3)

    // エラーフラグを更新する
    if (irq_flags & Pio1ModuleSleep) {
     c90:	8080008c 	andi	r2,r16,2
     c94:	10000226 	beq	r2,zero,ca0 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0x40>
        SetErrorFlags(ErrorCauseModuleSleep);
     c98:	01000044 	movi	r4,1
     c9c:	0000a940 	call	a94 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    }
    if (irq_flags & Pio1FpgaStop) {
     ca0:	8080010c 	andi	r2,r16,4
     ca4:	10000226 	beq	r2,zero,cb0 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0x50>
        SetErrorFlags(ErrorCauseFpgaStop);
     ca8:	01000084 	movi	r4,2
     cac:	0000a940 	call	a94 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    }

    // フォルトフラグを更新する
    if (irq_flags & Pio1Motor1SwitchFault) {
     cb0:	8080020c 	andi	r2,r16,8
     cb4:	10000526 	beq	r2,zero,ccc <_ZN18CentralizedMonitor11Pio1HandlerEPv+0x6c>
        SetFaultFlags(FaultCauseMotor1LoadSwitch);
     cb8:	01040004 	movi	r4,4096
     cbc:	0000bc40 	call	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
// ホールセンサーやエンコーダに電源を供給するロードスイッチを制御するクラス
class LoadSwitch {
public:
    static void SetMotor1Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
     cc0:	00c00804 	movi	r3,32
     cc4:	00b88514 	movui	r2,57876
     cc8:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor1Enabled(false);
    }
    if (irq_flags & Pio1Motor2SwitchFault) {
     ccc:	8080040c 	andi	r2,r16,16
     cd0:	10000526 	beq	r2,zero,ce8 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0x88>
        SetFaultFlags(FaultCauseMotor2LoadSwitch);
     cd4:	01080004 	movi	r4,8192
     cd8:	0000bc40 	call	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
        }
    }

    static void SetMotor2Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor2SwitchEnable);
     cdc:	00c01004 	movi	r3,64
     ce0:	00b88514 	movui	r2,57876
     ce4:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor2Enabled(false);
    }
    if (irq_flags & Pio1Motor3SwitchFault) {
     ce8:	8080080c 	andi	r2,r16,32
     cec:	10000526 	beq	r2,zero,d04 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0xa4>
        SetFaultFlags(FaultCauseMotor3LoadSwitch);
     cf0:	01100004 	movi	r4,16384
     cf4:	0000bc40 	call	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
        }
    }

    static void SetMotor3Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor3SwitchEnable);
     cf8:	00c02004 	movi	r3,128
     cfc:	00b88514 	movui	r2,57876
     d00:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor3Enabled(false);
    }
    if (irq_flags & Pio1Motor4SwitchFault) {
     d04:	8080100c 	andi	r2,r16,64
     d08:	10000526 	beq	r2,zero,d20 <_ZN18CentralizedMonitor11Pio1HandlerEPv+0xc0>
        SetFaultFlags(FaultCauseMotor4LoadSwitch);
     d0c:	01200014 	movui	r4,32768
     d10:	0000bc40 	call	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
        }
    }

    static void SetMotor4Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor4SwitchEnable);
     d14:	00c04004 	movi	r3,256
     d18:	00b88514 	movui	r2,57876
     d1c:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor4Enabled(false);
    }
    if (irq_flags & Pio1Motor5SwitchFault) {
     d20:	8400200c 	andi	r16,r16,128
     d24:	80000526 	beq	r16,zero,d3c <_ZN18CentralizedMonitor11Pio1HandlerEPv+0xdc>
        SetFaultFlags(FaultCauseMotor5LoadSwitch);
     d28:	01000074 	movhi	r4,1
     d2c:	0000bc40 	call	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
        }
    }

    static void SetMotor5Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor5SwitchEnable);
     d30:	00c08004 	movi	r3,512
     d34:	00b88514 	movui	r2,57876
     d38:	10c00035 	stwio	r3,0(r2)
        LoadSwitch::SetMotor5Enabled(false);
    }
}
     d3c:	dfc00117 	ldw	ra,4(sp)
     d40:	dc000017 	ldw	r16,0(sp)
     d44:	dec00204 	addi	sp,sp,8
     d48:	f800283a 	ret

00000d4c <_ZN18CentralizedMonitor23VectorControllerHandlerEPv>:

void CentralizedMonitor::VectorControllerHandler(void *context) {
     d4c:	defffe04 	addi	sp,sp,-8
	static VectorControllerStatus GetStatus(void) {
        return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
	}

	static VectorControllerStatus GetInterruptFlag(void) {
		return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
     d50:	00bc0094 	movui	r2,61442
     d54:	dfc00115 	stw	ra,4(sp)
     d58:	dc000015 	stw	r16,0(sp)
     d5c:	1400002b 	ldhuio	r16,0(r2)
        return (~Status >> 4) & 0xF;
     d60:	843fffcc 	andi	r16,r16,65535
     d64:	0420303a 	nor	r16,zero,r16
     d68:	8008917a 	slli	r4,r16,5
    auto int_flags = VectorController::GetInterruptFlag();
#if DEBUG_PRINTF
    DEBUG_PRINTF("VC:INT=%04X,STA=%04X\n", int_flags.Status, VectorController::GetStatus().Status);
#endif
    int hall_fault = int_flags.HallSensorFault();
    SetErrorFlags(hall_fault * ErrorCauseMotor1HallSensor);
     d6c:	2107800c 	andi	r4,r4,7680
     d70:	0000a940 	call	a94 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    if (~IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE) & Pio1FpgaStop) {
     d74:	00b84014 	movui	r2,57600
     d78:	10800037 	ldwio	r2,0(r2)
     d7c:	1080010c 	andi	r2,r2,4
     d80:	1000091e 	bne	r2,zero,da8 <_ZN18CentralizedMonitor23VectorControllerHandlerEPv+0x5c>
        return (~Status >> 12) & 0xF;
     d84:	8008d2ba 	srli	r4,r16,10
        return (~Status >> 8) & 0xF;
     d88:	8020d07a 	srli	r16,r16,1
        // DRV8312のOTW, FAULTは12V電源が喪失するとアサートされてしまうのでFPGA_STOPがデアサートされている間のみ反応する
        int driver_otw = int_flags.OverTemperatureFault();
        int driver_fault = int_flags.OverCurrentFault();
        SetFaultFlags((driver_otw * FaultCauseMotor1OverTemperature) | (driver_fault * FaultCauseMotor1OverCurrent));
     d8c:	21000f0c 	andi	r4,r4,60
     d90:	8401e00c 	andi	r16,r16,1920
     d94:	2408b03a 	or	r4,r4,r16
    }
}
     d98:	dfc00117 	ldw	ra,4(sp)
     d9c:	dc000017 	ldw	r16,0(sp)
     da0:	dec00204 	addi	sp,sp,8
        SetFaultFlags((driver_otw * FaultCauseMotor1OverTemperature) | (driver_fault * FaultCauseMotor1OverCurrent));
     da4:	0000bc41 	jmpi	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
}
     da8:	dfc00117 	ldw	ra,4(sp)
     dac:	dc000017 	ldw	r16,0(sp)
     db0:	dec00204 	addi	sp,sp,8
     db4:	f800283a 	ret

00000db8 <_ZN18CentralizedMonitor22MotorControllerHandlerEPv>:

void CentralizedMonitor::MotorControllerHandler(void *context) {
     db8:	defffe04 	addi	sp,sp,-8
    static MotorControllerStatus GetStatus(void) {
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    }

    static MotorControllerStatus GetInterruptFlag(void) {
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
     dbc:	00bc4094 	movui	r2,61698
     dc0:	dfc00115 	stw	ra,4(sp)
     dc4:	dc000015 	stw	r16,0(sp)
     dc8:	1100002b 	ldhuio	r4,0(r2)
     dcc:	243fffcc 	andi	r16,r4,65535
        return ~Status & 0x1;
     dd0:	0108303a 	nor	r4,zero,r4
     dd4:	2100004c 	andi	r4,r4,1
    auto int_flags = MotorController::GetInterruptFlag();
#if DEBUG_PRINTF
    DEBUG_PRINTF("MC:INT=%04X,STA=%04X\n", int_flags.Status, MotorController::GetStatus().Status);
#endif
    int hall_fault = int_flags.HallSensorFault();
    SetErrorFlags(hall_fault * ErrorCauseMotor5HallSensor);
     dd8:	2008937a 	slli	r4,r4,13
     ddc:	0000a940 	call	a94 <_ZN18CentralizedMonitor13SetErrorFlagsEm>
    if (~IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE) & Pio1FpgaStop) {
     de0:	00b84014 	movui	r2,57600
     de4:	10800037 	ldwio	r2,0(r2)
     de8:	1080010c 	andi	r2,r2,4
     dec:	10000a1e 	bne	r2,zero,e18 <_ZN18CentralizedMonitor22MotorControllerHandlerEPv+0x60>
        return (~Status & 0x4) >> 2;
     df0:	0404303a 	nor	r2,zero,r16
     df4:	1008913a 	slli	r4,r2,4
        return (~Status & 0x2) >> 1;
     df8:	100492ba 	slli	r2,r2,10
        // DRV8312のOTW, FAULTは12V電源が喪失するとアサートされてしまうのでFPGA_STOPがデアサートされている間のみ反応する
        int driver_otw = int_flags.OverTemperatureFault();
        int driver_fault = int_flags.OverCurrentFault();
        SetFaultFlags((driver_otw * FaultCauseMotor5OverTemperature) | (driver_fault * FaultCauseMotor5OverCurrent));
     dfc:	2100100c 	andi	r4,r4,64
     e00:	1082000c 	andi	r2,r2,2048
     e04:	2088b03a 	or	r4,r4,r2
    }
}
     e08:	dfc00117 	ldw	ra,4(sp)
     e0c:	dc000017 	ldw	r16,0(sp)
     e10:	dec00204 	addi	sp,sp,8
        SetFaultFlags((driver_otw * FaultCauseMotor5OverTemperature) | (driver_fault * FaultCauseMotor5OverCurrent));
     e14:	0000bc41 	jmpi	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
}
     e18:	dfc00117 	ldw	ra,4(sp)
     e1c:	dc000017 	ldw	r16,0(sp)
     e20:	dec00204 	addi	sp,sp,8
     e24:	f800283a 	ret

00000e28 <_ZN18CentralizedMonitor24ResetMotorInterruptFlagsEv>:
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
     e28:	00bc4094 	movui	r2,61698
     e2c:	1080002b 	ldhuio	r2,0(r2)
    static void ClearFault(void) {
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x2);
    }

    static void ResetFault(void) {
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x3);
     e30:	008000c4 	movi	r2,3
     e34:	00fc4114 	movui	r3,61700
     e38:	1880002d 	sthio	r2,0(r3)
		return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
     e3c:	00fc0094 	movui	r3,61442
     e40:	18c0002b 	ldhuio	r3,0(r3)
	static void ClearFault(void) {
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x2);
	}

	static void ResetFault(void) {
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x3);
     e44:	00fc0114 	movui	r3,61444
     e48:	1880002d 	sthio	r2,0(r3)
    // GetInterruptFlag()で割り込みフラグがクリアされ、現在もフォルト状態が発生しているならResetFault()で割り込みフラグが再びセットされる
    (void)MotorController::GetInterruptFlag();
    MotorController::ResetFault();
    (void)VectorController::GetInterruptFlag();
    VectorController::ResetFault();
}
     e4c:	f800283a 	ret

00000e50 <_ZN18CentralizedMonitor10InitializeEv>:
void CentralizedMonitor::Initialize(void) {
     e50:	defffe04 	addi	sp,sp,-8
    alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, TimerHandler, nullptr, nullptr);
     e54:	01800034 	movhi	r6,0
     e58:	d8000015 	stw	zero,0(sp)
     e5c:	000f883a 	mov	r7,zero
     e60:	31845504 	addi	r6,r6,4436
     e64:	01400044 	movi	r5,1
     e68:	0009883a 	mov	r4,zero
void CentralizedMonitor::Initialize(void) {
     e6c:	dfc00115 	stw	ra,4(sp)
    alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, TimerHandler, nullptr, nullptr);
     e70:	00057240 	call	5724 <alt_ic_isr_register>
    alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ, Pio0Handler, nullptr, nullptr);
     e74:	01800034 	movhi	r6,0
     e78:	d8000015 	stw	zero,0(sp)
     e7c:	000f883a 	mov	r7,zero
     e80:	31846004 	addi	r6,r6,4480
     e84:	01400084 	movi	r5,2
     e88:	0009883a 	mov	r4,zero
     e8c:	00057240 	call	5724 <alt_ic_isr_register>
    alt_ic_isr_register(PIO_1_IRQ_INTERRUPT_CONTROLLER_ID, PIO_1_IRQ, Pio1Handler, nullptr, nullptr);
     e90:	01800034 	movhi	r6,0
     e94:	d8000015 	stw	zero,0(sp)
     e98:	000f883a 	mov	r7,zero
     e9c:	31831804 	addi	r6,r6,3168
     ea0:	014000c4 	movi	r5,3
     ea4:	0009883a 	mov	r4,zero
     ea8:	00057240 	call	5724 <alt_ic_isr_register>
    alt_ic_isr_register(VECTOR_CONTROLLER_MASTER_0_IRQ_INTERRUPT_CONTROLLER_ID, VECTOR_CONTROLLER_MASTER_0_IRQ, VectorControllerHandler, nullptr, nullptr);
     eac:	01800034 	movhi	r6,0
     eb0:	d8000015 	stw	zero,0(sp)
     eb4:	000f883a 	mov	r7,zero
     eb8:	31835304 	addi	r6,r6,3404
     ebc:	014001c4 	movi	r5,7
     ec0:	0009883a 	mov	r4,zero
     ec4:	00057240 	call	5724 <alt_ic_isr_register>
    alt_ic_isr_register(MOTOR_CONTROLLER_5_IRQ_INTERRUPT_CONTROLLER_ID, MOTOR_CONTROLLER_5_IRQ, MotorControllerHandler, nullptr, nullptr);
     ec8:	01800034 	movhi	r6,0
     ecc:	d8000015 	stw	zero,0(sp)
     ed0:	000f883a 	mov	r7,zero
     ed4:	31836e04 	addi	r6,r6,3512
     ed8:	01400204 	movi	r5,8
     edc:	0009883a 	mov	r4,zero
     ee0:	00057240 	call	5724 <alt_ic_isr_register>
    static void SetAllOff(void) {
        IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor5SwitchEnable | Pio2Motor4SwitchEnable | Pio2Motor3SwitchEnable | Pio2Motor2SwitchEnable | Pio2Motor1SwitchEnable);
    }

    static void SetAllOn(void) {
        IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor5SwitchEnable | Pio2Motor4SwitchEnable | Pio2Motor3SwitchEnable | Pio2Motor2SwitchEnable | Pio2Motor1SwitchEnable);
     ee4:	00c0f804 	movi	r3,992
     ee8:	00b88414 	movui	r2,57872
     eec:	10c00035 	stwio	r3,0(r2)
    usleep(1000);
     ef0:	0100fa04 	movi	r4,1000
     ef4:	00051ac0 	call	51ac <usleep>
}
     ef8:	dfc00117 	ldw	ra,4(sp)
     efc:	dec00204 	addi	sp,sp,8
    ResetMotorInterruptFlags();
     f00:	0000e281 	jmpi	e28 <_ZN18CentralizedMonitor24ResetMotorInterruptFlagsEv>

00000f04 <_ZN18CentralizedMonitor15ClearErrorFlagsEv>:
void CentralizedMonitor::ClearErrorFlags(void) {
     f04:	00800034 	movhi	r2,0
     f08:	deffef04 	addi	sp,sp,-68
     f0c:	1089ed04 	addi	r2,r2,10164
     f10:	d8800715 	stw	r2,28(sp)
     f14:	00800034 	movhi	r2,0
     f18:	1083f604 	addi	r2,r2,4056
     f1c:	d9000104 	addi	r4,sp,4
     f20:	d8800a15 	stw	r2,40(sp)
     f24:	dfc01015 	stw	ra,64(sp)
     f28:	df000f15 	stw	fp,60(sp)
     f2c:	d8000815 	stw	zero,32(sp)
     f30:	df000915 	stw	fp,36(sp)
     f34:	dec00b15 	stw	sp,44(sp)
     f38:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
    CriticalSection cs;
     f3c:	d9000e04 	addi	r4,sp,56
     f40:	00009dc0 	call	9dc <_ZN15CriticalSectionC1Ev>
    uint32_t new_error_flags = _ErrorFlags;
     f44:	d0a01417 	ldw	r2,-32688(gp)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, Pio1Motor5SwitchFault | Pio1Motor4SwitchFault | Pio1Motor3SwitchFault | Pio1Motor2SwitchFault | Pio1Motor1SwitchFault | Pio1ModuleSleep | Pio1FpgaStop);
     f48:	00c03f84 	movi	r3,254
    uint32_t new_error_flags = _ErrorFlags;
     f4c:	d8800015 	stw	r2,0(sp)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, Pio1Motor5SwitchFault | Pio1Motor4SwitchFault | Pio1Motor3SwitchFault | Pio1Motor2SwitchFault | Pio1Motor1SwitchFault | Pio1ModuleSleep | Pio1FpgaStop);
     f50:	00b84214 	movui	r2,57608
     f54:	10c00035 	stwio	r3,0(r2)
    uint32_t pio_1_data = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE);
     f58:	00b84014 	movui	r2,57600
     f5c:	10800037 	ldwio	r2,0(r2)
    if (~pio_1_data & Pio1ModuleSleep) {
     f60:	10c0008c 	andi	r3,r2,2
     f64:	1800041e 	bne	r3,zero,f78 <_ZN18CentralizedMonitor15ClearErrorFlagsEv+0x74>
        new_error_flags &= ~ErrorCauseModuleSleep;
     f68:	d9000017 	ldw	r4,0(sp)
     f6c:	00ffff84 	movi	r3,-2
     f70:	20c6703a 	and	r3,r4,r3
     f74:	d8c00015 	stw	r3,0(sp)
    if (~pio_1_data & Pio1FpgaStop) {
     f78:	1080010c 	andi	r2,r2,4
     f7c:	1000051e 	bne	r2,zero,f94 <_ZN18CentralizedMonitor15ClearErrorFlagsEv+0x90>
        new_error_flags &= ~ErrorCauseFpgaStop;
     f80:	d8c00017 	ldw	r3,0(sp)
     f84:	00bfff44 	movi	r2,-3
     f88:	1884703a 	and	r2,r3,r2
     f8c:	d8800015 	stw	r2,0(sp)
        ResetMotorInterruptFlags();
     f90:	0000e280 	call	e28 <_ZN18CentralizedMonitor24ResetMotorInterruptFlagsEv>
    int dc48v_voltage = Adc2::GetDc48v();
     f94:	d0a01917 	ldw	r2,-32668(gp)
    if (DC48V_UNDER_VOLTAGE_THRESHOLD <= dc48v_voltage) {
     f98:	00d07c34 	movhi	r3,16880
    int dc48v_voltage = Adc2::GetDc48v();
     f9c:	1005fe72 	custom	249,r2,r2,zero
    if (DC48V_UNDER_VOLTAGE_THRESHOLD <= dc48v_voltage) {
     fa0:	1005feb2 	custom	250,r2,r2,zero
     fa4:	10c7f932 	custom	228,r3,r2,r3
     fa8:	18000426 	beq	r3,zero,fbc <_ZN18CentralizedMonitor15ClearErrorFlagsEv+0xb8>
        new_error_flags &= ~ErrorCauseDc48vUnderVoltage;
     fac:	d9000017 	ldw	r4,0(sp)
     fb0:	00fffec4 	movi	r3,-5
     fb4:	20c6703a 	and	r3,r4,r3
     fb8:	d8c00015 	stw	r3,0(sp)
    if (dc48v_voltage <= DC48V_OVER_VOLTAGE_THRESHOLD) {
     fbc:	00d094b4 	movhi	r3,16978
     fc0:	10c5f9b2 	custom	230,r2,r2,r3
     fc4:	10000426 	beq	r2,zero,fd8 <_ZN18CentralizedMonitor15ClearErrorFlagsEv+0xd4>
        new_error_flags &= ~ErrorCauseDc48vOverVoltage;
     fc8:	d8c00017 	ldw	r3,0(sp)
     fcc:	00bffdc4 	movi	r2,-9
     fd0:	1884703a 	and	r2,r3,r2
     fd4:	d8800015 	stw	r2,0(sp)
        return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
     fd8:	00bc0014 	movui	r2,61440
     fdc:	10c0002b 	ldhuio	r3,0(r2)
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
     fe0:	00bc4014 	movui	r2,61696
     fe4:	1080002b 	ldhuio	r2,0(r2)
        return (Status >> 4) & 0xF;
     fe8:	1806d13a 	srli	r3,r3,4
        return Status & 0x1;
     fec:	1080004c 	andi	r2,r2,1
    uint32_t hall_fault_n = vcm_status.HallSensorFaultN() | (mc5_status.HallSensorFaultN() << 4);
     ff0:	1004913a 	slli	r2,r2,4
     ff4:	18c003cc 	andi	r3,r3,15
     ff8:	10c4b03a 	or	r2,r2,r3
    new_error_flags &= ~(hall_fault_n * ErrorCauseMotor1HallSensor);
     ffc:	1004927a 	slli	r2,r2,9
    1000:	d8c00017 	ldw	r3,0(sp)
    1004:	0084303a 	nor	r2,zero,r2
    1008:	10c4703a 	and	r2,r2,r3
    new_error_flags &= ~(ErrorCauseMotor5OverCurrent | ErrorCauseMotor4OverCurrent | ErrorCauseMotor3OverCurrent | ErrorCauseMotor2OverCurrent | ErrorCauseMotor1OverCurrent);
    100c:	00ff83c4 	movi	r3,-497
    1010:	10c4703a 	and	r2,r2,r3
        __builtin_stwio(&_SharedMemory.ErrorFlags, new_error_flags);
    1014:	00c00074 	movhi	r3,1
    _ErrorFlags = new_error_flags;
    1018:	d0a01415 	stw	r2,-32688(gp)
    101c:	18ac0035 	stwio	r2,-20480(r3)
    CriticalSection cs;
    1020:	d9000e04 	addi	r4,sp,56
    1024:	00009f80 	call	9f8 <_ZN15CriticalSectionD1Ev>
    1028:	d9000104 	addi	r4,sp,4
    102c:	0003e740 	call	3e74 <_Unwind_SjLj_Unregister>
}
    1030:	dfc01017 	ldw	ra,64(sp)
    1034:	df000f17 	ldw	fp,60(sp)
    1038:	dec01104 	addi	sp,sp,68
    103c:	f800283a 	ret

00001040 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv>:
void CentralizedMonitor::DoPeriodicCommonWork(void) {
    1040:	defffe04 	addi	sp,sp,-8
    1044:	dfc00115 	stw	ra,4(sp)
    1048:	dc000015 	stw	r16,0(sp)
    PERF_RESET(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE));
    104c:	00c00044 	movi	r3,1
    1050:	00b1c014 	movui	r2,50944
    1054:	10c00035 	stwio	r3,0(r2)
    PERF_START_MEASURING(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE));
    1058:	00b1c114 	movui	r2,50948
    105c:	10000035 	stwio	zero,0(r2)
    PERF_BEGIN(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE), 1);
    1060:	00b1c514 	movui	r2,50964
    1064:	10000035 	stwio	zero,0(r2)
    DataHolder::FetchRegistersOnPreControlLoop();
    1068:	00011a00 	call	11a0 <_ZN10DataHolder30FetchRegistersOnPreControlLoopEv>
    StreamTransmitter::TransmitMotion(DataHolder::GetMotionData(), performance_counter);
    106c:	d1601617 	ldw	r5,-32680(gp)
    1070:	01000074 	movhi	r4,1
    1074:	2120c104 	addi	r4,r4,-31996
    1078:	0001f280 	call	1f28 <_ZN17StreamTransmitter14TransmitMotionERK12MotionData_ti>
    int adc2_timeout = _Adc2Timeout;
    107c:	d0a00017 	ldw	r2,-32768(gp)
    if (0 <= --adc2_timeout) {
    1080:	10bfffc4 	addi	r2,r2,-1
    1084:	10002316 	blt	r2,zero,1114 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xd4>
        _Adc2Timeout = adc2_timeout;
    1088:	d0a00015 	stw	r2,-32768(gp)
    /**
     * 何らかの問題が発生しているか取得する
     * @return 問題が起きている場合にtrueを返す
     */
    static bool IsAnyProblemOccured(void){
        return (_ErrorFlags != 0) || (_FaultFlags != 0);
    108c:	d0a01417 	ldw	r2,-32688(gp)
    1090:	1000231e 	bne	r2,zero,1120 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xe0>
    1094:	d0a01317 	ldw	r2,-32692(gp)
    1098:	1000211e 	bne	r2,zero,1120 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xe0>
        bool new_parameters = SharedMemory::UpdateParameters();
    109c:	0001df00 	call	1df0 <_ZN12SharedMemory16UpdateParametersEv>
        WheelController::Update(new_parameters);
    10a0:	14003fcc 	andi	r16,r2,255
    10a4:	8009883a 	mov	r4,r16
    10a8:	000215c0 	call	215c <_ZN15WheelController6UpdateEb>
        DribbleController::Update(new_parameters);
    10ac:	8009883a 	mov	r4,r16
    10b0:	00013ec0 	call	13ec <_ZN17DribbleController6UpdateEb>
    PERF_END(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE), 1);
    10b4:	00b1c414 	movui	r2,50960
    10b8:	10000035 	stwio	zero,0(r2)
    PERF_STOP_MEASURING(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE));
    10bc:	00b1c014 	movui	r2,50944
    10c0:	10000035 	stwio	zero,0(r2)
    uint64_t counter_64 = perf_get_section_time(reinterpret_cast<void*>(PERFORMANCE_COUNTER_0_BASE), 1);
    10c4:	0131c014 	movui	r4,50944
    10c8:	01400044 	movi	r5,1
    10cc:	00052e00 	call	52e0 <perf_get_section_time>
    performance_counter = (counter_64 & 0xFFFFFFFFFFFF0000ULL) ? 65535 : static_cast<int>(counter_64);
    10d0:	113fffec 	andhi	r4,r2,65535
    10d4:	20c8b03a 	or	r4,r4,r3
    10d8:	20000126 	beq	r4,zero,10e0 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xa0>
    10dc:	00bfffd4 	movui	r2,65535
    10e0:	d0a01615 	stw	r2,-32680(gp)
    ++cnt;
    10e4:	d0a01517 	ldw	r2,-32684(gp)
    10e8:	10800044 	addi	r2,r2,1
    10ec:	d0a01515 	stw	r2,-32684(gp)
    if (cnt == 50) {
    10f0:	10c00c98 	cmpnei	r3,r2,50
    10f4:	1800111e 	bne	r3,zero,113c <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xfc>
    static void SetMotor5Enabled(bool enabled) {
        if (enabled == false) {
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor5Led);
        }
        else {
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor5Led);
    10f8:	00c00404 	movi	r3,16
    10fc:	00b88414 	movui	r2,57872
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor5Led);
    1100:	10c00035 	stwio	r3,0(r2)
}
    1104:	dfc00117 	ldw	ra,4(sp)
    1108:	dc000017 	ldw	r16,0(sp)
    110c:	dec00204 	addi	sp,sp,8
    StreamTransmitter::TransmitStatus();
    1110:	0001ed41 	jmpi	1ed4 <_ZN17StreamTransmitter14TransmitStatusEv>
        SetFaultFlags(FaultCauseAdc2Timeout);
    1114:	01000044 	movi	r4,1
    1118:	0000bc40 	call	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
    111c:	003fdb06 	br	108c <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0x4c>
        SharedMemory::ClearParameters();
    1120:	0001e940 	call	1e94 <_ZN12SharedMemory15ClearParametersEv>
        return (static_cast<uint32_t>(__builtin_ldwio(&_SharedMemory.ErrorFlags)) == 0xFFFFFFFFUL);
    1124:	00800074 	movhi	r2,1
    1128:	10ac0037 	ldwio	r2,-20480(r2)
        if (SharedMemory::IsRequestedClearingErrorFlags() == true) {
    112c:	10bfffd8 	cmpnei	r2,r2,-1
    1130:	103fe01e 	bne	r2,zero,10b4 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0x74>
            ClearErrorFlags();
    1134:	0000f040 	call	f04 <_ZN18CentralizedMonitor15ClearErrorFlagsEv>
    1138:	003fde06 	br	10b4 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0x74>
    else if (100 <= cnt) {
    113c:	10801910 	cmplti	r2,r2,100
    1140:	103ff01e 	bne	r2,zero,1104 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xc4>
        cnt = 0;
    1144:	d0201515 	stw	zero,-32684(gp)
    1148:	00c00404 	movi	r3,16
    114c:	00b88514 	movui	r2,57876
    1150:	003feb06 	br	1100 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv+0xc0>

00001154 <_ZN18CentralizedMonitor12TimerHandlerEPv>:
void CentralizedMonitor::TimerHandler(void *context) {
    1154:	deffff04 	addi	sp,sp,-4
    1158:	dfc00015 	stw	ra,0(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    115c:	00b20014 	movui	r2,51200
    1160:	10000035 	stwio	zero,0(r2)
    SetFaultFlags(FaultCauseImuTimeout);
    1164:	01000084 	movi	r4,2
    1168:	0000bc40 	call	bc4 <_ZN18CentralizedMonitor13SetFaultFlagsEm>
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE, 0);
    116c:	00b80214 	movui	r2,57352
    1170:	10000035 	stwio	zero,0(r2)
}
    1174:	dfc00017 	ldw	ra,0(sp)
    1178:	dec00104 	addi	sp,sp,4
    DoPeriodicCommonWork();
    117c:	00010401 	jmpi	1040 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv>

00001180 <_ZN18CentralizedMonitor11Pio0HandlerEPv>:
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0);
    1180:	00b80314 	movui	r2,57356
    1184:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIOD_0(TIMER_0_BASE, 0);
    1188:	00b20214 	movui	r2,51208
    118c:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    1190:	00c001c4 	movi	r3,7
    1194:	00b20114 	movui	r2,51204
    1198:	10c00035 	stwio	r3,0(r2)
    DoPeriodicCommonWork();
    119c:	00010401 	jmpi	1040 <_ZN18CentralizedMonitor20DoPeriodicCommonWorkEv>

000011a0 <_ZN10DataHolder30FetchRegistersOnPreControlLoopEv>:
static inline int IMU_SPIM_GetTempData(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->TEMP_DATA);
}

static inline int IMU_SPIM_GetAccelDataX(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_X);
    11a0:	00b98114 	movui	r2,58884
    11a4:	10c0002f 	ldhio	r3,0(r2)
#include <peripheral/imu_spim.hpp>
#include <peripheral/vector_controller.hpp>
#include <peripheral/motor_controller.hpp>

void DataHolder::FetchRegistersOnPreControlLoop(void){
    _MotionData.Imu.AccelX = IMU_SPIM_GetAccelDataX(IMU_SPIM_BASE) * IMU_ACCELEROMETER_SCALE;
    11a8:	010ee774 	movhi	r4,15261
    11ac:	21333344 	addi	r4,r4,-13107
    11b0:	1807feb2 	custom	250,r3,r3,zero
    11b4:	1907ff32 	custom	252,r3,r3,r4
    11b8:	01400074 	movhi	r5,1
    11bc:	00800074 	movhi	r2,1
    11c0:	28e0c115 	stw	r3,-31996(r5)
    11c4:	10a0c104 	addi	r2,r2,-31996
}

static inline int IMU_SPIM_GetAccelDataY(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_Y);
    11c8:	00f98194 	movui	r3,58886
    11cc:	18c0002f 	ldhio	r3,0(r3)
    _MotionData.Imu.AccelY = IMU_SPIM_GetAccelDataY(IMU_SPIM_BASE) * IMU_ACCELEROMETER_SCALE;
    11d0:	1807feb2 	custom	250,r3,r3,zero
    11d4:	1907ff32 	custom	252,r3,r3,r4
    11d8:	10c00115 	stw	r3,4(r2)
}

static inline int IMU_SPIM_GetAccelDataZ(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_Z);
    11dc:	00f98214 	movui	r3,58888
    11e0:	18c0002f 	ldhio	r3,0(r3)
}

static inline int IMU_SPIM_GetGyroDataX(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_X);
    11e4:	01798294 	movui	r5,58890
    _MotionData.Imu.AccelZ = IMU_SPIM_GetAccelDataZ(IMU_SPIM_BASE) * IMU_ACCELEROMETER_SCALE;
    11e8:	1807feb2 	custom	250,r3,r3,zero
    11ec:	1907ff32 	custom	252,r3,r3,r4
    11f0:	10c00215 	stw	r3,8(r2)
    11f4:	28c0002f 	ldhio	r3,0(r5)
    _MotionData.Imu.GyroX = IMU_SPIM_GetGyroDataX(IMU_SPIM_BASE) * IMU_GYROSCOPE_SCALE;
    11f8:	010ea334 	movhi	r4,14988
    11fc:	21281604 	addi	r4,r4,-24488
    1200:	1807feb2 	custom	250,r3,r3,zero
    1204:	1907ff32 	custom	252,r3,r3,r4
    1208:	10c00315 	stw	r3,12(r2)
    120c:	28c0002f 	ldhio	r3,0(r5)
    _MotionData.Imu.GyroY = IMU_SPIM_GetGyroDataX(IMU_SPIM_BASE) * IMU_GYROSCOPE_SCALE;
    1210:	1807feb2 	custom	250,r3,r3,zero
    1214:	1907ff32 	custom	252,r3,r3,r4
    1218:	10c00415 	stw	r3,16(r2)
    121c:	28c0002f 	ldhio	r3,0(r5)
    _MotionData.Imu.GyroZ = IMU_SPIM_GetGyroDataX(IMU_SPIM_BASE) * IMU_GYROSCOPE_SCALE;
    1220:	1807feb2 	custom	250,r3,r3,zero
    1224:	1907ff32 	custom	252,r3,r3,r4
    1228:	10c00515 	stw	r3,20(r2)
	}

	static int GetEncoderValue(int number) {
		switch(number){
		case 1:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER1);
    122c:	00fc0214 	movui	r3,61448
    1230:	18c0002f 	ldhio	r3,0(r3)

    static constexpr float ENCODER_SCALE = IMU_OUTPUT_RATE / ENCODER_PPR * WHEEL_CIRCUMFERENCE;
    _MotionData.Wheels[0].Velocity = VectorController::GetEncoderValue(1) * ENCODER_SCALE;
    1234:	010f4774 	movhi	r4,15645
    1238:	1807feb2 	custom	250,r3,r3,zero
    123c:	1907ff32 	custom	252,r3,r3,r4
    1240:	10c00615 	stw	r3,24(r2)
		case 2:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER2);
    1244:	00fc0294 	movui	r3,61450
    1248:	18c0002f 	ldhio	r3,0(r3)
    _MotionData.Wheels[1].Velocity = VectorController::GetEncoderValue(2) * ENCODER_SCALE;
    124c:	1807feb2 	custom	250,r3,r3,zero
    1250:	1907ff32 	custom	252,r3,r3,r4
    1254:	10c00a15 	stw	r3,40(r2)
		case 3:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER3);
    1258:	00fc0314 	movui	r3,61452
    125c:	18c0002f 	ldhio	r3,0(r3)
    _MotionData.Wheels[2].Velocity = VectorController::GetEncoderValue(3) * ENCODER_SCALE;
    1260:	1807feb2 	custom	250,r3,r3,zero
    1264:	1907ff32 	custom	252,r3,r3,r4
    1268:	10c00e15 	stw	r3,56(r2)
		case 4:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->ENCODER4);
    126c:	00fc0394 	movui	r3,61454
    1270:	18c0002f 	ldhio	r3,0(r3)
    _MotionData.Wheels[3].Velocity = VectorController::GetEncoderValue(4) * ENCODER_SCALE;
    1274:	1807feb2 	custom	250,r3,r3,zero
    1278:	1907ff32 	custom	252,r3,r3,r4
    127c:	10c01215 	stw	r3,72(r2)
	}

	static int GetCurrentMeasurementD(int number) {
		switch(number){
		case 1:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASD1);
    1280:	00fc0414 	movui	r3,61456
    1284:	1900002f 	ldhio	r4,0(r3)
    _MotionData.Wheels[0].CurrentMeasD = VectorController::GetCurrentMeasurementD(1) * ADC1_CURRENT_SCALE;
    1288:	00ce8174 	movhi	r3,14853
    128c:	18e3e2c4 	addi	r3,r3,-28789
    1290:	2009feb2 	custom	250,r4,r4,zero
    1294:	20c9ff32 	custom	252,r4,r4,r3
    1298:	11000715 	stw	r4,28(r2)
		case 2:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASD2);
    129c:	013c0514 	movui	r4,61460
    12a0:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[1].CurrentMeasD = VectorController::GetCurrentMeasurementD(2) * ADC1_CURRENT_SCALE;
    12a4:	2009feb2 	custom	250,r4,r4,zero
    12a8:	20c9ff32 	custom	252,r4,r4,r3
    12ac:	11000b15 	stw	r4,44(r2)
		case 3:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASD3);
    12b0:	013c0614 	movui	r4,61464
    12b4:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[2].CurrentMeasD = VectorController::GetCurrentMeasurementD(3) * ADC1_CURRENT_SCALE;
    12b8:	2009feb2 	custom	250,r4,r4,zero
    12bc:	20c9ff32 	custom	252,r4,r4,r3
    12c0:	11000f15 	stw	r4,60(r2)
		case 4:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASD4);
    12c4:	013c0714 	movui	r4,61468
    12c8:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[3].CurrentMeasD = VectorController::GetCurrentMeasurementD(4) * ADC1_CURRENT_SCALE;
    12cc:	2009feb2 	custom	250,r4,r4,zero
    12d0:	20c9ff32 	custom	252,r4,r4,r3
    12d4:	11001315 	stw	r4,76(r2)
	}

	static int GetCurrentMeasurementQ(int number) {
		switch(number){
		case 1:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASQ1);
    12d8:	013c0494 	movui	r4,61458
    12dc:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[0].CurrentMeasQ = VectorController::GetCurrentMeasurementQ(1) * ADC1_CURRENT_SCALE;
    12e0:	2009feb2 	custom	250,r4,r4,zero
    12e4:	20c9ff32 	custom	252,r4,r4,r3
    12e8:	11000815 	stw	r4,32(r2)
		case 2:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASQ2);
    12ec:	013c0594 	movui	r4,61462
    12f0:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[1].CurrentMeasQ = VectorController::GetCurrentMeasurementQ(2) * ADC1_CURRENT_SCALE;
    12f4:	2009feb2 	custom	250,r4,r4,zero
    12f8:	20c9ff32 	custom	252,r4,r4,r3
    12fc:	11000c15 	stw	r4,48(r2)
		case 3:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASQ3);
    1300:	013c0694 	movui	r4,61466
    1304:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[2].CurrentMeasQ = VectorController::GetCurrentMeasurementQ(3) * ADC1_CURRENT_SCALE;
    1308:	2009feb2 	custom	250,r4,r4,zero
    130c:	20c9ff32 	custom	252,r4,r4,r3
    1310:	11001015 	stw	r4,64(r2)
		case 4:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IMEASQ4);
    1314:	013c0794 	movui	r4,61470
    1318:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[3].CurrentMeasQ = VectorController::GetCurrentMeasurementQ(4) * ADC1_CURRENT_SCALE;
    131c:	2009feb2 	custom	250,r4,r4,zero
    1320:	20c9ff32 	custom	252,r4,r4,r3
    1324:	11001415 	stw	r4,80(r2)
	}

	static int GetCurrentReferenceQ(int number) {
		switch(number){
		case 1:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IREFQ1);
    1328:	013c0894 	movui	r4,61474
    132c:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[0].CurrentRefQ = VectorController::GetCurrentReferenceQ(1) * ADC1_CURRENT_SCALE;
    1330:	2009feb2 	custom	250,r4,r4,zero
    1334:	20c9ff32 	custom	252,r4,r4,r3
    1338:	11000915 	stw	r4,36(r2)
		case 2:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IREFQ2);
    133c:	013c0994 	movui	r4,61478
    1340:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[1].CurrentRefQ = VectorController::GetCurrentReferenceQ(2) * ADC1_CURRENT_SCALE;
    1344:	2009feb2 	custom	250,r4,r4,zero
    1348:	20c9ff32 	custom	252,r4,r4,r3
    134c:	11000d15 	stw	r4,52(r2)
		case 3:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IREFQ3);
    1350:	013c0a94 	movui	r4,61482
    1354:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[2].CurrentRefQ = VectorController::GetCurrentReferenceQ(3) * ADC1_CURRENT_SCALE;
    1358:	2009feb2 	custom	250,r4,r4,zero
    135c:	20c9ff32 	custom	252,r4,r4,r3
    1360:	11001115 	stw	r4,68(r2)
		case 4:
			return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->IREFQ4);
    1364:	013c0b94 	movui	r4,61486
    1368:	2100002f 	ldhio	r4,0(r4)
    _MotionData.Wheels[3].CurrentRefQ = VectorController::GetCurrentReferenceQ(4) * ADC1_CURRENT_SCALE;
    136c:	2009feb2 	custom	250,r4,r4,zero
    1370:	20c7ff32 	custom	252,r3,r4,r3
    1374:	10c01515 	stw	r3,84(r2)
}
    1378:	f800283a 	ret

0000137c <_ZN10DataHolder15FetchAdc2ResultEv>:
    // 割り込みが開始される
    static void Start(void);

    // 48V電源の出力電圧を取得する[V]
    static float GetDc48v(void) {
        return _Result[0];
    137c:	d1201917 	ldw	r4,-32668(gp)
    }

    // ドリブルモーターの電流を取得する[A]
    static float GetDribbleCurrent(void) {
        return _Result[1];
    1380:	d1601a17 	ldw	r5,-32664(gp)
    }

    static bool IsFault(void) {
        return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->FAULT) != 0;
    1384:	00bc4194 	movui	r2,61702
    1388:	1080002f 	ldhio	r2,0(r2)

void DataHolder::FetchAdc2Result(void){
    float dc48v_voltage = Adc2::GetDc48v();
    float dribble_current = Adc2::GetDribbleCurrent();
    float dribble_voltage = dc48v_voltage * MotorController::GetPower() * (1.0f / MotorController::FULL_SCALE_OF_POWER);
    _Adc2Data.Dc48vVoltage = dc48v_voltage;
    138c:	01800074 	movhi	r6,1
    float dribble_voltage = dc48v_voltage * MotorController::GetPower() * (1.0f / MotorController::FULL_SCALE_OF_POWER);
    1390:	1005feb2 	custom	250,r2,r2,zero
    1394:	1105ff32 	custom	252,r2,r2,r4
    _Adc2Data.Dc48vVoltage = dc48v_voltage;
    1398:	3120be15 	stw	r4,-32008(r6)
    float dribble_voltage = dc48v_voltage * MotorController::GetPower() * (1.0f / MotorController::FULL_SCALE_OF_POWER);
    139c:	010e6bf4 	movhi	r4,14767
    _Adc2Data.Dc48vVoltage = dc48v_voltage;
    13a0:	00c00074 	movhi	r3,1
    float dribble_voltage = dc48v_voltage * MotorController::GetPower() * (1.0f / MotorController::FULL_SCALE_OF_POWER);
    13a4:	2130cf84 	addi	r4,r4,-15554
    _Adc2Data.Dc48vVoltage = dc48v_voltage;
    13a8:	18e0be04 	addi	r3,r3,-32008
    float dribble_voltage = dc48v_voltage * MotorController::GetPower() * (1.0f / MotorController::FULL_SCALE_OF_POWER);
    13ac:	1105ff32 	custom	252,r2,r2,r4
    _Adc2Data.DribbleVoltage = dribble_voltage;
    13b0:	18800115 	stw	r2,4(r3)
    _Adc2Data.DribbleCurrent = dribble_current;
    13b4:	19400215 	stw	r5,8(r3)
}
    13b8:	f800283a 	ret

000013bc <_ZN17DribbleController12StartControlEv>:
    static int GetPower(void) {
        return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->POWER);
    }

    static void SetPower(int value) {
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->POWER, value);
    13bc:	00bc4194 	movui	r2,61702
    13c0:	1000002d 	sthio	zero,0(r2)
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x2);
    13c4:	00c00084 	movi	r3,2
    13c8:	00bc4114 	movui	r2,61700
    13cc:	10c0002d 	sthio	r3,0(r2)
#include "shared_memory_manager.hpp"

void DribbleController::StartControl(void) {
    MotorController::SetPower(0);
    MotorController::ClearFault();
}
    13d0:	f800283a 	ret

000013d4 <_ZN17DribbleController11StopControlEv>:
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x1);
    13d4:	00c00044 	movi	r3,1
    13d8:	00bc4114 	movui	r2,61700
    13dc:	10c0002d 	sthio	r3,0(r2)
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->POWER, value);
    13e0:	00bc4194 	movui	r2,61702
    13e4:	1000002d 	sthio	zero,0(r2)

void DribbleController::StopControl(void) {
    MotorController::SetFault();
    MotorController::SetPower(0);
}
    13e8:	f800283a 	ret

000013ec <_ZN17DribbleController6UpdateEb>:

void DribbleController::Update(bool new_parameters) {
    float dribble_power = SharedMemory::GetParameters().dribble_power;
    13ec:	00800074 	movhi	r2,1
    13f0:	10e0dc17 	ldw	r3,-31888(r2)
        return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->FAULT) != 0;
    13f4:	00bc4114 	movui	r2,61700
    13f8:	1080002b 	ldhuio	r2,0(r2)
    13fc:	10bfffcc 	andi	r2,r2,65535
    if (MotorController::IsFault() == false) {
    1400:	10001a1e 	bne	r2,zero,146c <_ZN17DribbleController6UpdateEb+0x80>
        if (fabsf(dribble_power) <= 1.0f) {
    1404:	180bf832 	custom	224,r5,r3,zero
    1408:	010fe034 	movhi	r4,16256
    140c:	2905f9b2 	custom	230,r2,r5,r4
    1410:	10001526 	beq	r2,zero,1468 <_ZN17DribbleController6UpdateEb+0x7c>
        return __builtin_ldhio(&reinterpret_cast<Register_t*>(BASE)->POWER);
    1414:	00bc4194 	movui	r2,61702
    1418:	1080002f 	ldhio	r2,0(r2)
            int previous_power = MotorController::GetPower();
            float upper_limit = fminf(previous_power + SLEWRATE_LIMIT, MotorController::MAXIMUM_POWER);
    141c:	01514ef4 	movhi	r5,17723
    1420:	11000d84 	addi	r4,r2,54
    1424:	2009feb2 	custom	250,r4,r4,zero
    1428:	29640004 	addi	r5,r5,-28672
    142c:	2149fa72 	custom	233,r4,r4,r5
            float lower_limit = fmaxf(previous_power - SLEWRATE_LIMIT, -MotorController::MAXIMUM_POWER);
    1430:	10bff284 	addi	r2,r2,-54
    1434:	01714ef4 	movhi	r5,50491
    1438:	1005feb2 	custom	250,r2,r2,zero
    143c:	29640004 	addi	r5,r5,-28672
    1440:	1145fa32 	custom	232,r2,r2,r5
            float power = fmaxf(lower_limit, fminf(dribble_power * MotorController::FULL_SCALE_OF_POWER, upper_limit));
    1444:	01514f34 	movhi	r5,17724
    1448:	29600004 	addi	r5,r5,-32768
    144c:	1947ff32 	custom	252,r3,r3,r5
    1450:	1907fa72 	custom	233,r3,r3,r4
    1454:	10c5fa32 	custom	232,r2,r2,r3
            MotorController::SetPower(static_cast<int>(power));
    1458:	1005fe72 	custom	249,r2,r2,zero
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->POWER, value);
    145c:	00fc4194 	movui	r3,61702
    1460:	1880002d 	sthio	r2,0(r3)
    }
    1464:	f800283a 	ret
        }
        else {
            StopControl();
    1468:	00013d41 	jmpi	13d4 <_ZN17DribbleController11StopControlEv>
        }
    }
    else if (new_parameters == true) {
    146c:	21003fcc 	andi	r4,r4,255
    1470:	20000126 	beq	r4,zero,1478 <_ZN17DribbleController6UpdateEb+0x8c>
        StartControl();
    1474:	00013bc1 	jmpi	13bc <_ZN17DribbleController12StartControlEv>
    }
}
    1478:	f800283a 	ret

0000147c <_ZN4Adc213AwaitCompleteEv>:
    if (busy) *busy = (status & 0x1) ? true : false;
    if (acked) *acked = (status & 0x2) ? true : false;
}

static inline bool I2CM_IsBusy(uint32_t base) {
    int intflag = __builtin_ldhuio(&((I2CMasterRegisters*)base)->STATUS);
    147c:	00b90094 	movui	r2,58370
    1480:	1080002b 	ldhuio	r2,0(r2)
        I2CM_BusReset(I2C_BASE);
    }

    // 非同期アクセスの完了を待つ
    static void AwaitComplete(void) {
        while (I2CM_IsBusy(I2C_BASE)) {
    1484:	1080004c 	andi	r2,r2,1
    1488:	103ffc1e 	bne	r2,zero,147c <_ZN4Adc213AwaitCompleteEv>
        }
    }
    148c:	f800283a 	ret

00001490 <_ZN4Adc220StartConversionAsyncEi>:
    // 最初の変換を開始する
    StartConversionAsync(0);
}

void Adc2::StartConversionAsync(int sequence) {
    if ((uint32_t)NUMBER_OF_SEQUENCE <= (uint32_t)sequence) {
    1490:	208000b0 	cmpltui	r2,r4,2
    1494:	1000011e 	bne	r2,zero,149c <_ZN4Adc220StartConversionAsyncEi+0xc>
        sequence = 0;
    1498:	0009883a 	mov	r4,zero
    }
    _State = STATE_WriteConfig;
    149c:	d0201c15 	stw	zero,-32656(gp)
    _Sequence = sequence;
    14a0:	d1201b15 	stw	r4,-32660(gp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->TXDATA, data);
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0042);
}

static inline void I2CM_WriteRegister2Byte(uint32_t base, int address, int data) {
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    14a4:	00c00044 	movi	r3,1
    14a8:	00b90214 	movui	r2,58376
    if (sequence == 0) {
    14ac:	2000081e 	bne	r4,zero,14d0 <_ZN4Adc220StartConversionAsyncEi+0x40>
    14b0:	10c0002d 	sthio	r3,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->TXDATA, data);
    14b4:	00c0ecc4 	movi	r3,947
    14b8:	00b90294 	movui	r2,58378
    14bc:	10c0002d 	sthio	r3,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0142);
    14c0:	00c05084 	movi	r3,322
    14c4:	00b90014 	movui	r2,58368
    14c8:	10c0002d 	sthio	r3,0(r2)
    }
    else {
        // ドリブルモーターの電流測定
        ConvertAsync(MUX_AIN1_to_AIN0, FSR_256mV);
    }
}
    14cc:	f800283a 	ret
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    14d0:	10c0002d 	sthio	r3,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->TXDATA, data);
    14d4:	00c0e2c4 	movi	r3,907
    14d8:	003ff706 	br	14b8 <_ZN4Adc220StartConversionAsyncEi+0x28>

000014dc <_ZN4Adc25StartEv>:
void Adc2::Start(void) {
    14dc:	defffe04 	addi	sp,sp,-8
    14e0:	dfc00115 	stw	ra,4(sp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->INTFLAG, 0);
    14e4:	00b90114 	movui	r2,58372
    14e8:	1000002d 	sthio	zero,0(r2)
    alt_ic_isr_register(I2C_IC_ID, I2C_IRQ, Handler, nullptr, nullptr);
    14ec:	01800034 	movhi	r6,0
    14f0:	d8000015 	stw	zero,0(sp)
    14f4:	000f883a 	mov	r7,zero
    14f8:	31854604 	addi	r6,r6,5400
    14fc:	01400144 	movi	r5,5
    1500:	0009883a 	mov	r4,zero
    1504:	00057240 	call	5724 <alt_ic_isr_register>
    StartConversionAsync(0);
    1508:	0009883a 	mov	r4,zero
}
    150c:	dfc00117 	ldw	ra,4(sp)
    1510:	dec00204 	addi	sp,sp,8
    StartConversionAsync(0);
    1514:	00014901 	jmpi	1490 <_ZN4Adc220StartConversionAsyncEi>

00001518 <_ZN4Adc27HandlerEPv>:
    I2CM_WriteRegister2Byte(I2C_BASE, address, txdata);
    AwaitComplete();
    return I2CM_IsAcked(I2C_BASE);
}

void Adc2::Handler(void *context) {
    1518:	deffff04 	addi	sp,sp,-4
    151c:	dfc00015 	stw	ra,0(sp)
    1520:	00b90114 	movui	r2,58372
    1524:	1000002d 	sthio	zero,0(r2)
    int intflag = __builtin_ldhuio(&((I2CMasterRegisters*)base)->STATUS);
    1528:	00b90094 	movui	r2,58370
    152c:	1080002b 	ldhuio	r2,0(r2)
    return (intflag & 0x2) ? true : false;
    1530:	1004d07a 	srli	r2,r2,1
    I2CM_ClearComplete(I2C_BASE);
    if (I2CM_IsAcked(I2C_BASE) == false) {
    1534:	1080004c 	andi	r2,r2,1
    1538:	10000b1e 	bne	r2,zero,1568 <_ZN4Adc27HandlerEPv+0x50>
    error:
    for (uint32_t i = 0; i < NUMBER_OF_SEQUENCE; i++) {
        _Result[i] = 0;
    }
    _Valid = false;
    _State = STATE_BusReset;
    153c:	008000c4 	movi	r2,3
        _Result[i] = 0;
    1540:	d0201915 	stw	zero,-32668(gp)
    1544:	d0201a15 	stw	zero,-32664(gp)
    _Valid = false;
    1548:	d0201805 	stb	zero,-32672(gp)
    _State = STATE_BusReset;
    154c:	d0a01c15 	stw	r2,-32656(gp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0001);
    1550:	00c00044 	movi	r3,1
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0046);
}

static inline void I2CM_ReadRegister2Byte(uint32_t base, int address) {
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0146);
    1554:	00b90014 	movui	r2,58368
    1558:	10c0002d 	sthio	r3,0(r2)
    StartBusResetAsync();
}
    155c:	dfc00017 	ldw	ra,0(sp)
    1560:	dec00104 	addi	sp,sp,4
    1564:	f800283a 	ret
    switch (_State) {
    1568:	d0a01c17 	ldw	r2,-32656(gp)
    156c:	10c000a0 	cmpeqi	r3,r2,2
    1570:	18001e1e 	bne	r3,zero,15ec <_ZN4Adc27HandlerEPv+0xd4>
    1574:	10c000e8 	cmpgeui	r3,r2,3
    1578:	1800071e 	bne	r3,zero,1598 <_ZN4Adc27HandlerEPv+0x80>
    157c:	10000b1e 	bne	r2,zero,15ac <_ZN4Adc27HandlerEPv+0x94>
        _State = STATE_PollConfig;
    1580:	00800044 	movi	r2,1
    1584:	d0a01c15 	stw	r2,-32656(gp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    1588:	00c00044 	movi	r3,1
    158c:	00b90214 	movui	r2,58376
    1590:	10c0002d 	sthio	r3,0(r2)
    1594:	00001306 	br	15e4 <_ZN4Adc27HandlerEPv+0xcc>
    switch (_State) {
    1598:	108000e0 	cmpeqi	r2,r2,3
    159c:	103fe726 	beq	r2,zero,153c <_ZN4Adc27HandlerEPv+0x24>
        StartConversionAsync(0);
    15a0:	0009883a 	mov	r4,zero
    15a4:	00014900 	call	1490 <_ZN4Adc220StartConversionAsyncEi>
    15a8:	003fe406 	br	153c <_ZN4Adc27HandlerEPv+0x24>
static inline int I2CM_GetReadResult1Byte(uint32_t base) {
    return __builtin_ldbuio(&((I2CMasterRegisters*)base)->RXDATA);
}

static inline int I2CM_GetReadResult2Byte(uint32_t base) {
    return __builtin_ldhuio(&((I2CMasterRegisters*)base)->RXDATA);
    15ac:	00b90314 	movui	r2,58380
    15b0:	1080002b 	ldhuio	r2,0(r2)
        if (config & 0x8000) {
    15b4:	1006923a 	slli	r3,r2,8
    15b8:	10bfffcc 	andi	r2,r2,65535
    15bc:	1004d23a 	srli	r2,r2,8
    15c0:	1884b03a 	or	r2,r3,r2
    15c4:	10bfffcc 	andi	r2,r2,65535
    15c8:	10a0001c 	xori	r2,r2,32768
    15cc:	10a00004 	addi	r2,r2,-32768
    15d0:	103fed0e 	bge	r2,zero,1588 <_ZN4Adc27HandlerEPv+0x70>
            _State = STATE_ReadResult;
    15d4:	00800084 	movi	r2,2
    15d8:	d0a01c15 	stw	r2,-32656(gp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    15dc:	00b90214 	movui	r2,58376
    15e0:	1000002d 	sthio	zero,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0146);
    15e4:	00c05184 	movi	r3,326
    15e8:	003fda06 	br	1554 <_ZN4Adc27HandlerEPv+0x3c>
    return __builtin_ldhuio(&((I2CMasterRegisters*)base)->RXDATA);
    15ec:	00b90314 	movui	r2,58380
    15f0:	10c0002b 	ldhuio	r3,0(r2)
        int16_t result = (rxdata << 8) | (rxdata >> 8);
    15f4:	1804923a 	slli	r2,r3,8
    15f8:	18ffffcc 	andi	r3,r3,65535
    15fc:	1806d23a 	srli	r3,r3,8
    1600:	10c4b03a 	or	r2,r2,r3
        if (_Sequence == 0) {
    1604:	10bfffcc 	andi	r2,r2,65535
    1608:	d0e01b17 	ldw	r3,-32660(gp)
    160c:	10a0001c 	xori	r2,r2,32768
    1610:	10a00004 	addi	r2,r2,-32768
            float value = static_cast<int>(result) * (1.0f / 32768.0f * 4.096f * 21.0f); // 分解能 42mV;
    1614:	1005feb2 	custom	250,r2,r2,zero
        if (_Sequence == 0) {
    1618:	1800101e 	bne	r3,zero,165c <_ZN4Adc27HandlerEPv+0x144>
            float value = static_cast<int>(result) * (1.0f / 32768.0f * 4.096f * 21.0f); // 分解能 42mV;
    161c:	00cecb34 	movhi	r3,15148
    1620:	18c20c84 	addi	r3,r3,2098
    1624:	10c5ff32 	custom	252,r2,r2,r3
            _Result[0] = fmaxf(0.0f, fminf(value, 65.535f));
    1628:	00d0a0f4 	movhi	r3,17027
    162c:	18c47b04 	addi	r3,r3,4588
    1630:	10c5fa72 	custom	233,r2,r2,r3
    1634:	0007883a 	mov	r3,zero
    1638:	1885fa32 	custom	232,r2,r3,r2
    163c:	d0a01915 	stw	r2,-32668(gp)
        StartConversionAsync(_Sequence + 1);
    1640:	d1201b17 	ldw	r4,-32660(gp)
        _Valid = true;
    1644:	00800044 	movi	r2,1
    1648:	d0a01805 	stb	r2,-32672(gp)
        StartConversionAsync(_Sequence + 1);
    164c:	21000044 	addi	r4,r4,1
}
    1650:	dfc00017 	ldw	ra,0(sp)
    1654:	dec00104 	addi	sp,sp,4
        StartConversionAsync(_Sequence + 1);
    1658:	00014901 	jmpi	1490 <_ZN4Adc220StartConversionAsyncEi>
            float value = static_cast<int>(result) * (1.0f / 32768.0f * 0.256f / 0.01f); // 分解能 12.5mA
    165c:	00ce9374 	movhi	r3,14925
    1660:	18f33384 	addi	r3,r3,-13106
    1664:	10c5ff32 	custom	252,r2,r2,r3
            _Result[1] = fmaxf(0.0f, fminf(value, 65.535f));
    1668:	00d0a0f4 	movhi	r3,17027
    166c:	18c47b04 	addi	r3,r3,4588
    1670:	10c5fa72 	custom	233,r2,r2,r3
    1674:	0007883a 	mov	r3,zero
    1678:	1885fa32 	custom	232,r2,r3,r2
    167c:	d0a01a15 	stw	r2,-32664(gp)
            CentralizedMonitor::Adc2Callback();
    1680:	0000b300 	call	b30 <_ZN18CentralizedMonitor12Adc2CallbackEv>
    1684:	003fee06 	br	1640 <_ZN4Adc27HandlerEPv+0x128>

00001688 <_ZN4Adc212ReadRegisterEiPt>:
bool Adc2::ReadRegister(int address, uint16_t *value) {
    1688:	defffe04 	addi	sp,sp,-8
    168c:	dc000015 	stw	r16,0(sp)
    1690:	dfc00115 	stw	ra,4(sp)
    1694:	2821883a 	mov	r16,r5
    __builtin_sthio(&((I2CMasterRegisters*)base)->IADDR, address);
    1698:	00b90214 	movui	r2,58376
    169c:	1100002d 	sthio	r4,0(r2)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0146);
    16a0:	00c05184 	movi	r3,326
    16a4:	00b90014 	movui	r2,58368
    16a8:	10c0002d 	sthio	r3,0(r2)
    AwaitComplete();
    16ac:	000147c0 	call	147c <_ZN4Adc213AwaitCompleteEv>
    int intflag = __builtin_ldhuio(&((I2CMasterRegisters*)base)->STATUS);
    16b0:	00b90094 	movui	r2,58370
    16b4:	10c0002b 	ldhuio	r3,0(r2)
    return (intflag & 0x2) ? true : false;
    16b8:	1806d07a 	srli	r3,r3,1
    16bc:	1880004c 	andi	r2,r3,1
    if (I2CM_IsAcked(I2C_BASE)) {
    16c0:	10000726 	beq	r2,zero,16e0 <_ZN4Adc212ReadRegisterEiPt+0x58>
    return __builtin_ldhuio(&((I2CMasterRegisters*)base)->RXDATA);
    16c4:	00f90314 	movui	r3,58380
    16c8:	18c0002b 	ldhuio	r3,0(r3)
        *value = (rxdata << 8) | (rxdata >> 8);
    16cc:	1808923a 	slli	r4,r3,8
    16d0:	18ffffcc 	andi	r3,r3,65535
    16d4:	1806d23a 	srli	r3,r3,8
    16d8:	20c6b03a 	or	r3,r4,r3
    16dc:	80c0000d 	sth	r3,0(r16)
}
    16e0:	dfc00117 	ldw	ra,4(sp)
    16e4:	dc000017 	ldw	r16,0(sp)
    16e8:	dec00204 	addi	sp,sp,8
    16ec:	f800283a 	ret

000016f0 <_ZN4Adc210InitializeEv>:
bool Adc2::Initialize(void) {
    16f0:	defffe04 	addi	sp,sp,-8
    16f4:	dfc00115 	stw	ra,4(sp)
    __builtin_sthio(&((I2CMasterRegisters*)base)->CONTROL, 0x0001);
    16f8:	00c00044 	movi	r3,1
    16fc:	00b90014 	movui	r2,58368
    1700:	10c0002d 	sthio	r3,0(r2)
    AwaitComplete();
    1704:	000147c0 	call	147c <_ZN4Adc213AwaitCompleteEv>
    __builtin_sthio(&((I2CMasterRegisters*)base)->DADDR, address);
    1708:	00c01204 	movi	r3,72
    170c:	00b90194 	movui	r2,58374
    1710:	10c0002d 	sthio	r3,0(r2)
    if (ReadRegister(ADS1015_CONFIGURATION, &config) == false) {
    1714:	d9400084 	addi	r5,sp,2
    1718:	01000044 	movi	r4,1
    171c:	00016880 	call	1688 <_ZN4Adc212ReadRegisterEiPt>
}
    1720:	dfc00117 	ldw	ra,4(sp)
    1724:	dec00204 	addi	sp,sp,8
    1728:	f800283a 	ret

0000172c <_ZN3Imu8ReadDataEP11ImuResult_t>:
static inline void IMU_SPIM_SetPassthrough(uint32_t base, bool enabled) {
    __builtin_sthio(&((ImuSpiMasterRegisters*)base)->CONTROL, enabled ? 0x0001 : 0x0000);
}

static inline int IMU_SPIM_GetTempData(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->TEMP_DATA);
    172c:	00b98094 	movui	r2,58882
    1730:	1080002f 	ldhio	r2,0(r2)

    return true;
}

void Imu::ReadData(ImuResult_t *data) {
    data->TempData = IMU_SPIM_GetTempData(IMU_SPIM_BASE);
    1734:	2080000d 	sth	r2,0(r4)
}

static inline int IMU_SPIM_GetAccelDataX(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_X);
    1738:	00b98114 	movui	r2,58884
    173c:	1080002f 	ldhio	r2,0(r2)
    data->AccelDataX = IMU_SPIM_GetAccelDataX(IMU_SPIM_BASE);
    1740:	2080008d 	sth	r2,2(r4)
}

static inline int IMU_SPIM_GetAccelDataY(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_Y);
    1744:	00b98194 	movui	r2,58886
    1748:	1080002f 	ldhio	r2,0(r2)
    data->AccelDataY = IMU_SPIM_GetAccelDataY(IMU_SPIM_BASE);
    174c:	2080010d 	sth	r2,4(r4)
}

static inline int IMU_SPIM_GetAccelDataZ(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->ACCEL_DATA_Z);
    1750:	00b98214 	movui	r2,58888
    1754:	1080002f 	ldhio	r2,0(r2)
    data->AccelDataZ = IMU_SPIM_GetAccelDataZ(IMU_SPIM_BASE);
    1758:	2080018d 	sth	r2,6(r4)
}

static inline int IMU_SPIM_GetGyroDataX(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_X);
    175c:	00b98294 	movui	r2,58890
    1760:	1080002f 	ldhio	r2,0(r2)
    data->GyroDataX = IMU_SPIM_GetGyroDataX(IMU_SPIM_BASE);
    1764:	2080020d 	sth	r2,8(r4)
}

static inline int IMU_SPIM_GetGyroDataY(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_Y);
    1768:	00b98314 	movui	r2,58892
    176c:	1080002f 	ldhio	r2,0(r2)
    data->GyroDataY = IMU_SPIM_GetGyroDataY(IMU_SPIM_BASE);
    1770:	2080028d 	sth	r2,10(r4)
}

static inline int IMU_SPIM_GetGyroDataZ(uint32_t base) {
    return __builtin_ldhio(&((ImuSpiMasterRegisters*)base)->GYRO_DATA_Z);
    1774:	00b98394 	movui	r2,58894
    1778:	1080002f 	ldhio	r2,0(r2)
    data->GyroDataZ = IMU_SPIM_GetGyroDataZ(IMU_SPIM_BASE);
    177c:	2080030d 	sth	r2,12(r4)
    //ReadRegisters(ICM42688_BANK0_TEMP_DATA1, sizeof(ImuResult_t), data);
}
    1780:	f800283a 	ret

00001784 <_ZN3Imu7SetBankEm>:

void Imu::SetBank(uint32_t bank) {
    if (bank != _Bank) {
    1784:	d0a01d43 	ldbu	r2,-32651(gp)
    1788:	11001126 	beq	r2,r4,17d0 <_ZN3Imu7SetBankEm+0x4c>
void Imu::SetBank(uint32_t bank) {
    178c:	defffb04 	addi	sp,sp,-20
        _Bank = bank;
        uint8_t buffer[2];
        buffer[0] = ICM42688_REG_BANK_SEL;
        buffer[1] = bank;
    1790:	d90003c5 	stb	r4,15(sp)
        _Bank = bank;
    1794:	d1201d45 	stb	r4,-32651(gp)
        buffer[0] = ICM42688_REG_BANK_SEL;
    1798:	00801d84 	movi	r2,118
        alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    179c:	d8000215 	stw	zero,8(sp)
    17a0:	d8000115 	stw	zero,4(sp)
    17a4:	d8000015 	stw	zero,0(sp)
    17a8:	d9c00384 	addi	r7,sp,14
    17ac:	01800084 	movi	r6,2
    17b0:	000b883a 	mov	r5,zero
    17b4:	01394014 	movui	r4,58624
void Imu::SetBank(uint32_t bank) {
    17b8:	dfc00415 	stw	ra,16(sp)
        buffer[0] = ICM42688_REG_BANK_SEL;
    17bc:	d8800385 	stb	r2,14(sp)
        alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    17c0:	00053040 	call	5304 <alt_avalon_spi_command>
    }
}
    17c4:	dfc00417 	ldw	ra,16(sp)
    17c8:	dec00504 	addi	sp,sp,20
    17cc:	f800283a 	ret
    17d0:	f800283a 	ret

000017d4 <_ZN3Imu12ReadRegisterEm>:

uint8_t Imu::ReadRegister(uint32_t address) {
    17d4:	defffa04 	addi	sp,sp,-24
    17d8:	dc000415 	stw	r16,16(sp)
    17dc:	2021883a 	mov	r16,r4
    SetBank((address >> 8) & 0x7);
    17e0:	2008d23a 	srli	r4,r4,8
uint8_t Imu::ReadRegister(uint32_t address) {
    17e4:	dfc00515 	stw	ra,20(sp)
    SetBank((address >> 8) & 0x7);
    17e8:	210001cc 	andi	r4,r4,7
    17ec:	00017840 	call	1784 <_ZN3Imu7SetBankEm>
    uint8_t buffer[1];
    buffer[0] = 0x80 | (address & 0x7F);
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    17f0:	d9c003c4 	addi	r7,sp,15
    buffer[0] = 0x80 | (address & 0x7F);
    17f4:	013fe004 	movi	r4,-128
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    17f8:	00800044 	movi	r2,1
    buffer[0] = 0x80 | (address & 0x7F);
    17fc:	8120b03a 	or	r16,r16,r4
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    1800:	d8000215 	stw	zero,8(sp)
    1804:	d9c00115 	stw	r7,4(sp)
    1808:	d8800015 	stw	r2,0(sp)
    180c:	01800044 	movi	r6,1
    1810:	000b883a 	mov	r5,zero
    1814:	01394014 	movui	r4,58624
    buffer[0] = 0x80 | (address & 0x7F);
    1818:	dc0003c5 	stb	r16,15(sp)
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    181c:	00053040 	call	5304 <alt_avalon_spi_command>
    return buffer[0];
}
    1820:	d88003c3 	ldbu	r2,15(sp)
    1824:	dfc00517 	ldw	ra,20(sp)
    1828:	dc000417 	ldw	r16,16(sp)
    182c:	dec00604 	addi	sp,sp,24
    1830:	f800283a 	ret

00001834 <_ZN3Imu13WriteRegisterEmh>:

void Imu::WriteRegister(uint32_t address, uint8_t value) {
    1834:	defff904 	addi	sp,sp,-28
    1838:	dc000415 	stw	r16,16(sp)
    183c:	2021883a 	mov	r16,r4
    SetBank((address >> 8) & 0x7);
    1840:	2008d23a 	srli	r4,r4,8
void Imu::WriteRegister(uint32_t address, uint8_t value) {
    1844:	dfc00615 	stw	ra,24(sp)
    1848:	dc400515 	stw	r17,20(sp)
    SetBank((address >> 8) & 0x7);
    184c:	210001cc 	andi	r4,r4,7
void Imu::WriteRegister(uint32_t address, uint8_t value) {
    1850:	2823883a 	mov	r17,r5
    SetBank((address >> 8) & 0x7);
    1854:	00017840 	call	1784 <_ZN3Imu7SetBankEm>
    uint8_t buffer[2];
    buffer[0] = address & 0x7F;
    1858:	84001fcc 	andi	r16,r16,127
    buffer[1] = value;
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    185c:	d8000215 	stw	zero,8(sp)
    1860:	d8000115 	stw	zero,4(sp)
    1864:	d8000015 	stw	zero,0(sp)
    1868:	d9c00384 	addi	r7,sp,14
    186c:	01800084 	movi	r6,2
    1870:	000b883a 	mov	r5,zero
    1874:	01394014 	movui	r4,58624
    buffer[0] = address & 0x7F;
    1878:	dc000385 	stb	r16,14(sp)
    buffer[1] = value;
    187c:	dc4003c5 	stb	r17,15(sp)
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    1880:	00053040 	call	5304 <alt_avalon_spi_command>
}
    1884:	dfc00617 	ldw	ra,24(sp)
    1888:	dc400517 	ldw	r17,20(sp)
    188c:	dc000417 	ldw	r16,16(sp)
    1890:	dec00704 	addi	sp,sp,28
    1894:	f800283a 	ret

00001898 <_ZN3Imu10InitializeEv>:
bool Imu::Initialize(void) {
    1898:	defffe04 	addi	sp,sp,-8
    189c:	dc000015 	stw	r16,0(sp)
    18a0:	dfc00115 	stw	ra,4(sp)
    __builtin_sthio(&((ImuSpiMasterRegisters*)base)->CONTROL, enabled ? 0x0001 : 0x0000);
    18a4:	04000044 	movi	r16,1
    18a8:	00b98014 	movui	r2,58880
    18ac:	1400002d 	sthio	r16,0(r2)
    _Bank = -1;
    18b0:	00bfffc4 	movi	r2,-1
    WriteRegister(ICM42688_BANK0_DEVICE_CONFIG, 0x01);
    18b4:	01400044 	movi	r5,1
    18b8:	01000444 	movi	r4,17
    _Bank = -1;
    18bc:	d0a01d45 	stb	r2,-32651(gp)
    WriteRegister(ICM42688_BANK0_DEVICE_CONFIG, 0x01);
    18c0:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    usleep(1000);
    18c4:	0100fa04 	movi	r4,1000
    18c8:	00051ac0 	call	51ac <usleep>
    if (ReadRegister(ICM42688_BANK0_WHO_AM_I) != 0x47) {
    18cc:	01001d44 	movi	r4,117
    18d0:	00017d40 	call	17d4 <_ZN3Imu12ReadRegisterEm>
    18d4:	10803fcc 	andi	r2,r2,255
    18d8:	108011d8 	cmpnei	r2,r2,71
    18dc:	1000221e 	bne	r2,zero,1968 <_ZN3Imu10InitializeEv+0xd0>
    WriteRegister(ICM42688_BANK1_INTF_CONFIG5, 0x04);  // PIN9_FUNCTION <= CLKIN
    18e0:	01400104 	movi	r5,4
    18e4:	01005ec4 	movi	r4,379
    18e8:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INTF_CONFIG0, 0x13);  // SENSOR_DATA_ENDIAN <= Big Endian, UI_SIFS_CFG <= Disable I2C
    18ec:	014004c4 	movi	r5,19
    18f0:	01001304 	movi	r4,76
    18f4:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INTF_CONFIG1, 0x95);  // RTC_MODE <= RTC clock input is required
    18f8:	01402544 	movi	r5,149
    18fc:	01001344 	movi	r4,77
    1900:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_PWR_MGMT0, 0x0F);     // GYRO_MODE <= LN Mode, ACCEL_MODE <= LN Mode
    1904:	014003c4 	movi	r5,15
    1908:	01001384 	movi	r4,78
    190c:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    usleep(200);
    1910:	01003204 	movi	r4,200
    1914:	00051ac0 	call	51ac <usleep>
    WriteRegister(ICM42688_BANK0_GYRO_CONFIG1, 0xF6);  // TEMP_FILT_BW <= (DLPF BW = 5Hz; DLPF Latency = 32ms)
    1918:	01403d84 	movi	r5,246
    191c:	01001444 	movi	r4,81
    1920:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INT_CONFIG, 0x02);   // INT1_MODE <= Pulsed mode, INT1_DRIVE_CIRCUIT <= Push pull, INT1_POLARITY <= Active low
    1924:	01400084 	movi	r5,2
    1928:	01000504 	movi	r4,20
    192c:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INT_CONFIG1, 0x00);  // INT_ASYNC_RESET <= 0
    1930:	000b883a 	mov	r5,zero
    1934:	01001904 	movi	r4,100
    1938:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    WriteRegister(ICM42688_BANK0_INT_SOURCE0, 0x08);  // UI_DRDY_INT1_EN <= UI data ready interrupt routed to INT1
    193c:	01400204 	movi	r5,8
    1940:	01001944 	movi	r4,101
    1944:	00018340 	call	1834 <_ZN3Imu13WriteRegisterEmh>
    1948:	00b98014 	movui	r2,58880
    194c:	1000002d 	sthio	zero,0(r2)
    _Valid = true;
    1950:	d4201d05 	stb	r16,-32652(gp)
    return true;
    1954:	00800044 	movi	r2,1
}
    1958:	dfc00117 	ldw	ra,4(sp)
    195c:	dc000017 	ldw	r16,0(sp)
    1960:	dec00204 	addi	sp,sp,8
    1964:	f800283a 	ret
        return false;
    1968:	0005883a 	mov	r2,zero
    196c:	003ffa06 	br	1958 <_ZN3Imu10InitializeEv+0xc0>

00001970 <_ZZ4mainENUlcE_4_FUNEc>:
    char buf[64];
    MICROSHELL ms;
    MSCMD mscmd;
    microshell_init(
        &ms,
        [](char c) {alt_putchar(c);},
    1970:	21003fcc 	andi	r4,r4,255
    1974:	2100201c 	xori	r4,r4,128
    1978:	213fe004 	addi	r4,r4,-128
    197c:	00050c01 	jmpi	50c0 <alt_putchar>

00001980 <_ZZ4mainENUlvE0_4_FUNEv>:
        [](void) -> char {return alt_getchar();},
    1980:	deffff04 	addi	sp,sp,-4
    1984:	dfc00015 	stw	ra,0(sp)
    1988:	0004ec80 	call	4ec8 <alt_getchar>
    198c:	dfc00017 	ldw	ra,0(sp)
    1990:	dec00104 	addi	sp,sp,4
    1994:	f800283a 	ret

00001998 <_ZL13command_faultP5MSOPTPv>:
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x1);
    1998:	00800044 	movi	r2,1
    199c:	00fc0114 	movui	r3,61444
    19a0:	1880002d 	sthio	r2,0(r3)
        __builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x1);
    19a4:	00fc4114 	movui	r3,61700
    19a8:	1880002d 	sthio	r2,0(r3)
}
    19ac:	0005883a 	mov	r2,zero
    19b0:	f800283a 	ret

000019b4 <_ZL13command_clearP5MSOPTPv>:
        __builtin_stwio(&_SharedMemory.ErrorFlags, new_error_flags);
    19b4:	00ffffc4 	movi	r3,-1
    19b8:	00800074 	movhi	r2,1
    19bc:	10ec0035 	stwio	r3,-20480(r2)
}
    19c0:	0005883a 	mov	r2,zero
    19c4:	f800283a 	ret

000019c8 <_ZL12command_adc2P5MSOPTPv>:
    printf("P48V=%dmV Idribble=%dmA\n", p48v, dribble);
    19c8:	d0a01a17 	ldw	r2,-32664(gp)
    19cc:	01000034 	movhi	r4,0
static MSCMD_USER_RESULT command_adc2(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    19d0:	deffff04 	addi	sp,sp,-4
    printf("P48V=%dmV Idribble=%dmA\n", p48v, dribble);
    19d4:	100dfe72 	custom	249,r6,r2,zero
    19d8:	d0a01917 	ldw	r2,-32668(gp)
    19dc:	2116a004 	addi	r4,r4,23168
static MSCMD_USER_RESULT command_adc2(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    19e0:	dfc00015 	stw	ra,0(sp)
    printf("P48V=%dmV Idribble=%dmA\n", p48v, dribble);
    19e4:	100bfe72 	custom	249,r5,r2,zero
    19e8:	00044a80 	call	44a8 <printf>
}
    19ec:	0005883a 	mov	r2,zero
    19f0:	dfc00017 	ldw	ra,0(sp)
    19f4:	dec00104 	addi	sp,sp,4
    19f8:	f800283a 	ret

000019fc <_ZL14command_statusP5MSOPTPv>:
static MSCMD_USER_RESULT command_status(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    19fc:	deffff04 	addi	sp,sp,-4
    printf("PIO1=%08X\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE));
    1a00:	00b84014 	movui	r2,57600
static MSCMD_USER_RESULT command_status(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1a04:	dfc00015 	stw	ra,0(sp)
    printf("PIO1=%08X\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE));
    1a08:	11400037 	ldwio	r5,0(r2)
    1a0c:	01000034 	movhi	r4,0
    1a10:	2116a704 	addi	r4,r4,23196
    1a14:	00044a80 	call	44a8 <printf>
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    1a18:	00bc4014 	movui	r2,61696
    1a1c:	1140002b 	ldhuio	r5,0(r2)
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
    1a20:	00bc4094 	movui	r2,61698
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    1a24:	297fffcc 	andi	r5,r5,65535
        return MotorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
    1a28:	1180002b 	ldhuio	r6,0(r2)
    printf("Mc5Status=%04X (%04X)\n", MotorController::GetStatus().Status, MotorController::GetInterruptFlag().Status);
    1a2c:	01000034 	movhi	r4,0
    1a30:	31bfffcc 	andi	r6,r6,65535
    1a34:	2116aa04 	addi	r4,r4,23208
    1a38:	00044a80 	call	44a8 <printf>
        return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    1a3c:	00bc0014 	movui	r2,61440
    1a40:	1140002b 	ldhuio	r5,0(r2)
		return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
    1a44:	00bc0094 	movui	r2,61442
        return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->STATUS));
    1a48:	297fffcc 	andi	r5,r5,65535
		return VectorControllerStatus(__builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->INTFLAG));
    1a4c:	1180002b 	ldhuio	r6,0(r2)
    printf("VecStatus=%04X (%04X)\n", VectorController::GetStatus().Status, VectorController::GetInterruptFlag().Status);
    1a50:	01000034 	movhi	r4,0
    1a54:	31bfffcc 	andi	r6,r6,65535
    1a58:	2116b004 	addi	r4,r4,23232
    1a5c:	00044a80 	call	44a8 <printf>
        return _ErrorFlags;
    1a60:	d1601417 	ldw	r5,-32688(gp)
        return _FaultFlags;
    1a64:	d1a01317 	ldw	r6,-32692(gp)
    printf("Error=%08X, Fault=%08X\n", (int)CentralizedMonitor::GetErrorFlags(), (int)CentralizedMonitor::GetFaultFlags());
    1a68:	01000034 	movhi	r4,0
    1a6c:	2116b604 	addi	r4,r4,23256
    1a70:	00044a80 	call	44a8 <printf>
}
    1a74:	0005883a 	mov	r2,zero
    1a78:	dfc00017 	ldw	ra,0(sp)
    1a7c:	dec00104 	addi	sp,sp,4
    1a80:	f800283a 	ret

00001a84 <_ZL11command_imuP5MSOPTPv>:
static MSCMD_USER_RESULT command_imu(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1a84:	defff804 	addi	sp,sp,-32
    Imu::ReadData(&result);
    1a88:	d9000384 	addi	r4,sp,14
static MSCMD_USER_RESULT command_imu(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1a8c:	dfc00715 	stw	ra,28(sp)
    Imu::ReadData(&result);
    1a90:	000172c0 	call	172c <_ZN3Imu8ReadDataEP11ImuResult_t>
    printf("Accel(%d, %d, %d) Gyro(%d, %d, %d)\n", result.AccelDataX, result.AccelDataY, result.AccelDataZ, result.GyroDataX, result.GyroDataY, result.GyroDataZ);
    1a94:	d880068f 	ldh	r2,26(sp)
    1a98:	d9c0050f 	ldh	r7,20(sp)
    1a9c:	d980048f 	ldh	r6,18(sp)
    1aa0:	d8800215 	stw	r2,8(sp)
    1aa4:	d880060f 	ldh	r2,24(sp)
    1aa8:	d940040f 	ldh	r5,16(sp)
    1aac:	01000034 	movhi	r4,0
    1ab0:	d8800115 	stw	r2,4(sp)
    1ab4:	d880058f 	ldh	r2,22(sp)
    1ab8:	2116bc04 	addi	r4,r4,23280
    1abc:	d8800015 	stw	r2,0(sp)
    1ac0:	00044a80 	call	44a8 <printf>
}
    1ac4:	0005883a 	mov	r2,zero
    1ac8:	dfc00717 	ldw	ra,28(sp)
    1acc:	dec00804 	addi	sp,sp,32
    1ad0:	f800283a 	ret

00001ad4 <_ZL14command_switchP5MSOPTPv>:
static MSCMD_USER_RESULT command_switch(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1ad4:	defff504 	addi	sp,sp,-44
    msopt_get_argc(msopt, &argc);
    1ad8:	d80b883a 	mov	r5,sp
static MSCMD_USER_RESULT command_switch(MSOPT *msopt, MSCMD_USER_OBJECT usrobj) {
    1adc:	dc000915 	stw	r16,36(sp)
    1ae0:	dfc00a15 	stw	ra,40(sp)
    1ae4:	2021883a 	mov	r16,r4
    msopt_get_argc(msopt, &argc);
    1ae8:	00008e40 	call	8e4 <msopt_get_argc>
    if (argc == 2) {
    1aec:	d8800017 	ldw	r2,0(sp)
    1af0:	10800098 	cmpnei	r2,r2,2
    1af4:	1000161e 	bne	r2,zero,1b50 <_ZL14command_switchP5MSOPTPv+0x7c>
        msopt_get_argv(msopt, 1, buf, sizeof(buf));
    1af8:	01400044 	movi	r5,1
    1afc:	01c00804 	movi	r7,32
    1b00:	d9800104 	addi	r6,sp,4
    1b04:	8009883a 	mov	r4,r16
    1b08:	000090c0 	call	90c <msopt_get_argv>
        bool enabled = buf[0] == '1';
    1b0c:	d9400107 	ldb	r5,4(sp)
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
    1b10:	00c00804 	movi	r3,32
    1b14:	29400c60 	cmpeqi	r5,r5,49
        if (enabled == false) {
    1b18:	2800121e 	bne	r5,zero,1b64 <_ZL14command_switchP5MSOPTPv+0x90>
            IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
    1b1c:	00b88514 	movui	r2,57876
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
    1b20:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor2SwitchEnable);
    1b24:	00c01004 	movi	r3,64
    1b28:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor3SwitchEnable);
    1b2c:	00c02004 	movi	r3,128
    1b30:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor4SwitchEnable);
    1b34:	00c04004 	movi	r3,256
    1b38:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor5SwitchEnable);
    1b3c:	00c08004 	movi	r3,512
    1b40:	10c00035 	stwio	r3,0(r2)
        printf("Switch<=%d\n", enabled);
    1b44:	01000034 	movhi	r4,0
    1b48:	2116c504 	addi	r4,r4,23316
    1b4c:	00044a80 	call	44a8 <printf>
}
    1b50:	0005883a 	mov	r2,zero
    1b54:	dfc00a17 	ldw	ra,40(sp)
    1b58:	dc000917 	ldw	r16,36(sp)
    1b5c:	dec00b04 	addi	sp,sp,44
    1b60:	f800283a 	ret
            IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_2_BASE, Pio2Motor1SwitchEnable);
    1b64:	00b88414 	movui	r2,57872
    1b68:	003fed06 	br	1b20 <_ZL14command_switchP5MSOPTPv+0x4c>

00001b6c <main>:
int main(void) {
    1b6c:	00800034 	movhi	r2,0
    1b70:	deffd604 	addi	sp,sp,-168
    1b74:	1089ed04 	addi	r2,r2,10164
    1b78:	d8800715 	stw	r2,28(sp)
    1b7c:	00800034 	movhi	r2,0
    1b80:	10966204 	addi	r2,r2,22920
    1b84:	d8800815 	stw	r2,32(sp)
    1b88:	00800034 	movhi	r2,0
    1b8c:	10871e04 	addi	r2,r2,7288
    1b90:	d9000104 	addi	r4,sp,4
    1b94:	dfc02915 	stw	ra,164(sp)
    1b98:	df002815 	stw	fp,160(sp)
    1b9c:	df000915 	stw	fp,36(sp)
    1ba0:	d8800a15 	stw	r2,40(sp)
    1ba4:	dec00b15 	stw	sp,44(sp)
    1ba8:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
  NIOS2_READ_STATUS (context);
    1bac:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1bb0:	00bfff84 	movi	r2,-2
    1bb4:	1884703a 	and	r2,r3,r2
    1bb8:	1001703a 	wrctl	status,r2
        _Context = alt_irq_disable_all();
    1bbc:	d8c01815 	stw	r3,96(sp)
        __builtin_sync();
    1bc0:	0001b03a 	sync
    Imu::Initialize();
    1bc4:	00800044 	movi	r2,1
    1bc8:	d8800215 	stw	r2,8(sp)
    1bcc:	00018980 	call	1898 <_ZN3Imu10InitializeEv>
    Adc2::Initialize();
    1bd0:	00016f00 	call	16f0 <_ZN4Adc210InitializeEv>
        ClearParameters();
    1bd4:	0001e940 	call	1e94 <_ZN12SharedMemory15ClearParametersEv>
public:
    /**
     * 初期化する
     */
    static void Initialize(void) {
        alt_msgdma_dev *dev = alt_msgdma_open(MSGDMA_0_CSR_NAME);
    1bd8:	01000034 	movhi	r4,0
    1bdc:	2116c804 	addi	r4,r4,23328
    1be0:	00054b40 	call	54b4 <alt_msgdma_open>
        _Device = dev;
    1be4:	d0a01e15 	stw	r2,-32648(gp)
    CentralizedMonitor::Initialize();
    1be8:	0000e500 	call	e50 <_ZN18CentralizedMonitor10InitializeEv>
public:
    /**
     * 初期化を行う
     */
    static void Initialize(void){
        StopControl();
    1bec:	000211c0 	call	211c <_ZN15WheelController11StopControlEv>
public:
    /**
     * 初期化を行う
     */
    static void Initialize(void){
        StopControl();
    1bf0:	00013d40 	call	13d4 <_ZN17DribbleController11StopControlEv>
    Adc2::Start();
    1bf4:	00014dc0 	call	14dc <_ZN4Adc25StartEv>
    CentralizedMonitor::Start();
    1bf8:	0000a540 	call	a54 <_ZN18CentralizedMonitor5StartEv>
        CriticalSection cs;
    1bfc:	d9001804 	addi	r4,sp,96
    1c00:	00009f80 	call	9f8 <_ZN15CriticalSectionD1Ev>
    microshell_init(
    1c04:	01800034 	movhi	r6,0
    1c08:	01400034 	movhi	r5,0
    1c0c:	00bfffc4 	movi	r2,-1
    1c10:	000f883a 	mov	r7,zero
    1c14:	31866004 	addi	r6,r6,6528
    1c18:	29465c04 	addi	r5,r5,6512
    1c1c:	d9001204 	addi	r4,sp,72
    1c20:	d8800215 	stw	r2,8(sp)
    1c24:	00002040 	call	204 <microshell_init>
        {"switch", command_switch},
        {"status", command_status},
        {"clear", command_clear},
        {"f", command_fault}
    };
    mscmd_init(&mscmd, const_cast<MSCMD_COMMAND_TABLE*>(command_table), sizeof(command_table) / sizeof(command_table[0]), nullptr);
    1c28:	01400034 	movhi	r5,0
    1c2c:	d9000f04 	addi	r4,sp,60
    1c30:	000f883a 	mov	r7,zero
    1c34:	01800184 	movi	r6,6
    1c38:	2956dc04 	addi	r5,r5,23408
    1c3c:	00006f00 	call	6f0 <mscmd_init>

    // 起動メッセージを表示する
    alt_putstr("Hello from Nios II!\n");
    1c40:	01000034 	movhi	r4,0
    1c44:	2116cd04 	addi	r4,r4,23348
    1c48:	000510c0 	call	510c <alt_putstr>

    // コマンド入力を受け付ける
    while (true) {
        microshell_getline(&ms, buf, sizeof(buf));
    1c4c:	d9401804 	addi	r5,sp,96
    1c50:	d9001204 	addi	r4,sp,72
    1c54:	00bfffc4 	movi	r2,-1
    1c58:	01801004 	movi	r6,64
    1c5c:	d8800215 	stw	r2,8(sp)
    1c60:	00002580 	call	258 <microshell_getline>
        MSCMD_USER_RESULT result;
        mscmd_execute(&mscmd, buf, &result);
    1c64:	d9800e04 	addi	r6,sp,56
    1c68:	d9401804 	addi	r5,sp,96
    1c6c:	d9000f04 	addi	r4,sp,60
    1c70:	00007040 	call	704 <mscmd_execute>
    while (true) {
    1c74:	003ff506 	br	1c4c <main+0xe0>
        CriticalSection cs;
    1c78:	d8800317 	ldw	r2,12(sp)
    1c7c:	d9001804 	addi	r4,sp,96
    1c80:	d8800015 	stw	r2,0(sp)
    1c84:	00009f80 	call	9f8 <_ZN15CriticalSectionD1Ev>
    1c88:	d9000017 	ldw	r4,0(sp)
    1c8c:	00bfffc4 	movi	r2,-1
    1c90:	d8800215 	stw	r2,8(sp)
    1c94:	00040440 	call	4044 <_Unwind_SjLj_Resume>

00001c98 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev>:
#include <altera_msgdma_descriptor_regs.h>
#include <altera_msgdma_csr_regs.h>
#include <altera_msgdma_response_regs.h>
#include <driver/critical_section.hpp>

bool MsgdmaTransmitDescriptor::TransmitAsync(alt_msgdma_dev *dev) const {
    1c98:	00800034 	movhi	r2,0
    1c9c:	deffee04 	addi	sp,sp,-72
    1ca0:	1089ed04 	addi	r2,r2,10164
    1ca4:	d8800815 	stw	r2,32(sp)
    1ca8:	00800034 	movhi	r2,0
    1cac:	d9000115 	stw	r4,4(sp)
    1cb0:	10877304 	addi	r2,r2,7628
    1cb4:	d9000204 	addi	r4,sp,8
    1cb8:	d8800b15 	stw	r2,44(sp)
    1cbc:	dfc01115 	stw	ra,68(sp)
    1cc0:	df001015 	stw	fp,64(sp)
    1cc4:	d9400015 	stw	r5,0(sp)
    1cc8:	d8000915 	stw	zero,36(sp)
    1ccc:	df000a15 	stw	fp,40(sp)
    1cd0:	dec00c15 	stw	sp,48(sp)
    1cd4:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
    // ディスクリプタFIFOに空きが無いがあることを確認する
    if (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK) {
    1cd8:	d8800017 	ldw	r2,0(sp)
    1cdc:	10800317 	ldw	r2,12(r2)
    1ce0:	10800037 	ldwio	r2,0(r2)
    1ce4:	1080010c 	andi	r2,r2,4
    1ce8:	10000d1e 	bne	r2,zero,1d20 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x88>
  NIOS2_READ_STATUS (context);
    1cec:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1cf0:	00bfff84 	movi	r2,-2
    1cf4:	1884703a 	and	r2,r3,r2
    1cf8:	1001703a 	wrctl	status,r2
        _Context = alt_irq_disable_all();
    1cfc:	d8c00f15 	stw	r3,60(sp)
        __builtin_sync();
    1d00:	0001b03a 	sync

    {
        CriticalSection cs;

        // ディスクリプタFIFOに空きが無いがあることを再び確認する
        if (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK) {
    1d04:	d8800017 	ldw	r2,0(sp)
    1d08:	10c00317 	ldw	r3,12(r2)
    1d0c:	18800037 	ldwio	r2,0(r3)
    1d10:	1080010c 	andi	r2,r2,4
    1d14:	10000426 	beq	r2,zero,1d28 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x90>
            return false;
    1d18:	d9000f04 	addi	r4,sp,60
    1d1c:	00009f80 	call	9f8 <_ZN15CriticalSectionD1Ev>
        return false;
    1d20:	d8000005 	stb	zero,0(sp)
    1d24:	00002906 	br	1dcc <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x134>
        }

        // ディスパッチャが次のディスクリプタを読み込むのを停止する
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    1d28:	00800804 	movi	r2,32
    1d2c:	18800135 	stwio	r2,4(r3)

        // IRQフラグをクリアする
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, ALTERA_MSGDMA_CSR_IRQ_SET_MASK);
    1d30:	d8800017 	ldw	r2,0(sp)
    1d34:	00c08004 	movi	r3,512
    1d38:	10800317 	ldw	r2,12(r2)
    1d3c:	10c00035 	stwio	r3,0(r2)

        // ディスクリプタFIFOに書き込む
        IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(dev->descriptor_base, reinterpret_cast<alt_u32>(_ReadAddress));
    1d40:	d8800017 	ldw	r2,0(sp)
    1d44:	d8c00117 	ldw	r3,4(sp)
    1d48:	10800417 	ldw	r2,16(r2)
    1d4c:	18c00017 	ldw	r3,0(r3)
    1d50:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(dev->descriptor_base, reinterpret_cast<alt_u32>(_WriteAddress));
    1d54:	d8800017 	ldw	r2,0(sp)
    1d58:	d8c00117 	ldw	r3,4(sp)
    1d5c:	10800417 	ldw	r2,16(r2)
    1d60:	18c00117 	ldw	r3,4(r3)
    1d64:	10c00135 	stwio	r3,4(r2)
        IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(dev->descriptor_base, _TransferLength);
    1d68:	d8800017 	ldw	r2,0(sp)
    1d6c:	d8c00117 	ldw	r3,4(sp)
    1d70:	10800417 	ldw	r2,16(r2)
    1d74:	18c00217 	ldw	r3,8(r3)
    1d78:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(dev->descriptor_base, _Control);
    1d7c:	d8800017 	ldw	r2,0(sp)
    1d80:	d8c00117 	ldw	r3,4(sp)
    1d84:	10800417 	ldw	r2,16(r2)
    1d88:	18c00317 	ldw	r3,12(r3)
    1d8c:	10c00335 	stwio	r3,12(r2)

        // CONTROLレジスタを再設定する
        alt_u32 control = dev->control;
        if (dev->callback == nullptr) {
    1d90:	d8800017 	ldw	r2,0(sp)
    1d94:	00fff7c4 	movi	r3,-33
    1d98:	10800d17 	ldw	r2,52(r2)
    1d9c:	10c4703a 	and	r2,r2,r3
    1da0:	d8c00017 	ldw	r3,0(sp)
    1da4:	18c00b17 	ldw	r3,44(r3)
    1da8:	18000f1e 	bne	r3,zero,1de8 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x150>
            control |= ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK;
            control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    1dac:	10800114 	ori	r2,r2,4
        }
        else{
            control |= ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK;
            control &= ~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
        }
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
    1db0:	d8c00017 	ldw	r3,0(sp)
    1db4:	18c00317 	ldw	r3,12(r3)
    1db8:	18800135 	stwio	r2,4(r3)
        CriticalSection cs;
    1dbc:	d9000f04 	addi	r4,sp,60
    1dc0:	00009f80 	call	9f8 <_ZN15CriticalSectionD1Ev>
    }

    return true;
    1dc4:	00800044 	movi	r2,1
    1dc8:	d8800005 	stb	r2,0(sp)
    1dcc:	d9000204 	addi	r4,sp,8
    1dd0:	0003e740 	call	3e74 <_Unwind_SjLj_Unregister>
}
    1dd4:	d8800003 	ldbu	r2,0(sp)
    1dd8:	dfc01117 	ldw	ra,68(sp)
    1ddc:	df001017 	ldw	fp,64(sp)
    1de0:	dec01204 	addi	sp,sp,72
    1de4:	f800283a 	ret
            control &= ~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    1de8:	10800514 	ori	r2,r2,20
    1dec:	003ff006 	br	1db0 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev+0x118>

00001df0 <_ZN12SharedMemory16UpdateParametersEv>:
#include "shared_memory_manager.hpp"

bool SharedMemory::UpdateParameters(void){
    1df0:	defff504 	addi	sp,sp,-44
    1df4:	dc000815 	stw	r16,32(sp)
     * 共有メモリーへのポインタを取得する
     * データキャッシュが存在する場合に備えて非キャッシュ領域のアドレスを使用する
     * @return 共有メモリーへのポインタ
     */
    static SharedMemory_t* GetNonCachedSharedMemory(void){
        return reinterpret_cast<SharedMemory_t*>(reinterpret_cast<uint32_t>(&_SharedMemory) | 0x80000000UL);
    1df8:	04000074 	movhi	r16,1
    1dfc:	842c0004 	addi	r16,r16,-20480
    1e00:	84200034 	orhi	r16,r16,32768
    // 共有メモリーからパラメータを一時的にコピーする
    SharedMemory_t *shared_memory = GetNonCachedSharedMemory();
    uint32_t tail_checksum = shared_memory->TailChecksum;
    SharedMemory_t::Parameters_t parameters;
    memcpy(&parameters, &shared_memory->Parameters, sizeof(parameters));
    1e04:	01800804 	movi	r6,32
    1e08:	81400304 	addi	r5,r16,12
    1e0c:	d809883a 	mov	r4,sp
bool SharedMemory::UpdateParameters(void){
    1e10:	dc400915 	stw	r17,36(sp)
    1e14:	dfc00a15 	stw	ra,40(sp)
    uint32_t tail_checksum = shared_memory->TailChecksum;
    1e18:	84400b17 	ldw	r17,44(r16)
    memcpy(&parameters, &shared_memory->Parameters, sizeof(parameters));
    1e1c:	00041a00 	call	41a0 <memcpy>
    uint32_t head_checksum = shared_memory->HeadChecksum;

    //　パラメータのフレーム番号が変わっていなければ変更なしと判断する
    if (parameters.FrameNumber == _Parameters.FrameNumber){
    1e20:	00800074 	movhi	r2,1
    1e24:	d8c00017 	ldw	r3,0(sp)
    1e28:	10a0d717 	ldw	r2,-31908(r2)
    1e2c:	18801726 	beq	r3,r2,1e8c <_ZN12SharedMemory16UpdateParametersEv+0x9c>
    uint32_t head_checksum = shared_memory->HeadChecksum;
    1e30:	81000217 	ldw	r4,8(r16)
        return false;
    }

    // パラメータの先頭と末尾のチェックサム、パラメータ自体から計算したチェックサムを比較し、すべてが等しくなければエラーと判断する
    if ((head_checksum != tail_checksum) || (head_checksum != parameters.CalculateChecksum())){
    1e34:	8900151e 	bne	r17,r4,1e8c <_ZN12SharedMemory16UpdateParametersEv+0x9c>
         * @return チェックサム
         */
        uint32_t CalculateChecksum(void) const {
            auto p = reinterpret_cast<const uint32_t*>(this);
            int count = sizeof(Parameters_t) / sizeof(uint32_t);
            uint32_t result = 0xA5A5A5A5;
    1e38:	00a969b4 	movhi	r2,42406
    1e3c:	0007883a 	mov	r3,zero
    1e40:	10a96944 	addi	r2,r2,-23131
            while (0 <= --count) {
                result += *p++;
    1e44:	d8cb883a 	add	r5,sp,r3
    1e48:	29400017 	ldw	r5,0(r5)
    1e4c:	18c00104 	addi	r3,r3,4
    1e50:	1145883a 	add	r2,r2,r5
            while (0 <= --count) {
    1e54:	19400818 	cmpnei	r5,r3,32
    1e58:	283ffa1e 	bne	r5,zero,1e44 <_ZN12SharedMemory16UpdateParametersEv+0x54>
    1e5c:	20800b1e 	bne	r4,r2,1e8c <_ZN12SharedMemory16UpdateParametersEv+0x9c>
        return false;
    }

    // パラメータをローカルメモリーにコピーする
    memcpy(&_Parameters, &parameters, sizeof(_Parameters));
    1e60:	01000074 	movhi	r4,1
    1e64:	01800804 	movi	r6,32
    1e68:	d80b883a 	mov	r5,sp
    1e6c:	2120d704 	addi	r4,r4,-31908
    1e70:	00041a00 	call	41a0 <memcpy>
    return true;
    1e74:	00800044 	movi	r2,1
}
    1e78:	dfc00a17 	ldw	ra,40(sp)
    1e7c:	dc400917 	ldw	r17,36(sp)
    1e80:	dc000817 	ldw	r16,32(sp)
    1e84:	dec00b04 	addi	sp,sp,44
    1e88:	f800283a 	ret
        return false;
    1e8c:	0005883a 	mov	r2,zero
    1e90:	003ff906 	br	1e78 <_ZN12SharedMemory16UpdateParametersEv+0x88>

00001e94 <_ZN12SharedMemory15ClearParametersEv>:

void SharedMemory::ClearParameters(void){
    // ローカルメモリーのパラメータをクリアする
    memset(&_Parameters, 0, sizeof(_Parameters));
    1e94:	01000074 	movhi	r4,1
void SharedMemory::ClearParameters(void){
    1e98:	deffff04 	addi	sp,sp,-4
    memset(&_Parameters, 0, sizeof(_Parameters));
    1e9c:	01800804 	movi	r6,32
    1ea0:	000b883a 	mov	r5,zero
    1ea4:	2120d704 	addi	r4,r4,-31908
void SharedMemory::ClearParameters(void){
    1ea8:	dfc00015 	stw	ra,0(sp)
    memset(&_Parameters, 0, sizeof(_Parameters));
    1eac:	00042280 	call	4228 <memset>
    1eb0:	00800074 	movhi	r2,1
    1eb4:	10ac0004 	addi	r2,r2,-20480
    1eb8:	10a00034 	orhi	r2,r2,32768

    // 共有メモリーをクリアする
    SharedMemory_t *shared_memory = GetNonCachedSharedMemory();
    shared_memory->HeadChecksum = 0;
    1ebc:	10000215 	stw	zero,8(r2)
    shared_memory->Parameters.FrameNumber = 0;
    1ec0:	10000315 	stw	zero,12(r2)
    shared_memory->TailChecksum = 0;
    1ec4:	10000b15 	stw	zero,44(r2)
}
    1ec8:	dfc00017 	ldw	ra,0(sp)
    1ecc:	dec00104 	addi	sp,sp,4
    1ed0:	f800283a 	ret

00001ed4 <_ZN17StreamTransmitter14TransmitStatusEv>:
        return _ErrorFlags;
    1ed4:	d0a01417 	ldw	r2,-32688(gp)
static StreamDataMotion_t StreamDataMotion;
static constexpr MsgdmaTransmitDescriptor StreamDataDesciptorMotion(StreamDataMotion, StreamIdMotion);

void StreamTransmitter::TransmitStatus(void) {
    // データキャッシュが有効になっている場合に備えてデータの格納には__builtin_st〇io()という系列のビルトイン関数を使用する
    __builtin_stwio(&StreamDataStatus.error_flags, CentralizedMonitor::GetErrorFlags());
    1ed8:	d0a02135 	stwio	r2,-32636(gp)
        return _FaultFlags;
    1edc:	d0a01317 	ldw	r2,-32692(gp)
    __builtin_stwio(&StreamDataStatus.fault_flags, CentralizedMonitor::GetFaultFlags());
    1ee0:	d0a02235 	stwio	r2,-32632(gp)
    StreamDataDesciptorStatus.TransmitAsync(_Device);
    1ee4:	d1601e17 	ldw	r5,-32648(gp)
    1ee8:	01000034 	movhi	r4,0
    1eec:	2116f004 	addi	r4,r4,23488
    1ef0:	0001c981 	jmpi	1c98 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev>

00001ef4 <_ZN17StreamTransmitter12TransmitAdc2ERK10Adc2Data_t>:
 * カスタム命令により高速に変換できる
 * @param src 単精度浮動小数点数
 * @return 半精度浮動小数点数 (上位16bitは0)
 */
static inline int Fp32ToFp16(float src) {
    return __builtin_custom_inf(ALT_CI_FLOAT32TO16_0_N, src);
    1ef4:	20800017 	ldw	r2,0(r4)
    1ef8:	1005c032 	custom	0,r2,r2,zero
}

void StreamTransmitter::TransmitAdc2(const Adc2Data_t &adc2_data) {
    __builtin_sthio(&StreamDataAdc2.dc48v_voltage, Fp32ToFp16(adc2_data.Dc48vVoltage));
    1efc:	d0a01f2d 	sthio	r2,-32644(gp)
    1f00:	20800117 	ldw	r2,4(r4)
    1f04:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataAdc2.dribble_voltage, Fp32ToFp16(adc2_data.DribbleVoltage));
    1f08:	d0a01fad 	sthio	r2,-32642(gp)
    1f0c:	20800217 	ldw	r2,8(r4)
    1f10:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataAdc2.dribble_current, Fp32ToFp16(adc2_data.DribbleCurrent));
    1f14:	d0a0202d 	sthio	r2,-32640(gp)
    StreamDataDesciptorAdc2.TransmitAsync(_Device);
    1f18:	d1601e17 	ldw	r5,-32648(gp)
    1f1c:	01000034 	movhi	r4,0
    1f20:	2116ec04 	addi	r4,r4,23472
    1f24:	0001c981 	jmpi	1c98 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev>

00001f28 <_ZN17StreamTransmitter14TransmitMotionERK12MotionData_ti>:
}

void StreamTransmitter::TransmitMotion(const MotionData_t &motion_data, int performance_counter) {
    __builtin_sthio(&StreamDataMotion.performance_counter, static_cast<uint16_t>(performance_counter));
    1f28:	00800074 	movhi	r2,1
    1f2c:	1160df2d 	sthio	r5,-31876(r2)
    1f30:	20800017 	ldw	r2,0(r4)
    1f34:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.accelerometer[0], Fp32ToFp16(motion_data.Imu.AccelX));
    1f38:	00c00074 	movhi	r3,1
    1f3c:	18a0dfad 	sthio	r2,-31874(r3)
    1f40:	20800117 	ldw	r2,4(r4)
    1f44:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.accelerometer[1], Fp32ToFp16(motion_data.Imu.AccelY));
    1f48:	00c00074 	movhi	r3,1
    1f4c:	18a0e02d 	sthio	r2,-31872(r3)
    1f50:	20800217 	ldw	r2,8(r4)
    1f54:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.accelerometer[2], Fp32ToFp16(motion_data.Imu.AccelZ));
    1f58:	00c00074 	movhi	r3,1
    1f5c:	18a0e0ad 	sthio	r2,-31870(r3)
    1f60:	20800317 	ldw	r2,12(r4)
    1f64:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.gyroscope[0], Fp32ToFp16(motion_data.Imu.GyroX));
    1f68:	00c00074 	movhi	r3,1
    1f6c:	18a0e12d 	sthio	r2,-31868(r3)
    1f70:	20800417 	ldw	r2,16(r4)
    1f74:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.gyroscope[1], Fp32ToFp16(motion_data.Imu.GyroY));
    1f78:	00c00074 	movhi	r3,1
    1f7c:	18a0e1ad 	sthio	r2,-31866(r3)
    1f80:	20800517 	ldw	r2,20(r4)
    1f84:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.gyroscope[2], Fp32ToFp16(motion_data.Imu.GyroZ));
    1f88:	00c00074 	movhi	r3,1
    1f8c:	18a0e22d 	sthio	r2,-31864(r3)
    1f90:	20800617 	ldw	r2,24(r4)
    1f94:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_velocity[0], Fp32ToFp16(motion_data.Wheels[0].Velocity));
    1f98:	00c00074 	movhi	r3,1
    1f9c:	18a0e2ad 	sthio	r2,-31862(r3)
    1fa0:	20800a17 	ldw	r2,40(r4)
    1fa4:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_velocity[1], Fp32ToFp16(motion_data.Wheels[1].Velocity));
    1fa8:	00c00074 	movhi	r3,1
    1fac:	18a0e32d 	sthio	r2,-31860(r3)
    1fb0:	20800e17 	ldw	r2,56(r4)
    1fb4:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_velocity[2], Fp32ToFp16(motion_data.Wheels[2].Velocity));
    1fb8:	00c00074 	movhi	r3,1
    1fbc:	18a0e3ad 	sthio	r2,-31858(r3)
    1fc0:	20801217 	ldw	r2,72(r4)
    1fc4:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_velocity[3], Fp32ToFp16(motion_data.Wheels[3].Velocity));
    1fc8:	00c00074 	movhi	r3,1
    1fcc:	18a0e42d 	sthio	r2,-31856(r3)
    1fd0:	20800717 	ldw	r2,28(r4)
    1fd4:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_meas_d[0], Fp32ToFp16(motion_data.Wheels[0].CurrentMeasD));
    1fd8:	00c00074 	movhi	r3,1
    1fdc:	18a0e4ad 	sthio	r2,-31854(r3)
    1fe0:	20800b17 	ldw	r2,44(r4)
    1fe4:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_meas_d[1], Fp32ToFp16(motion_data.Wheels[1].CurrentMeasD));
    1fe8:	00c00074 	movhi	r3,1
    1fec:	18a0e52d 	sthio	r2,-31852(r3)
    1ff0:	20800f17 	ldw	r2,60(r4)
    1ff4:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_meas_d[2], Fp32ToFp16(motion_data.Wheels[2].CurrentMeasD));
    1ff8:	00c00074 	movhi	r3,1
    1ffc:	18a0e5ad 	sthio	r2,-31850(r3)
    2000:	20801317 	ldw	r2,76(r4)
    2004:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_meas_d[3], Fp32ToFp16(motion_data.Wheels[3].CurrentMeasD));
    2008:	00c00074 	movhi	r3,1
    200c:	18a0e62d 	sthio	r2,-31848(r3)
    2010:	20800817 	ldw	r2,32(r4)
    2014:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_meas_q[0], Fp32ToFp16(motion_data.Wheels[0].CurrentMeasQ));
    2018:	00c00074 	movhi	r3,1
    201c:	18a0e6ad 	sthio	r2,-31846(r3)
    2020:	20800c17 	ldw	r2,48(r4)
    2024:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_meas_q[1], Fp32ToFp16(motion_data.Wheels[1].CurrentMeasQ));
    2028:	00c00074 	movhi	r3,1
    202c:	18a0e72d 	sthio	r2,-31844(r3)
    2030:	20801017 	ldw	r2,64(r4)
    2034:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_meas_q[2], Fp32ToFp16(motion_data.Wheels[2].CurrentMeasQ));
    2038:	00c00074 	movhi	r3,1
    203c:	18a0e7ad 	sthio	r2,-31842(r3)
    2040:	20801417 	ldw	r2,80(r4)
    2044:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_meas_q[3], Fp32ToFp16(motion_data.Wheels[3].CurrentMeasQ));
    2048:	00c00074 	movhi	r3,1
    204c:	18a0e82d 	sthio	r2,-31840(r3)
    2050:	20800917 	ldw	r2,36(r4)
    2054:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_ref_q[0], Fp32ToFp16(motion_data.Wheels[0].CurrentRefQ));
    2058:	00c00074 	movhi	r3,1
    205c:	18a0e8ad 	sthio	r2,-31838(r3)
    2060:	20800d17 	ldw	r2,52(r4)
    2064:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_ref_q[1], Fp32ToFp16(motion_data.Wheels[1].CurrentRefQ));
    2068:	00c00074 	movhi	r3,1
    206c:	18a0e92d 	sthio	r2,-31836(r3)
    2070:	20801117 	ldw	r2,68(r4)
    2074:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_ref_q[2], Fp32ToFp16(motion_data.Wheels[2].CurrentRefQ));
    2078:	00c00074 	movhi	r3,1
    207c:	18a0e9ad 	sthio	r2,-31834(r3)
    2080:	20801517 	ldw	r2,84(r4)
    2084:	1005c032 	custom	0,r2,r2,zero
    __builtin_sthio(&StreamDataMotion.wheel_current_ref_q[3], Fp32ToFp16(motion_data.Wheels[3].CurrentRefQ));
    2088:	00c00074 	movhi	r3,1
    208c:	18a0ea2d 	sthio	r2,-31832(r3)
    StreamDataDesciptorMotion.TransmitAsync(_Device);
    2090:	d1601e17 	ldw	r5,-32648(gp)
    2094:	01000034 	movhi	r4,0
    2098:	2116e804 	addi	r4,r4,23456
    209c:	0001c981 	jmpi	1c98 <_ZNK24MsgdmaTransmitDescriptor13TransmitAsyncEP14alt_msgdma_dev>

000020a0 <_ZN15WheelController12StartControlEv>:
#include <board.hpp>
#include <peripheral/vector_controller.hpp>
#include "shared_memory_manager.hpp"
#include "data_holder.hpp"

void WheelController::StartControl(void) {
    20a0:	deffff04 	addi	sp,sp,-4
    20a4:	dfc00015 	stw	ra,0(sp)
	static int GetGainP(void) {
		return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->KP);
	}

	static void SetGainP(int value) {
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->KP, value);
    20a8:	00c36b04 	movi	r3,3500
    20ac:	00bc0c14 	movui	r2,61488
    20b0:	10c0002d 	sthio	r3,0(r2)
	static int GetGainI(void) {
		return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->KI);
	}

	static void SetGainI(int value) {
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->KI, value);
    20b4:	00c07d04 	movi	r3,500
    20b8:	00bc0c94 	movui	r2,61490
    20bc:	10c0002d 	sthio	r3,0(r2)
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x2);
    20c0:	00c00084 	movi	r3,2
    20c4:	00bc0114 	movui	r2,61444
    20c8:	10c0002d 	sthio	r3,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ1, value);
    20cc:	00bc0894 	movui	r2,61474
    20d0:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ2, value);
    20d4:	00bc0994 	movui	r2,61478
    20d8:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ3, value);
    20dc:	00bc0a94 	movui	r2,61482
    20e0:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ4, value);
    20e4:	00bc0b94 	movui	r2,61486
    20e8:	1000002d 	sthio	zero,0(r2)
    VectorController::ClearFault();
    VectorController::SetCurrentReferenceQ(1, 0);
    VectorController::SetCurrentReferenceQ(2, 0);
    VectorController::SetCurrentReferenceQ(3, 0);
    VectorController::SetCurrentReferenceQ(4, 0);
    memset(_LastSpeedError, 0, sizeof(_LastSpeedError));
    20ec:	01000074 	movhi	r4,1
    20f0:	01800404 	movi	r6,16
    20f4:	000b883a 	mov	r5,zero
    20f8:	2120ef04 	addi	r4,r4,-31812
    20fc:	00042280 	call	4228 <memset>
    memset(_LastCurrentReference, 0, sizeof(_LastCurrentReference));
    2100:	01000074 	movhi	r4,1
    2104:	01800404 	movi	r6,16
    2108:	000b883a 	mov	r5,zero
    210c:	2120eb04 	addi	r4,r4,-31828
}
    2110:	dfc00017 	ldw	ra,0(sp)
    2114:	dec00104 	addi	sp,sp,4
    memset(_LastCurrentReference, 0, sizeof(_LastCurrentReference));
    2118:	00042281 	jmpi	4228 <memset>

0000211c <_ZN15WheelController11StopControlEv>:
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->FAULT, 0x1);
    211c:	00c00044 	movi	r3,1
    2120:	00bc0114 	movui	r2,61444
    2124:	10c0002d 	sthio	r3,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ1, value);
    2128:	00bc0894 	movui	r2,61474
    212c:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ2, value);
    2130:	00bc0994 	movui	r2,61478
    2134:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ3, value);
    2138:	00bc0a94 	movui	r2,61482
    213c:	1000002d 	sthio	zero,0(r2)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ4, value);
    2140:	00bc0b94 	movui	r2,61486
    2144:	1000002d 	sthio	zero,0(r2)
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->KP, value);
    2148:	00bc0c14 	movui	r2,61488
    214c:	1000002d 	sthio	zero,0(r2)
		__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->KI, value);
    2150:	00bc0c94 	movui	r2,61490
    2154:	1000002d 	sthio	zero,0(r2)
    VectorController::SetCurrentReferenceQ(2, 0);
    VectorController::SetCurrentReferenceQ(3, 0);
    VectorController::SetCurrentReferenceQ(4, 0);
    VectorController::SetGainP(0);
    VectorController::SetGainI(0);
}
    2158:	f800283a 	ret

0000215c <_ZN15WheelController6UpdateEb>:
	    return __builtin_ldhuio(&reinterpret_cast<Register_t*>(BASE)->FAULT) != 0;
    215c:	00bc0114 	movui	r2,61444
    2160:	1080002b 	ldhuio	r2,0(r2)
    2164:	10bfffcc 	andi	r2,r2,65535

void WheelController::Update(bool new_parameters) {
    if (VectorController::IsFault() == false) {
    2168:	1000451e 	bne	r2,zero,2280 <_ZN15WheelController6UpdateEb+0x124>
        auto &motion_data = DataHolder::GetMotionData();
        auto &parameters = SharedMemory::GetParameters();
        float speed_gain_p = fmaxf(0.0f, parameters.speed_gain_p);
    216c:	00800074 	movhi	r2,1
    2170:	10a0d704 	addi	r2,r2,-31908
    2174:	12800617 	ldw	r10,24(r2)
    2178:	0007883a 	mov	r3,zero
    217c:	1a95fa32 	custom	232,r10,r3,r10
        float speed_gain_i = fmaxf(0.0f, parameters.speed_gain_i);
    2180:	12c00717 	ldw	r11,28(r2)
    2184:	1ad7fa32 	custom	232,r11,r3,r11
        for (int index = 0; index < 4; index++) {
    2188:	01400074 	movhi	r5,1
    218c:	01c00074 	movhi	r7,1
    2190:	01800074 	movhi	r6,1
    2194:	2960eb04 	addi	r5,r5,-31828
    2198:	02400074 	movhi	r9,1
    219c:	1009883a 	mov	r4,r2
    21a0:	39e0c104 	addi	r7,r7,-31996
    21a4:	31a0ef04 	addi	r6,r6,-31812
    21a8:	4a60db04 	addi	r9,r9,-31892
    21ac:	2811883a 	mov	r8,r5
            float speed_ref = parameters.wheel_speed[index];
    21b0:	20800117 	ldw	r2,4(r4)
            if (fabsf(speed_ref) <= MaxSpeedReference) {
    21b4:	0310b234 	movhi	r12,17096
    21b8:	1007f832 	custom	224,r3,r2,zero
    21bc:	1b07f9b2 	custom	230,r3,r3,r12
    21c0:	18002c26 	beq	r3,zero,2274 <_ZN15WheelController6UpdateEb+0x118>
                float speed_meas = motion_data.Wheels[index].Velocity;
                float error = speed_ref - speed_meas;
    21c4:	38c00617 	ldw	r3,24(r7)
                float value_i = speed_gain_i * error;
                float value_p = speed_gain_p * (error - _LastSpeedError[index]);
                _LastSpeedError[index] = error;

                float current_ref = _LastCurrentReference[index];
    21c8:	2b000017 	ldw	r12,0(r5)
                float error = speed_ref - speed_meas;
    21cc:	10c5ffb2 	custom	254,r2,r2,r3
                float value_p = speed_gain_p * (error - _LastSpeedError[index]);
    21d0:	30c00017 	ldw	r3,0(r6)
                _LastSpeedError[index] = error;
    21d4:	30800015 	stw	r2,0(r6)
                float value_p = speed_gain_p * (error - _LastSpeedError[index]);
    21d8:	10c7ffb2 	custom	254,r3,r2,r3
    21dc:	1a87ff32 	custom	252,r3,r3,r10
                float value_i = speed_gain_i * error;
    21e0:	5885ff32 	custom	252,r2,r11,r2
                current_ref += value_p + value_i;
    21e4:	10c5ff72 	custom	253,r2,r2,r3
    21e8:	1305ff72 	custom	253,r2,r2,r12
                current_ref = fmaxf(-MaxCurrentReference, fminf(current_ref, MaxCurrentReference));
    21ec:	00cfc034 	movhi	r3,16128
    21f0:	10c5fa72 	custom	233,r2,r2,r3
    21f4:	00efc034 	movhi	r3,48896
    21f8:	1885fa32 	custom	232,r2,r3,r2
                _LastCurrentReference[index] = current_ref;
    21fc:	28800015 	stw	r2,0(r5)
        for (int index = 0; index < 4; index++) {
    2200:	21000104 	addi	r4,r4,4
    2204:	39c00404 	addi	r7,r7,16
    2208:	31800104 	addi	r6,r6,4
    220c:	29400104 	addi	r5,r5,4
    2210:	227fe71e 	bne	r4,r9,21b0 <_ZN15WheelController6UpdateEb+0x54>
                _LastCurrentReference[index] = 0.0f;
                _LastSpeedError[index] = 0.0f;
            }
        }
        static constexpr float RECIPROCAL_CURRENT_SCALE = 1.0f / ADC1_CURRENT_SCALE;
        VectorController::SetCurrentReferenceQ(1, static_cast<int>(_LastCurrentReference[0] * RECIPROCAL_CURRENT_SCALE));
    2214:	00800074 	movhi	r2,1
    2218:	10e0eb17 	ldw	r3,-31828(r2)
    221c:	00913df4 	movhi	r2,17655
    2220:	108c5044 	addi	r2,r2,12609
    2224:	1887ff32 	custom	252,r3,r3,r2
    2228:	1807fe72 	custom	249,r3,r3,zero
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ1, value);
    222c:	013c0894 	movui	r4,61474
    2230:	20c0002d 	sthio	r3,0(r4)
        VectorController::SetCurrentReferenceQ(2, static_cast<int>(_LastCurrentReference[1] * RECIPROCAL_CURRENT_SCALE));
    2234:	40c00117 	ldw	r3,4(r8)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ2, value);
    2238:	013c0994 	movui	r4,61478
    223c:	1887ff32 	custom	252,r3,r3,r2
    2240:	1807fe72 	custom	249,r3,r3,zero
    2244:	20c0002d 	sthio	r3,0(r4)
        VectorController::SetCurrentReferenceQ(3, static_cast<int>(_LastCurrentReference[2] * RECIPROCAL_CURRENT_SCALE));
    2248:	40c00217 	ldw	r3,8(r8)
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ3, value);
    224c:	013c0a94 	movui	r4,61482
    2250:	1887ff32 	custom	252,r3,r3,r2
    2254:	1807fe72 	custom	249,r3,r3,zero
    2258:	20c0002d 	sthio	r3,0(r4)
        VectorController::SetCurrentReferenceQ(4, static_cast<int>(_LastCurrentReference[3] * RECIPROCAL_CURRENT_SCALE));
    225c:	40c00317 	ldw	r3,12(r8)
    2260:	1885ff32 	custom	252,r2,r3,r2
    2264:	1005fe72 	custom	249,r2,r2,zero
			__builtin_sthio(&reinterpret_cast<Register_t*>(BASE)->IREFQ4, value);
    2268:	00fc0b94 	movui	r3,61486
    226c:	1880002d 	sthio	r2,0(r3)
			break;
    2270:	f800283a 	ret
                _LastCurrentReference[index] = 0.0f;
    2274:	28000015 	stw	zero,0(r5)
                _LastSpeedError[index] = 0.0f;
    2278:	30000015 	stw	zero,0(r6)
    227c:	003fe006 	br	2200 <_ZN15WheelController6UpdateEb+0xa4>
    }
    else if (new_parameters == true) {
    2280:	21003fcc 	andi	r4,r4,255
    2284:	20000126 	beq	r4,zero,228c <_ZN15WheelController6UpdateEb+0x130>
        StartControl();
    2288:	00020a01 	jmpi	20a0 <_ZN15WheelController12StartControlEv>
    }
}
    228c:	f800283a 	ret

00002290 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
    2290:	28800017 	ldw	r2,0(r5)
    2294:	30c00017 	ldw	r3,0(r6)
    2298:	defffb04 	addi	sp,sp,-20
    229c:	10800217 	ldw	r2,8(r2)
    22a0:	dc800315 	stw	r18,12(sp)
    22a4:	dc400215 	stw	r17,8(sp)
    22a8:	dc000115 	stw	r16,4(sp)
    22ac:	dfc00415 	stw	ra,16(sp)
    22b0:	2023883a 	mov	r17,r4
    22b4:	d8c00015 	stw	r3,0(sp)
    22b8:	2809883a 	mov	r4,r5
    22bc:	2821883a 	mov	r16,r5
    22c0:	3025883a 	mov	r18,r6
    22c4:	103ee83a 	callr	r2
    22c8:	10803fcc 	andi	r2,r2,255
    22cc:	10000326 	beq	r2,zero,22dc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
    22d0:	d8800017 	ldw	r2,0(sp)
    22d4:	10800017 	ldw	r2,0(r2)
    22d8:	d8800015 	stw	r2,0(sp)
    22dc:	88800017 	ldw	r2,0(r17)
    22e0:	01c00044 	movi	r7,1
    22e4:	d80d883a 	mov	r6,sp
    22e8:	10800417 	ldw	r2,16(r2)
    22ec:	800b883a 	mov	r5,r16
    22f0:	8809883a 	mov	r4,r17
    22f4:	103ee83a 	callr	r2
    22f8:	10c03fcc 	andi	r3,r2,255
    22fc:	18000226 	beq	r3,zero,2308 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x78>
    2300:	d8c00017 	ldw	r3,0(sp)
    2304:	90c00015 	stw	r3,0(r18)
    2308:	dfc00417 	ldw	ra,16(sp)
    230c:	dc800317 	ldw	r18,12(sp)
    2310:	dc400217 	ldw	r17,8(sp)
    2314:	dc000117 	ldw	r16,4(sp)
    2318:	dec00504 	addi	sp,sp,20
    231c:	f800283a 	ret

00002320 <_ZL28read_encoded_value_with_basehjPKhPj>:
    2320:	20803fcc 	andi	r2,r4,255
    2324:	10801418 	cmpnei	r2,r2,80
    2328:	10002c26 	beq	r2,zero,23dc <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
    232c:	208003cc 	andi	r2,r4,15
    2330:	10c00368 	cmpgeui	r3,r2,13
    2334:	1800711e 	bne	r3,zero,24fc <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    2338:	100490ba 	slli	r2,r2,2
    233c:	00c00034 	movhi	r3,0
    2340:	10c7883a 	add	r3,r2,r3
    2344:	1888d317 	ldw	r2,9036(r3)
    2348:	1000683a 	jmp	r2
    234c:	00002380 	call	238 <microshell_init+0x34>
    2350:	00002470 	cmpltui	zero,zero,145
    2354:	00002434 	movhi	zero,144
    2358:	00002380 	call	238 <microshell_init+0x34>
    235c:	00002404 	movi	zero,144
    2360:	000024fc 	xorhi	zero,zero,147
    2364:	000024fc 	xorhi	zero,zero,147
    2368:	000024fc 	xorhi	zero,zero,147
    236c:	000024fc 	xorhi	zero,zero,147
    2370:	000024a8 	cmpgeui	zero,zero,146
    2374:	0000244c 	andi	zero,zero,145
    2378:	00002380 	call	238 <microshell_init+0x34>
    237c:	00002404 	movi	zero,144
    2380:	32000043 	ldbu	r8,1(r6)
    2384:	30800083 	ldbu	r2,2(r6)
    2388:	30c000c3 	ldbu	r3,3(r6)
    238c:	32400003 	ldbu	r9,0(r6)
    2390:	4010923a 	slli	r8,r8,8
    2394:	1004943a 	slli	r2,r2,16
    2398:	1806963a 	slli	r3,r3,24
    239c:	4250b03a 	or	r8,r8,r9
    23a0:	1204b03a 	or	r2,r2,r8
    23a4:	1886b03a 	or	r3,r3,r2
    23a8:	30800104 	addi	r2,r6,4
    23ac:	18000926 	beq	r3,zero,23d4 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
    23b0:	22001c0c 	andi	r8,r4,112
    23b4:	42000418 	cmpnei	r8,r8,16
    23b8:	4000011e 	bne	r8,zero,23c0 <_ZL28read_encoded_value_with_basehjPKhPj+0xa0>
    23bc:	300b883a 	mov	r5,r6
    23c0:	21003fcc 	andi	r4,r4,255
    23c4:	2100201c 	xori	r4,r4,128
    23c8:	213fe004 	addi	r4,r4,-128
    23cc:	1947883a 	add	r3,r3,r5
    23d0:	20000916 	blt	r4,zero,23f8 <_ZL28read_encoded_value_with_basehjPKhPj+0xd8>
    23d4:	38c00015 	stw	r3,0(r7)
    23d8:	f800283a 	ret
    23dc:	308000c4 	addi	r2,r6,3
    23e0:	01bfff04 	movi	r6,-4
    23e4:	1184703a 	and	r2,r2,r6
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	10800104 	addi	r2,r2,4
    23f0:	38c00015 	stw	r3,0(r7)
    23f4:	f800283a 	ret
    23f8:	18c00017 	ldw	r3,0(r3)
    23fc:	38c00015 	stw	r3,0(r7)
    2400:	f800283a 	ret
    2404:	32000043 	ldbu	r8,1(r6)
    2408:	30800083 	ldbu	r2,2(r6)
    240c:	30c000c3 	ldbu	r3,3(r6)
    2410:	32400003 	ldbu	r9,0(r6)
    2414:	4010923a 	slli	r8,r8,8
    2418:	1004943a 	slli	r2,r2,16
    241c:	1806963a 	slli	r3,r3,24
    2420:	4250b03a 	or	r8,r8,r9
    2424:	1204b03a 	or	r2,r2,r8
    2428:	1886b03a 	or	r3,r3,r2
    242c:	30800204 	addi	r2,r6,8
    2430:	003fde06 	br	23ac <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    2434:	30c00043 	ldbu	r3,1(r6)
    2438:	32000003 	ldbu	r8,0(r6)
    243c:	30800084 	addi	r2,r6,2
    2440:	1806923a 	slli	r3,r3,8
    2444:	1a06b03a 	or	r3,r3,r8
    2448:	003fd806 	br	23ac <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    244c:	30c00043 	ldbu	r3,1(r6)
    2450:	32000003 	ldbu	r8,0(r6)
    2454:	30800084 	addi	r2,r6,2
    2458:	1806923a 	slli	r3,r3,8
    245c:	1a06b03a 	or	r3,r3,r8
    2460:	18ffffcc 	andi	r3,r3,65535
    2464:	18e0001c 	xori	r3,r3,32768
    2468:	18e00004 	addi	r3,r3,-32768
    246c:	003fcf06 	br	23ac <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    2470:	3005883a 	mov	r2,r6
    2474:	0007883a 	mov	r3,zero
    2478:	0015883a 	mov	r10,zero
    247c:	12000003 	ldbu	r8,0(r2)
    2480:	10800044 	addi	r2,r2,1
    2484:	42401fcc 	andi	r9,r8,127
    2488:	4a92983a 	sll	r9,r9,r10
    248c:	42003fcc 	andi	r8,r8,255
    2490:	4200201c 	xori	r8,r8,128
    2494:	423fe004 	addi	r8,r8,-128
    2498:	1a46b03a 	or	r3,r3,r9
    249c:	528001c4 	addi	r10,r10,7
    24a0:	403ff616 	blt	r8,zero,247c <_ZL28read_encoded_value_with_basehjPKhPj+0x15c>
    24a4:	003fc106 	br	23ac <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    24a8:	3005883a 	mov	r2,r6
    24ac:	0007883a 	mov	r3,zero
    24b0:	0013883a 	mov	r9,zero
    24b4:	12800003 	ldbu	r10,0(r2)
    24b8:	10800044 	addi	r2,r2,1
    24bc:	52001fcc 	andi	r8,r10,127
    24c0:	4250983a 	sll	r8,r8,r9
    24c4:	52c03fcc 	andi	r11,r10,255
    24c8:	5ac0201c 	xori	r11,r11,128
    24cc:	5affe004 	addi	r11,r11,-128
    24d0:	1a06b03a 	or	r3,r3,r8
    24d4:	4a4001c4 	addi	r9,r9,7
    24d8:	583ff616 	blt	r11,zero,24b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x194>
    24dc:	4a000828 	cmpgeui	r8,r9,32
    24e0:	403fb21e 	bne	r8,zero,23ac <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    24e4:	5280100c 	andi	r10,r10,64
    24e8:	503fb026 	beq	r10,zero,23ac <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
    24ec:	023fffc4 	movi	r8,-1
    24f0:	4252983a 	sll	r9,r8,r9
    24f4:	1a46b03a 	or	r3,r3,r9
    24f8:	003fad06 	br	23b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x90>
    24fc:	deffff04 	addi	sp,sp,-4
    2500:	dfc00015 	stw	ra,0(sp)
    2504:	00041680 	call	4168 <abort>

00002508 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    2508:	20803fcc 	andi	r2,r4,255
    250c:	10803fe0 	cmpeqi	r2,r2,255
    2510:	1000161e 	bne	r2,zero,256c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
    2514:	2007883a 	mov	r3,r4
    2518:	18801c0c 	andi	r2,r3,112
    251c:	2809883a 	mov	r4,r5
    2520:	11400c20 	cmpeqi	r5,r2,48
    2524:	2800131e 	bne	r5,zero,2574 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    2528:	11400c68 	cmpgeui	r5,r2,49
    252c:	2800031e 	bne	r5,zero,253c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
    2530:	11400820 	cmpeqi	r5,r2,32
    2534:	28000426 	beq	r5,zero,2548 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
    2538:	0003f301 	jmpi	3f30 <_Unwind_GetTextRelBase>
    253c:	10c01020 	cmpeqi	r3,r2,64
    2540:	18000826 	beq	r3,zero,2564 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    2544:	0003f181 	jmpi	3f18 <_Unwind_GetRegionStart>
    2548:	10800868 	cmpgeui	r2,r2,33
    254c:	1000021e 	bne	r2,zero,2558 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
    2550:	18c0180c 	andi	r3,r3,96
    2554:	18000526 	beq	r3,zero,256c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
    2558:	deffff04 	addi	sp,sp,-4
    255c:	dfc00015 	stw	ra,0(sp)
    2560:	00041680 	call	4168 <abort>
    2564:	10801420 	cmpeqi	r2,r2,80
    2568:	103ffb26 	beq	r2,zero,2558 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
    256c:	0005883a 	mov	r2,zero
    2570:	f800283a 	ret
    2574:	0003f281 	jmpi	3f28 <_Unwind_GetDataRelBase>

00002578 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    2578:	defffb04 	addi	sp,sp,-20
    257c:	dc800215 	stw	r18,8(sp)
    2580:	dc400115 	stw	r17,4(sp)
    2584:	dc000015 	stw	r16,0(sp)
    2588:	dfc00415 	stw	ra,16(sp)
    258c:	dcc00315 	stw	r19,12(sp)
    2590:	2025883a 	mov	r18,r4
    2594:	2821883a 	mov	r16,r5
    2598:	3023883a 	mov	r17,r6
    259c:	20003d26 	beq	r4,zero,2694 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    25a0:	0003f180 	call	3f18 <_Unwind_GetRegionStart>
    25a4:	88800015 	stw	r2,0(r17)
    25a8:	84c00003 	ldbu	r19,0(r16)
    25ac:	84000044 	addi	r16,r16,1
    25b0:	98c03fe0 	cmpeqi	r3,r19,255
    25b4:	18002d26 	beq	r3,zero,266c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf4>
    25b8:	88800115 	stw	r2,4(r17)
    25bc:	81000003 	ldbu	r4,0(r16)
    25c0:	80800044 	addi	r2,r16,1
    25c4:	20c03fcc 	andi	r3,r4,255
    25c8:	89000505 	stb	r4,20(r17)
    25cc:	18c03fe0 	cmpeqi	r3,r3,255
    25d0:	1800321e 	bne	r3,zero,269c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    25d4:	000d883a 	mov	r6,zero
    25d8:	000b883a 	mov	r5,zero
    25dc:	10c00003 	ldbu	r3,0(r2)
    25e0:	10800044 	addi	r2,r2,1
    25e4:	19001fcc 	andi	r4,r3,127
    25e8:	2148983a 	sll	r4,r4,r5
    25ec:	18c03fcc 	andi	r3,r3,255
    25f0:	18c0201c 	xori	r3,r3,128
    25f4:	18ffe004 	addi	r3,r3,-128
    25f8:	310cb03a 	or	r6,r6,r4
    25fc:	294001c4 	addi	r5,r5,7
    2600:	183ff616 	blt	r3,zero,25dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x64>
    2604:	118d883a 	add	r6,r2,r6
    2608:	89800315 	stw	r6,12(r17)
    260c:	10c00003 	ldbu	r3,0(r2)
    2610:	000f883a 	mov	r7,zero
    2614:	10800044 	addi	r2,r2,1
    2618:	88c00545 	stb	r3,21(r17)
    261c:	000b883a 	mov	r5,zero
    2620:	10c00003 	ldbu	r3,0(r2)
    2624:	10800044 	addi	r2,r2,1
    2628:	19001fcc 	andi	r4,r3,127
    262c:	2148983a 	sll	r4,r4,r5
    2630:	18c03fcc 	andi	r3,r3,255
    2634:	18c0201c 	xori	r3,r3,128
    2638:	18ffe004 	addi	r3,r3,-128
    263c:	390eb03a 	or	r7,r7,r4
    2640:	294001c4 	addi	r5,r5,7
    2644:	183ff616 	blt	r3,zero,2620 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa8>
    2648:	11cf883a 	add	r7,r2,r7
    264c:	89c00415 	stw	r7,16(r17)
    2650:	dfc00417 	ldw	ra,16(sp)
    2654:	dcc00317 	ldw	r19,12(sp)
    2658:	dc800217 	ldw	r18,8(sp)
    265c:	dc400117 	ldw	r17,4(sp)
    2660:	dc000017 	ldw	r16,0(sp)
    2664:	dec00504 	addi	sp,sp,20
    2668:	f800283a 	ret
    266c:	900b883a 	mov	r5,r18
    2670:	9809883a 	mov	r4,r19
    2674:	00025080 	call	2508 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    2678:	800d883a 	mov	r6,r16
    267c:	89c00104 	addi	r7,r17,4
    2680:	100b883a 	mov	r5,r2
    2684:	9809883a 	mov	r4,r19
    2688:	00023200 	call	2320 <_ZL28read_encoded_value_with_basehjPKhPj>
    268c:	1021883a 	mov	r16,r2
    2690:	003fca06 	br	25bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
    2694:	0005883a 	mov	r2,zero
    2698:	003fc206 	br	25a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
    269c:	88000315 	stw	zero,12(r17)
    26a0:	003fda06 	br	260c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x94>

000026a4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    26a4:	defffa04 	addi	sp,sp,-24
    26a8:	dc000215 	stw	r16,8(sp)
    26ac:	24000317 	ldw	r16,12(r4)
    26b0:	01ce303a 	nor	r7,zero,r7
    26b4:	dc800415 	stw	r18,16(sp)
    26b8:	dc400315 	stw	r17,12(sp)
    26bc:	dfc00515 	stw	ra,20(sp)
    26c0:	2025883a 	mov	r18,r4
    26c4:	2823883a 	mov	r17,r5
    26c8:	d9800015 	stw	r6,0(sp)
    26cc:	81e1883a 	add	r16,r16,r7
    26d0:	000f883a 	mov	r7,zero
    26d4:	000d883a 	mov	r6,zero
    26d8:	80800003 	ldbu	r2,0(r16)
    26dc:	84000044 	addi	r16,r16,1
    26e0:	10c01fcc 	andi	r3,r2,127
    26e4:	1986983a 	sll	r3,r3,r6
    26e8:	10803fcc 	andi	r2,r2,255
    26ec:	1080201c 	xori	r2,r2,128
    26f0:	10bfe004 	addi	r2,r2,-128
    26f4:	38ceb03a 	or	r7,r7,r3
    26f8:	318001c4 	addi	r6,r6,7
    26fc:	103ff616 	blt	r2,zero,26d8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x34>
    2700:	38002926 	beq	r7,zero,27a8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x104>
    2704:	90800503 	ldbu	r2,20(r18)
    2708:	11003fcc 	andi	r4,r2,255
    270c:	20c03fe0 	cmpeqi	r3,r4,255
    2710:	1800231e 	bne	r3,zero,27a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xfc>
    2714:	108001cc 	andi	r2,r2,7
    2718:	10c000a0 	cmpeqi	r3,r2,2
    271c:	18001d1e 	bne	r3,zero,2794 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xf0>
    2720:	10c000e8 	cmpgeui	r3,r2,3
    2724:	18001726 	beq	r3,zero,2784 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe0>
    2728:	10c000e0 	cmpeqi	r3,r2,3
    272c:	1800161e 	bne	r3,zero,2788 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe4>
    2730:	10800120 	cmpeqi	r2,r2,4
    2734:	10001e26 	beq	r2,zero,27b0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
    2738:	380e90fa 	slli	r7,r7,3
    273c:	01c5c83a 	sub	r2,zero,r7
    2740:	91800317 	ldw	r6,12(r18)
    2744:	91400217 	ldw	r5,8(r18)
    2748:	d9c00104 	addi	r7,sp,4
    274c:	308d883a 	add	r6,r6,r2
    2750:	00023200 	call	2320 <_ZL28read_encoded_value_with_basehjPKhPj>
    2754:	d9000117 	ldw	r4,4(sp)
    2758:	d80d883a 	mov	r6,sp
    275c:	880b883a 	mov	r5,r17
    2760:	00022900 	call	2290 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
    2764:	10c03fcc 	andi	r3,r2,255
    2768:	183fd926 	beq	r3,zero,26d0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x2c>
    276c:	dfc00517 	ldw	ra,20(sp)
    2770:	dc800417 	ldw	r18,16(sp)
    2774:	dc400317 	ldw	r17,12(sp)
    2778:	dc000217 	ldw	r16,8(sp)
    277c:	dec00604 	addi	sp,sp,24
    2780:	f800283a 	ret
    2784:	10000a1e 	bne	r2,zero,27b0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
    2788:	380e90ba 	slli	r7,r7,2
    278c:	01c5c83a 	sub	r2,zero,r7
    2790:	003feb06 	br	2740 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
    2794:	39cf883a 	add	r7,r7,r7
    2798:	01c5c83a 	sub	r2,zero,r7
    279c:	003fe806 	br	2740 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
    27a0:	0005883a 	mov	r2,zero
    27a4:	003fe606 	br	2740 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
    27a8:	0005883a 	mov	r2,zero
    27ac:	003fef06 	br	276c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xc8>
    27b0:	00041680 	call	4168 <abort>

000027b4 <__gxx_personality_sj0>:
    27b4:	deffdb04 	addi	sp,sp,-148
    27b8:	02000034 	movhi	r8,0
    27bc:	00c00034 	movhi	r3,0
    27c0:	00800034 	movhi	r2,0
    27c4:	108b8a04 	addi	r2,r2,11816
    27c8:	d9000015 	stw	r4,0(sp)
    27cc:	4209ed04 	addi	r8,r8,10164
    27d0:	18d66404 	addi	r3,r3,22928
    27d4:	d9000d04 	addi	r4,sp,52
    27d8:	d8801615 	stw	r2,88(sp)
    27dc:	dfc02415 	stw	ra,144(sp)
    27e0:	df002315 	stw	fp,140(sp)
    27e4:	d9400315 	stw	r5,12(sp)
    27e8:	d9800115 	stw	r6,4(sp)
    27ec:	d9c00215 	stw	r7,8(sp)
    27f0:	da001315 	stw	r8,76(sp)
    27f4:	d8c01415 	stw	r3,80(sp)
    27f8:	df001515 	stw	fp,84(sp)
    27fc:	dec01715 	stw	sp,92(sp)
    2800:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
    2804:	d8800017 	ldw	r2,0(sp)
    2808:	d8001a15 	stw	zero,104(sp)
    280c:	d8001b15 	stw	zero,108(sp)
    2810:	10800058 	cmpnei	r2,r2,1
    2814:	1000471e 	bne	r2,zero,2934 <__gxx_personality_sj0+0x180>
    2818:	d9800117 	ldw	r6,4(sp)
    281c:	00af3574 	movhi	r2,48341
    2820:	10b54004 	addi	r2,r2,-11008
    2824:	3085883a 	add	r2,r6,r2
    2828:	d8800715 	stw	r2,28(sp)
    282c:	1185803a 	cmpltu	r2,r2,r6
    2830:	d9800217 	ldw	r6,8(sp)
    2834:	00ee2cb4 	movhi	r3,47282
    2838:	d9000317 	ldw	r4,12(sp)
    283c:	18eaaf04 	addi	r3,r3,-21828
    2840:	30c7883a 	add	r3,r6,r3
    2844:	10c7883a 	add	r3,r2,r3
    2848:	21000198 	cmpnei	r4,r4,6
    284c:	d8c00615 	stw	r3,24(sp)
    2850:	2000011e 	bne	r4,zero,2858 <__gxx_personality_sj0+0xa4>
    2854:	1800d026 	beq	r3,zero,2b98 <__gxx_personality_sj0+0x3e4>
    2858:	d9002617 	ldw	r4,152(sp)
    285c:	00bfffc4 	movi	r2,-1
    2860:	d8800e15 	stw	r2,56(sp)
    2864:	0003f0c0 	call	3f0c <_Unwind_GetLanguageSpecificData>
    2868:	d8800515 	stw	r2,20(sp)
    286c:	10005d26 	beq	r2,zero,29e4 <__gxx_personality_sj0+0x230>
    2870:	d9400517 	ldw	r5,20(sp)
    2874:	d9002617 	ldw	r4,152(sp)
    2878:	d9801d04 	addi	r6,sp,116
    287c:	00bfffc4 	movi	r2,-1
    2880:	d8800e15 	stw	r2,56(sp)
    2884:	00025780 	call	2578 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    2888:	d9002203 	ldbu	r4,136(sp)
    288c:	d9402617 	ldw	r5,152(sp)
    2890:	d8800015 	stw	r2,0(sp)
    2894:	00025080 	call	2508 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    2898:	d9002617 	ldw	r4,152(sp)
    289c:	d9401b04 	addi	r5,sp,108
    28a0:	d8801f15 	stw	r2,124(sp)
    28a4:	0003edc0 	call	3edc <_Unwind_GetIPInfo>
    28a8:	d8c01b17 	ldw	r3,108(sp)
    28ac:	d8800115 	stw	r2,4(sp)
    28b0:	18004f26 	beq	r3,zero,29f0 <__gxx_personality_sj0+0x23c>
    28b4:	d8800117 	ldw	r2,4(sp)
    28b8:	10004a16 	blt	r2,zero,29e4 <__gxx_personality_sj0+0x230>
    28bc:	1000381e 	bne	r2,zero,29a0 <__gxx_personality_sj0+0x1ec>
    28c0:	d8000415 	stw	zero,16(sp)
    28c4:	d8000215 	stw	zero,8(sp)
    28c8:	00800044 	movi	r2,1
    28cc:	d8c00317 	ldw	r3,12(sp)
    28d0:	18c0004c 	andi	r3,r3,1
    28d4:	1801061e 	bne	r3,zero,2cf0 <__gxx_personality_sj0+0x53c>
    28d8:	d8c00317 	ldw	r3,12(sp)
    28dc:	18c0020c 	andi	r3,r3,8
    28e0:	18010a26 	beq	r3,zero,2d0c <__gxx_personality_sj0+0x558>
    28e4:	10800058 	cmpnei	r2,r2,1
    28e8:	10015126 	beq	r2,zero,2e30 <__gxx_personality_sj0+0x67c>
    28ec:	d8800417 	ldw	r2,16(sp)
    28f0:	10014a16 	blt	r2,zero,2e1c <__gxx_personality_sj0+0x668>
    28f4:	d9002617 	ldw	r4,152(sp)
    28f8:	d9802517 	ldw	r6,148(sp)
    28fc:	00bfffc4 	movi	r2,-1
    2900:	000b883a 	mov	r5,zero
    2904:	d8800e15 	stw	r2,56(sp)
    2908:	0003eb40 	call	3eb4 <_Unwind_SetGR>
    290c:	d9800417 	ldw	r6,16(sp)
    2910:	d9002617 	ldw	r4,152(sp)
    2914:	01400044 	movi	r5,1
    2918:	0003eb40 	call	3eb4 <_Unwind_SetGR>
    291c:	d9400117 	ldw	r5,4(sp)
    2920:	d9002617 	ldw	r4,152(sp)
    2924:	0003efc0 	call	3efc <_Unwind_SetIP>
    2928:	008001c4 	movi	r2,7
    292c:	d8800015 	stw	r2,0(sp)
    2930:	00000206 	br	293c <__gxx_personality_sj0+0x188>
    2934:	008000c4 	movi	r2,3
    2938:	d8800015 	stw	r2,0(sp)
    293c:	d9000d04 	addi	r4,sp,52
    2940:	0003e740 	call	3e74 <_Unwind_SjLj_Unregister>
    2944:	d8800017 	ldw	r2,0(sp)
    2948:	dfc02417 	ldw	ra,144(sp)
    294c:	df002317 	ldw	fp,140(sp)
    2950:	dec02504 	addi	sp,sp,148
    2954:	f800283a 	ret
    2958:	000b883a 	mov	r5,zero
    295c:	0009883a 	mov	r4,zero
    2960:	d8c00017 	ldw	r3,0(sp)
    2964:	18800003 	ldbu	r2,0(r3)
    2968:	18c00044 	addi	r3,r3,1
    296c:	d8c00015 	stw	r3,0(sp)
    2970:	10c01fcc 	andi	r3,r2,127
    2974:	1906983a 	sll	r3,r3,r4
    2978:	10803fcc 	andi	r2,r2,255
    297c:	1080201c 	xori	r2,r2,128
    2980:	10bfe004 	addi	r2,r2,-128
    2984:	28cab03a 	or	r5,r5,r3
    2988:	210001c4 	addi	r4,r4,7
    298c:	103ff416 	blt	r2,zero,2960 <__gxx_personality_sj0+0x1ac>
    2990:	d8800117 	ldw	r2,4(sp)
    2994:	10bfffc4 	addi	r2,r2,-1
    2998:	d8800115 	stw	r2,4(sp)
    299c:	10001726 	beq	r2,zero,29fc <__gxx_personality_sj0+0x248>
    29a0:	000d883a 	mov	r6,zero
    29a4:	0009883a 	mov	r4,zero
    29a8:	d8c00017 	ldw	r3,0(sp)
    29ac:	18800003 	ldbu	r2,0(r3)
    29b0:	18c00044 	addi	r3,r3,1
    29b4:	d8c00015 	stw	r3,0(sp)
    29b8:	10c01fcc 	andi	r3,r2,127
    29bc:	1906983a 	sll	r3,r3,r4
    29c0:	10803fcc 	andi	r2,r2,255
    29c4:	1080201c 	xori	r2,r2,128
    29c8:	10bfe004 	addi	r2,r2,-128
    29cc:	30ccb03a 	or	r6,r6,r3
    29d0:	210001c4 	addi	r4,r4,7
    29d4:	103ff416 	blt	r2,zero,29a8 <__gxx_personality_sj0+0x1f4>
    29d8:	003fdf06 	br	2958 <__gxx_personality_sj0+0x1a4>
    29dc:	d88008c3 	ldbu	r2,35(sp)
    29e0:	10008c1e 	bne	r2,zero,2c14 <__gxx_personality_sj0+0x460>
    29e4:	00800204 	movi	r2,8
    29e8:	d8800015 	stw	r2,0(sp)
    29ec:	003fd306 	br	293c <__gxx_personality_sj0+0x188>
    29f0:	10bfffc4 	addi	r2,r2,-1
    29f4:	d8800115 	stw	r2,4(sp)
    29f8:	003fae06 	br	28b4 <__gxx_personality_sj0+0x100>
    29fc:	30800044 	addi	r2,r6,1
    2a00:	d8800a15 	stw	r2,40(sp)
    2a04:	283ff626 	beq	r5,zero,29e0 <__gxx_personality_sj0+0x22c>
    2a08:	d8800a17 	ldw	r2,40(sp)
    2a0c:	103ff526 	beq	r2,zero,29e4 <__gxx_personality_sj0+0x230>
    2a10:	d8802117 	ldw	r2,132(sp)
    2a14:	297fffc4 	addi	r5,r5,-1
    2a18:	1145883a 	add	r2,r2,r5
    2a1c:	d8800215 	stw	r2,8(sp)
    2a20:	10007c26 	beq	r2,zero,2c14 <__gxx_personality_sj0+0x460>
    2a24:	d8800317 	ldw	r2,12(sp)
    2a28:	1080020c 	andi	r2,r2,8
    2a2c:	d8800b15 	stw	r2,44(sp)
    2a30:	1000bf1e 	bne	r2,zero,2d30 <__gxx_personality_sj0+0x57c>
    2a34:	d8800617 	ldw	r2,24(sp)
    2a38:	1000e526 	beq	r2,zero,2dd0 <__gxx_personality_sj0+0x61c>
    2a3c:	00800074 	movhi	r2,1
    2a40:	10a09704 	addi	r2,r2,-32164
    2a44:	d8800915 	stw	r2,36(sp)
    2a48:	d8800717 	ldw	r2,28(sp)
    2a4c:	d80008c5 	stb	zero,35(sp)
    2a50:	108000a8 	cmpgeui	r2,r2,2
    2a54:	d8800c15 	stw	r2,48(sp)
    2a58:	d8800217 	ldw	r2,8(sp)
    2a5c:	000f883a 	mov	r7,zero
    2a60:	0007883a 	mov	r3,zero
    2a64:	d8800015 	stw	r2,0(sp)
    2a68:	d8800017 	ldw	r2,0(sp)
    2a6c:	11000003 	ldbu	r4,0(r2)
    2a70:	10800044 	addi	r2,r2,1
    2a74:	d8800015 	stw	r2,0(sp)
    2a78:	20801fcc 	andi	r2,r4,127
    2a7c:	10c4983a 	sll	r2,r2,r3
    2a80:	21403fcc 	andi	r5,r4,255
    2a84:	2940201c 	xori	r5,r5,128
    2a88:	297fe004 	addi	r5,r5,-128
    2a8c:	388eb03a 	or	r7,r7,r2
    2a90:	18c001c4 	addi	r3,r3,7
    2a94:	283ff416 	blt	r5,zero,2a68 <__gxx_personality_sj0+0x2b4>
    2a98:	18800828 	cmpgeui	r2,r3,32
    2a9c:	1000061e 	bne	r2,zero,2ab8 <__gxx_personality_sj0+0x304>
    2aa0:	2100100c 	andi	r4,r4,64
    2aa4:	20000426 	beq	r4,zero,2ab8 <__gxx_personality_sj0+0x304>
    2aa8:	00800044 	movi	r2,1
    2aac:	10c6983a 	sll	r3,r2,r3
    2ab0:	00c7c83a 	sub	r3,zero,r3
    2ab4:	38ceb03a 	or	r7,r7,r3
    2ab8:	d9400017 	ldw	r5,0(sp)
    2abc:	d9c00415 	stw	r7,16(sp)
    2ac0:	d8000115 	stw	zero,4(sp)
    2ac4:	0007883a 	mov	r3,zero
    2ac8:	29000003 	ldbu	r4,0(r5)
    2acc:	da000117 	ldw	r8,4(sp)
    2ad0:	29400044 	addi	r5,r5,1
    2ad4:	20801fcc 	andi	r2,r4,127
    2ad8:	10c4983a 	sll	r2,r2,r3
    2adc:	21803fcc 	andi	r6,r4,255
    2ae0:	3180201c 	xori	r6,r6,128
    2ae4:	4084b03a 	or	r2,r8,r2
    2ae8:	31bfe004 	addi	r6,r6,-128
    2aec:	d8800115 	stw	r2,4(sp)
    2af0:	18c001c4 	addi	r3,r3,7
    2af4:	303ff416 	blt	r6,zero,2ac8 <__gxx_personality_sj0+0x314>
    2af8:	18800828 	cmpgeui	r2,r3,32
    2afc:	1000081e 	bne	r2,zero,2b20 <__gxx_personality_sj0+0x36c>
    2b00:	2100100c 	andi	r4,r4,64
    2b04:	20000626 	beq	r4,zero,2b20 <__gxx_personality_sj0+0x36c>
    2b08:	00800044 	movi	r2,1
    2b0c:	10c6983a 	sll	r3,r2,r3
    2b10:	d8800117 	ldw	r2,4(sp)
    2b14:	00c7c83a 	sub	r3,zero,r3
    2b18:	10c4b03a 	or	r2,r2,r3
    2b1c:	d8800115 	stw	r2,4(sp)
    2b20:	38004726 	beq	r7,zero,2c40 <__gxx_personality_sj0+0x48c>
    2b24:	01c04916 	blt	zero,r7,2c4c <__gxx_personality_sj0+0x498>
    2b28:	d8800917 	ldw	r2,36(sp)
    2b2c:	10000426 	beq	r2,zero,2b40 <__gxx_personality_sj0+0x38c>
    2b30:	d8800b17 	ldw	r2,44(sp)
    2b34:	1000021e 	bne	r2,zero,2b40 <__gxx_personality_sj0+0x38c>
    2b38:	d8800617 	ldw	r2,24(sp)
    2b3c:	10008026 	beq	r2,zero,2d40 <__gxx_personality_sj0+0x58c>
    2b40:	d8802017 	ldw	r2,128(sp)
    2b44:	01ce303a 	nor	r7,zero,r7
    2b48:	000b883a 	mov	r5,zero
    2b4c:	11cf883a 	add	r7,r2,r7
    2b50:	0009883a 	mov	r4,zero
    2b54:	38800003 	ldbu	r2,0(r7)
    2b58:	39c00044 	addi	r7,r7,1
    2b5c:	10c01fcc 	andi	r3,r2,127
    2b60:	1906983a 	sll	r3,r3,r4
    2b64:	10803fcc 	andi	r2,r2,255
    2b68:	1080201c 	xori	r2,r2,128
    2b6c:	10bfe004 	addi	r2,r2,-128
    2b70:	28cab03a 	or	r5,r5,r3
    2b74:	210001c4 	addi	r4,r4,7
    2b78:	103ff616 	blt	r2,zero,2b54 <__gxx_personality_sj0+0x3a0>
    2b7c:	28005126 	beq	r5,zero,2cc4 <__gxx_personality_sj0+0x510>
    2b80:	d8800117 	ldw	r2,4(sp)
    2b84:	103f9526 	beq	r2,zero,29dc <__gxx_personality_sj0+0x228>
    2b88:	d8c00017 	ldw	r3,0(sp)
    2b8c:	1885883a 	add	r2,r3,r2
    2b90:	d8800215 	stw	r2,8(sp)
    2b94:	003fb006 	br	2a58 <__gxx_personality_sj0+0x2a4>
    2b98:	d8800717 	ldw	r2,28(sp)
    2b9c:	108000a8 	cmpgeui	r2,r2,2
    2ba0:	103f2d1e 	bne	r2,zero,2858 <__gxx_personality_sj0+0xa4>
    2ba4:	d8802517 	ldw	r2,148(sp)
    2ba8:	10bffe17 	ldw	r2,-8(r2)
    2bac:	d8800115 	stw	r2,4(sp)
    2bb0:	10005d26 	beq	r2,zero,2d28 <__gxx_personality_sj0+0x574>
    2bb4:	d8802517 	ldw	r2,148(sp)
    2bb8:	10bffb17 	ldw	r2,-20(r2)
    2bbc:	d8800415 	stw	r2,16(sp)
    2bc0:	d8802517 	ldw	r2,148(sp)
    2bc4:	10bffd17 	ldw	r2,-12(r2)
    2bc8:	d8800515 	stw	r2,20(sp)
    2bcc:	d8800417 	ldw	r2,16(sp)
    2bd0:	103f480e 	bge	r2,zero,28f4 <__gxx_personality_sj0+0x140>
    2bd4:	d9002617 	ldw	r4,152(sp)
    2bd8:	d9400517 	ldw	r5,20(sp)
    2bdc:	d9801d04 	addi	r6,sp,116
    2be0:	00bfffc4 	movi	r2,-1
    2be4:	d8800e15 	stw	r2,56(sp)
    2be8:	00025780 	call	2578 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    2bec:	d9402617 	ldw	r5,152(sp)
    2bf0:	d9002203 	ldbu	r4,136(sp)
    2bf4:	00025080 	call	2508 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    2bf8:	d9002203 	ldbu	r4,136(sp)
    2bfc:	d9402617 	ldw	r5,152(sp)
    2c00:	d8801f15 	stw	r2,124(sp)
    2c04:	00025080 	call	2508 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    2c08:	d8c02517 	ldw	r3,148(sp)
    2c0c:	18bffe15 	stw	r2,-8(r3)
    2c10:	003f3806 	br	28f4 <__gxx_personality_sj0+0x140>
    2c14:	d8800317 	ldw	r2,12(sp)
    2c18:	1080004c 	andi	r2,r2,1
    2c1c:	103f711e 	bne	r2,zero,29e4 <__gxx_personality_sj0+0x230>
    2c20:	d8800317 	ldw	r2,12(sp)
    2c24:	1080020c 	andi	r2,r2,8
    2c28:	d8800415 	stw	r2,16(sp)
    2c2c:	10008126 	beq	r2,zero,2e34 <__gxx_personality_sj0+0x680>
    2c30:	d8800a17 	ldw	r2,40(sp)
    2c34:	d8000415 	stw	zero,16(sp)
    2c38:	d8800115 	stw	r2,4(sp)
    2c3c:	003f2d06 	br	28f4 <__gxx_personality_sj0+0x140>
    2c40:	00800044 	movi	r2,1
    2c44:	d88008c5 	stb	r2,35(sp)
    2c48:	003fcd06 	br	2b80 <__gxx_personality_sj0+0x3cc>
    2c4c:	d8802203 	ldbu	r2,136(sp)
    2c50:	11003fcc 	andi	r4,r2,255
    2c54:	20c03fe0 	cmpeqi	r3,r4,255
    2c58:	18002a1e 	bne	r3,zero,2d04 <__gxx_personality_sj0+0x550>
    2c5c:	108001cc 	andi	r2,r2,7
    2c60:	10c000a0 	cmpeqi	r3,r2,2
    2c64:	18001f1e 	bne	r3,zero,2ce4 <__gxx_personality_sj0+0x530>
    2c68:	10c000e8 	cmpgeui	r3,r2,3
    2c6c:	18001926 	beq	r3,zero,2cd4 <__gxx_personality_sj0+0x520>
    2c70:	10c000e0 	cmpeqi	r3,r2,3
    2c74:	1800181e 	bne	r3,zero,2cd8 <__gxx_personality_sj0+0x524>
    2c78:	10800120 	cmpeqi	r2,r2,4
    2c7c:	10007026 	beq	r2,zero,2e40 <__gxx_personality_sj0+0x68c>
    2c80:	380490fa 	slli	r2,r7,3
    2c84:	0085c83a 	sub	r2,zero,r2
    2c88:	d9802017 	ldw	r6,128(sp)
    2c8c:	d9401f17 	ldw	r5,124(sp)
    2c90:	d9c01c04 	addi	r7,sp,112
    2c94:	308d883a 	add	r6,r6,r2
    2c98:	00bfffc4 	movi	r2,-1
    2c9c:	d8800e15 	stw	r2,56(sp)
    2ca0:	00023200 	call	2320 <_ZL28read_encoded_value_with_basehjPKhPj>
    2ca4:	d9001c17 	ldw	r4,112(sp)
    2ca8:	20000626 	beq	r4,zero,2cc4 <__gxx_personality_sj0+0x510>
    2cac:	d9400917 	ldw	r5,36(sp)
    2cb0:	283fb326 	beq	r5,zero,2b80 <__gxx_personality_sj0+0x3cc>
    2cb4:	d9801a04 	addi	r6,sp,104
    2cb8:	00022900 	call	2290 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
    2cbc:	10803fcc 	andi	r2,r2,255
    2cc0:	103faf26 	beq	r2,zero,2b80 <__gxx_personality_sj0+0x3cc>
    2cc4:	d8800a17 	ldw	r2,40(sp)
    2cc8:	d8800115 	stw	r2,4(sp)
    2ccc:	008000c4 	movi	r2,3
    2cd0:	003efe06 	br	28cc <__gxx_personality_sj0+0x118>
    2cd4:	10005a1e 	bne	r2,zero,2e40 <__gxx_personality_sj0+0x68c>
    2cd8:	380490ba 	slli	r2,r7,2
    2cdc:	0085c83a 	sub	r2,zero,r2
    2ce0:	003fe906 	br	2c88 <__gxx_personality_sj0+0x4d4>
    2ce4:	39cf883a 	add	r7,r7,r7
    2ce8:	01c5c83a 	sub	r2,zero,r7
    2cec:	003fe606 	br	2c88 <__gxx_personality_sj0+0x4d4>
    2cf0:	d8800617 	ldw	r2,24(sp)
    2cf4:	10002326 	beq	r2,zero,2d84 <__gxx_personality_sj0+0x5d0>
    2cf8:	00800184 	movi	r2,6
    2cfc:	d8800015 	stw	r2,0(sp)
    2d00:	003f0e06 	br	293c <__gxx_personality_sj0+0x188>
    2d04:	0005883a 	mov	r2,zero
    2d08:	003fdf06 	br	2c88 <__gxx_personality_sj0+0x4d4>
    2d0c:	d8c00617 	ldw	r3,24(sp)
    2d10:	183ef41e 	bne	r3,zero,28e4 <__gxx_personality_sj0+0x130>
    2d14:	d8c00717 	ldw	r3,28(sp)
    2d18:	18c000a8 	cmpgeui	r3,r3,2
    2d1c:	183ef11e 	bne	r3,zero,28e4 <__gxx_personality_sj0+0x130>
    2d20:	10800060 	cmpeqi	r2,r2,1
    2d24:	103fa926 	beq	r2,zero,2bcc <__gxx_personality_sj0+0x418>
    2d28:	d9002517 	ldw	r4,148(sp)
    2d2c:	00034d00 	call	34d0 <__cxa_call_terminate>
    2d30:	00800074 	movhi	r2,1
    2d34:	10a09504 	addi	r2,r2,-32172
    2d38:	d8800915 	stw	r2,36(sp)
    2d3c:	003f4206 	br	2a48 <__gxx_personality_sj0+0x294>
    2d40:	d8800c17 	ldw	r2,48(sp)
    2d44:	103f7e1e 	bne	r2,zero,2b40 <__gxx_personality_sj0+0x38c>
    2d48:	d9801a17 	ldw	r6,104(sp)
    2d4c:	d9400917 	ldw	r5,36(sp)
    2d50:	00bfffc4 	movi	r2,-1
    2d54:	d9001d04 	addi	r4,sp,116
    2d58:	d8800e15 	stw	r2,56(sp)
    2d5c:	00026a40 	call	26a4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    2d60:	10803fcc 	andi	r2,r2,255
    2d64:	103f861e 	bne	r2,zero,2b80 <__gxx_personality_sj0+0x3cc>
    2d68:	d8800317 	ldw	r2,12(sp)
    2d6c:	1080004c 	andi	r2,r2,1
    2d70:	1000271e 	bne	r2,zero,2e10 <__gxx_personality_sj0+0x65c>
    2d74:	d8800a17 	ldw	r2,40(sp)
    2d78:	d8800115 	stw	r2,4(sp)
    2d7c:	008000c4 	movi	r2,3
    2d80:	003fe406 	br	2d14 <__gxx_personality_sj0+0x560>
    2d84:	d8800717 	ldw	r2,28(sp)
    2d88:	108000a8 	cmpgeui	r2,r2,2
    2d8c:	103fda1e 	bne	r2,zero,2cf8 <__gxx_personality_sj0+0x544>
    2d90:	d8802517 	ldw	r2,148(sp)
    2d94:	d8c00417 	ldw	r3,16(sp)
    2d98:	10fffb15 	stw	r3,-20(r2)
    2d9c:	d8c00217 	ldw	r3,8(sp)
    2da0:	10fffc15 	stw	r3,-16(r2)
    2da4:	d8c00517 	ldw	r3,20(sp)
    2da8:	10fffd15 	stw	r3,-12(r2)
    2dac:	d8c02517 	ldw	r3,148(sp)
    2db0:	d8801a17 	ldw	r2,104(sp)
    2db4:	18bfff15 	stw	r2,-4(r3)
    2db8:	1805883a 	mov	r2,r3
    2dbc:	d8c00117 	ldw	r3,4(sp)
    2dc0:	10fffe15 	stw	r3,-8(r2)
    2dc4:	00800184 	movi	r2,6
    2dc8:	d8800015 	stw	r2,0(sp)
    2dcc:	003edb06 	br	293c <__gxx_personality_sj0+0x188>
    2dd0:	d8800717 	ldw	r2,28(sp)
    2dd4:	108000a8 	cmpgeui	r2,r2,2
    2dd8:	103f181e 	bne	r2,zero,2a3c <__gxx_personality_sj0+0x288>
    2ddc:	d8802517 	ldw	r2,148(sp)
    2de0:	10800003 	ldbu	r2,0(r2)
    2de4:	1080004c 	andi	r2,r2,1
    2de8:	10000626 	beq	r2,zero,2e04 <__gxx_personality_sj0+0x650>
    2dec:	d8802517 	ldw	r2,148(sp)
    2df0:	10bff517 	ldw	r2,-44(r2)
    2df4:	10fff017 	ldw	r3,-64(r2)
    2df8:	d8801a15 	stw	r2,104(sp)
    2dfc:	d8c00915 	stw	r3,36(sp)
    2e00:	003f1106 	br	2a48 <__gxx_personality_sj0+0x294>
    2e04:	d8802517 	ldw	r2,148(sp)
    2e08:	10800504 	addi	r2,r2,20
    2e0c:	003ff906 	br	2df4 <__gxx_personality_sj0+0x640>
    2e10:	d8800a17 	ldw	r2,40(sp)
    2e14:	d8800115 	stw	r2,4(sp)
    2e18:	003fdd06 	br	2d90 <__gxx_personality_sj0+0x5dc>
    2e1c:	00800044 	movi	r2,1
    2e20:	d8800e15 	stw	r2,56(sp)
    2e24:	00030b40 	call	30b4 <_ZSt10unexpectedv>
    2e28:	d9000f17 	ldw	r4,60(sp)
    2e2c:	00035280 	call	3528 <__cxa_begin_catch>
    2e30:	00030900 	call	3090 <_ZSt9terminatev>
    2e34:	d8800a17 	ldw	r2,40(sp)
    2e38:	d8800115 	stw	r2,4(sp)
    2e3c:	003ead06 	br	28f4 <__gxx_personality_sj0+0x140>
    2e40:	00bfffc4 	movi	r2,-1
    2e44:	d8800e15 	stw	r2,56(sp)
    2e48:	00041680 	call	4168 <abort>

00002e4c <__cxa_call_unexpected>:
    2e4c:	deffe704 	addi	sp,sp,-100
    2e50:	01400034 	movhi	r5,0
    2e54:	00c00034 	movhi	r3,0
    2e58:	00800034 	movhi	r2,0
    2e5c:	2949ed04 	addi	r5,r5,10164
    2e60:	18d66804 	addi	r3,r3,22944
    2e64:	108bb304 	addi	r2,r2,11980
    2e68:	d9000015 	stw	r4,0(sp)
    2e6c:	d9000404 	addi	r4,sp,16
    2e70:	d9400a15 	stw	r5,40(sp)
    2e74:	d8c00b15 	stw	r3,44(sp)
    2e78:	dfc01815 	stw	ra,96(sp)
    2e7c:	d8800d15 	stw	r2,52(sp)
    2e80:	df001715 	stw	fp,92(sp)
    2e84:	df000c15 	stw	fp,48(sp)
    2e88:	dec00e15 	stw	sp,56(sp)
    2e8c:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
    2e90:	d9000017 	ldw	r4,0(sp)
    2e94:	00035280 	call	3528 <__cxa_begin_catch>
    2e98:	d8c00017 	ldw	r3,0(sp)
    2e9c:	197ffd17 	ldw	r5,-12(r3)
    2ea0:	18bffe17 	ldw	r2,-8(r3)
    2ea4:	193ff717 	ldw	r4,-36(r3)
    2ea8:	d9400115 	stw	r5,4(sp)
    2eac:	197ffb17 	ldw	r5,-20(r3)
    2eb0:	18fff817 	ldw	r3,-32(r3)
    2eb4:	d8801315 	stw	r2,76(sp)
    2eb8:	00800044 	movi	r2,1
    2ebc:	d9400015 	stw	r5,0(sp)
    2ec0:	d8c00215 	stw	r3,8(sp)
    2ec4:	d8800515 	stw	r2,20(sp)
    2ec8:	00030a40 	call	30a4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    2ecc:	d8c00617 	ldw	r3,24(sp)
    2ed0:	d8800517 	ldw	r2,20(sp)
    2ed4:	d8c00315 	stw	r3,12(sp)
    2ed8:	10002b1e 	bne	r2,zero,2f88 <__cxa_call_unexpected+0x13c>
    2edc:	d9000317 	ldw	r4,12(sp)
    2ee0:	00035280 	call	3528 <__cxa_begin_catch>
    2ee4:	00036ac0 	call	36ac <__cxa_get_globals_fast>
    2ee8:	10800017 	ldw	r2,0(r2)
    2eec:	10c00b03 	ldbu	r3,44(r2)
    2ef0:	18c0004c 	andi	r3,r3,1
    2ef4:	18002e26 	beq	r3,zero,2fb0 <__cxa_call_unexpected+0x164>
    2ef8:	10800017 	ldw	r2,0(r2)
    2efc:	d8800315 	stw	r2,12(sp)
    2f00:	d9400117 	ldw	r5,4(sp)
    2f04:	00800084 	movi	r2,2
    2f08:	d9801104 	addi	r6,sp,68
    2f0c:	0009883a 	mov	r4,zero
    2f10:	d8800515 	stw	r2,20(sp)
    2f14:	00025780 	call	2578 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    2f18:	d9800317 	ldw	r6,12(sp)
    2f1c:	d9c00017 	ldw	r7,0(sp)
    2f20:	d9001104 	addi	r4,sp,68
    2f24:	317ff017 	ldw	r5,-64(r6)
    2f28:	00026a40 	call	26a4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    2f2c:	10803fcc 	andi	r2,r2,255
    2f30:	1000221e 	bne	r2,zero,2fbc <__cxa_call_unexpected+0x170>
    2f34:	d9c00017 	ldw	r7,0(sp)
    2f38:	01400034 	movhi	r5,0
    2f3c:	00800084 	movi	r2,2
    2f40:	000d883a 	mov	r6,zero
    2f44:	29570204 	addi	r5,r5,23560
    2f48:	d9001104 	addi	r4,sp,68
    2f4c:	d8800515 	stw	r2,20(sp)
    2f50:	00026a40 	call	26a4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    2f54:	10803fcc 	andi	r2,r2,255
    2f58:	10001926 	beq	r2,zero,2fc0 <__cxa_call_unexpected+0x174>
    2f5c:	01000104 	movi	r4,4
    2f60:	00033ec0 	call	33ec <__cxa_allocate_exception>
    2f64:	1009883a 	mov	r4,r2
    2f68:	00800034 	movhi	r2,0
    2f6c:	01800034 	movhi	r6,0
    2f70:	01400034 	movhi	r5,0
    2f74:	10971804 	addi	r2,r2,23648
    2f78:	318da504 	addi	r6,r6,13972
    2f7c:	29570204 	addi	r5,r5,23560
    2f80:	20800015 	stw	r2,0(r4)
    2f84:	00031ac0 	call	31ac <__cxa_throw>
    2f88:	10bfffc4 	addi	r2,r2,-1
    2f8c:	10000126 	beq	r2,zero,2f94 <__cxa_call_unexpected+0x148>
    2f90:	003b68fa 	trap	3
    2f94:	d8000515 	stw	zero,20(sp)
    2f98:	00035e00 	call	35e0 <__cxa_end_catch>
    2f9c:	00035e00 	call	35e0 <__cxa_end_catch>
    2fa0:	d9000317 	ldw	r4,12(sp)
    2fa4:	00bfffc4 	movi	r2,-1
    2fa8:	d8800515 	stw	r2,20(sp)
    2fac:	00040440 	call	4044 <_Unwind_SjLj_Resume>
    2fb0:	10801004 	addi	r2,r2,64
    2fb4:	d8800315 	stw	r2,12(sp)
    2fb8:	003fd106 	br	2f00 <__cxa_call_unexpected+0xb4>
    2fbc:	000320c0 	call	320c <__cxa_rethrow>
    2fc0:	d9000217 	ldw	r4,8(sp)
    2fc4:	0002fc80 	call	2fc8 <_ZN10__cxxabiv111__terminateEPFvvE>

00002fc8 <_ZN10__cxxabiv111__terminateEPFvvE>:
    2fc8:	deffef04 	addi	sp,sp,-68
    2fcc:	01400034 	movhi	r5,0
    2fd0:	00c00034 	movhi	r3,0
    2fd4:	00800034 	movhi	r2,0
    2fd8:	200d883a 	mov	r6,r4
    2fdc:	108c0904 	addi	r2,r2,12324
    2fe0:	2949ed04 	addi	r5,r5,10164
    2fe4:	18d66c04 	addi	r3,r3,22960
    2fe8:	d9000204 	addi	r4,sp,8
    2fec:	d8800b15 	stw	r2,44(sp)
    2ff0:	dfc01015 	stw	ra,64(sp)
    2ff4:	df000f15 	stw	fp,60(sp)
    2ff8:	d9800015 	stw	r6,0(sp)
    2ffc:	d9400815 	stw	r5,32(sp)
    3000:	d8c00915 	stw	r3,36(sp)
    3004:	df000a15 	stw	fp,40(sp)
    3008:	dec00c15 	stw	sp,48(sp)
    300c:	0003e5c0 	call	3e5c <_Unwind_SjLj_Register>
    3010:	00800044 	movi	r2,1
    3014:	d8800315 	stw	r2,12(sp)
    3018:	d8800017 	ldw	r2,0(sp)
    301c:	103ee83a 	callr	r2
    3020:	00041680 	call	4168 <abort>
    3024:	d8c00417 	ldw	r3,16(sp)
    3028:	d8800317 	ldw	r2,12(sp)
    302c:	d8c00015 	stw	r3,0(sp)
    3030:	d8c00517 	ldw	r3,20(sp)
    3034:	d8c00115 	stw	r3,4(sp)
    3038:	1000051e 	bne	r2,zero,3050 <_ZN10__cxxabiv111__terminateEPFvvE+0x88>
    303c:	d9000017 	ldw	r4,0(sp)
    3040:	00035280 	call	3528 <__cxa_begin_catch>
    3044:	00800084 	movi	r2,2
    3048:	d8800315 	stw	r2,12(sp)
    304c:	00041680 	call	4168 <abort>
    3050:	10bfffc4 	addi	r2,r2,-1
    3054:	10000126 	beq	r2,zero,305c <_ZN10__cxxabiv111__terminateEPFvvE+0x94>
    3058:	003b68fa 	trap	3
    305c:	d8000315 	stw	zero,12(sp)
    3060:	00035e00 	call	35e0 <__cxa_end_catch>
    3064:	d8c00117 	ldw	r3,4(sp)
    3068:	18bfffe0 	cmpeqi	r2,r3,-1
    306c:	10000426 	beq	r2,zero,3080 <_ZN10__cxxabiv111__terminateEPFvvE+0xb8>
    3070:	d8800117 	ldw	r2,4(sp)
    3074:	d9000017 	ldw	r4,0(sp)
    3078:	d8800315 	stw	r2,12(sp)
    307c:	0002e4c0 	call	2e4c <__cxa_call_unexpected>
    3080:	d9000017 	ldw	r4,0(sp)
    3084:	00bfffc4 	movi	r2,-1
    3088:	d8800315 	stw	r2,12(sp)
    308c:	00040440 	call	4044 <_Unwind_SjLj_Resume>

00003090 <_ZSt9terminatev>:
    3090:	00800074 	movhi	r2,1
    3094:	11209917 	ldw	r4,-32156(r2)
    3098:	deffff04 	addi	sp,sp,-4
    309c:	dfc00015 	stw	ra,0(sp)
    30a0:	0002fc80 	call	2fc8 <_ZN10__cxxabiv111__terminateEPFvvE>

000030a4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    30a4:	deffff04 	addi	sp,sp,-4
    30a8:	dfc00015 	stw	ra,0(sp)
    30ac:	203ee83a 	callr	r4
    30b0:	00030900 	call	3090 <_ZSt9terminatev>

000030b4 <_ZSt10unexpectedv>:
    30b4:	00800074 	movhi	r2,1
    30b8:	11209217 	ldw	r4,-32184(r2)
    30bc:	deffff04 	addi	sp,sp,-4
    30c0:	dfc00015 	stw	ra,0(sp)
    30c4:	00030a40 	call	30a4 <_ZN10__cxxabiv112__unexpectedEPFvvE>

000030c8 <_ZSt13get_terminatev>:
    30c8:	00800074 	movhi	r2,1
    30cc:	10a09917 	ldw	r2,-32156(r2)
    30d0:	f800283a 	ret

000030d4 <_ZSt14get_unexpectedv>:
    30d4:	00800074 	movhi	r2,1
    30d8:	10a09217 	ldw	r2,-32184(r2)
    30dc:	f800283a 	ret

000030e0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    30e0:	defffe04 	addi	sp,sp,-8
    30e4:	dfc00115 	stw	ra,4(sp)
    30e8:	dc000015 	stw	r16,0(sp)
    30ec:	210000b0 	cmpltui	r4,r4,2
    30f0:	20001326 	beq	r4,zero,3140 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x60>
    30f4:	28bff417 	ldw	r2,-48(r5)
    30f8:	10ffffc4 	addi	r3,r2,-1
    30fc:	28fff415 	stw	r3,-48(r5)
    3100:	10800058 	cmpnei	r2,r2,1
    3104:	10000426 	beq	r2,zero,3118 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x38>
    3108:	dfc00117 	ldw	ra,4(sp)
    310c:	dc000017 	ldw	r16,0(sp)
    3110:	dec00204 	addi	sp,sp,8
    3114:	f800283a 	ret
    3118:	28bff617 	ldw	r2,-40(r5)
    311c:	2c000504 	addi	r16,r5,20
    3120:	10000226 	beq	r2,zero,312c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x4c>
    3124:	8009883a 	mov	r4,r16
    3128:	103ee83a 	callr	r2
    312c:	8009883a 	mov	r4,r16
    3130:	dfc00117 	ldw	ra,4(sp)
    3134:	dc000017 	ldw	r16,0(sp)
    3138:	dec00204 	addi	sp,sp,8
    313c:	00034441 	jmpi	3444 <__cxa_free_exception>
    3140:	293ff817 	ldw	r4,-32(r5)
    3144:	0002fc80 	call	2fc8 <_ZN10__cxxabiv111__terminateEPFvvE>

00003148 <__cxa_init_primary_exception>:
    3148:	defffe04 	addi	sp,sp,-8
    314c:	dfc00115 	stw	ra,4(sp)
    3150:	dc000015 	stw	r16,0(sp)
    3154:	217ff015 	stw	r5,-64(r4)
    3158:	21bff115 	stw	r6,-60(r4)
    315c:	203fef15 	stw	zero,-68(r4)
    3160:	2021883a 	mov	r16,r4
    3164:	00030d40 	call	30d4 <_ZSt14get_unexpectedv>
    3168:	80bff215 	stw	r2,-56(r16)
    316c:	00030c80 	call	30c8 <_ZSt13get_terminatev>
    3170:	0150caf4 	movhi	r5,17195
    3174:	0111d3b4 	movhi	r4,18254
    3178:	00c00034 	movhi	r3,0
    317c:	294ac004 	addi	r5,r5,11008
    3180:	211550c4 	addi	r4,r4,21827
    3184:	18cc3804 	addi	r3,r3,12512
    3188:	80bff315 	stw	r2,-52(r16)
    318c:	80bfef04 	addi	r2,r16,-68
    3190:	817ffb15 	stw	r5,-20(r16)
    3194:	813ffc15 	stw	r4,-16(r16)
    3198:	80fffd15 	stw	r3,-12(r16)
    319c:	dfc00117 	ldw	ra,4(sp)
    31a0:	dc000017 	ldw	r16,0(sp)
    31a4:	dec00204 	addi	sp,sp,8
    31a8:	f800283a 	ret

000031ac <__cxa_throw>:
    31ac:	defffc04 	addi	sp,sp,-16
    31b0:	dfc00315 	stw	ra,12(sp)
    31b4:	dc800215 	stw	r18,8(sp)
    31b8:	dc400115 	stw	r17,4(sp)
    31bc:	dc000015 	stw	r16,0(sp)
    31c0:	2823883a 	mov	r17,r5
    31c4:	2021883a 	mov	r16,r4
    31c8:	3025883a 	mov	r18,r6
    31cc:	00036b80 	call	36b8 <__cxa_get_globals>
    31d0:	10c00117 	ldw	r3,4(r2)
    31d4:	900d883a 	mov	r6,r18
    31d8:	880b883a 	mov	r5,r17
    31dc:	18c00044 	addi	r3,r3,1
    31e0:	8009883a 	mov	r4,r16
    31e4:	10c00115 	stw	r3,4(r2)
    31e8:	00031480 	call	3148 <__cxa_init_primary_exception>
    31ec:	14000c04 	addi	r16,r2,48
    31f0:	00c00044 	movi	r3,1
    31f4:	10c00015 	stw	r3,0(r2)
    31f8:	8009883a 	mov	r4,r16
    31fc:	0003f380 	call	3f38 <_Unwind_SjLj_RaiseException>
    3200:	8009883a 	mov	r4,r16
    3204:	00035280 	call	3528 <__cxa_begin_catch>
    3208:	00030900 	call	3090 <_ZSt9terminatev>

0000320c <__cxa_rethrow>:
    320c:	defffe04 	addi	sp,sp,-8
    3210:	dfc00115 	stw	ra,4(sp)
    3214:	dc000015 	stw	r16,0(sp)
    3218:	00036b80 	call	36b8 <__cxa_get_globals>
    321c:	10c00117 	ldw	r3,4(r2)
    3220:	11000017 	ldw	r4,0(r2)
    3224:	18c00044 	addi	r3,r3,1
    3228:	10c00115 	stw	r3,4(r2)
    322c:	20001126 	beq	r4,zero,3274 <__cxa_rethrow+0x68>
    3230:	20c00b17 	ldw	r3,44(r4)
    3234:	21800c17 	ldw	r6,48(r4)
    3238:	016f3574 	movhi	r5,48341
    323c:	29754004 	addi	r5,r5,-11008
    3240:	01ee2cb4 	movhi	r7,47282
    3244:	39eaaf04 	addi	r7,r7,-21828
    3248:	194b883a 	add	r5,r3,r5
    324c:	28c7803a 	cmpltu	r3,r5,r3
    3250:	31cd883a 	add	r6,r6,r7
    3254:	1987883a 	add	r3,r3,r6
    3258:	18000726 	beq	r3,zero,3278 <__cxa_rethrow+0x6c>
    325c:	10000015 	stw	zero,0(r2)
    3260:	24000b04 	addi	r16,r4,44
    3264:	8009883a 	mov	r4,r16
    3268:	00040880 	call	4088 <_Unwind_SjLj_Resume_or_Rethrow>
    326c:	8009883a 	mov	r4,r16
    3270:	00035280 	call	3528 <__cxa_begin_catch>
    3274:	00030900 	call	3090 <_ZSt9terminatev>
    3278:	294000a8 	cmpgeui	r5,r5,2
    327c:	283ff71e 	bne	r5,zero,325c <__cxa_rethrow+0x50>
    3280:	20800517 	ldw	r2,20(r4)
    3284:	0085c83a 	sub	r2,zero,r2
    3288:	20800515 	stw	r2,20(r4)
    328c:	003ff406 	br	3260 <__cxa_rethrow+0x54>

00003290 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
    3290:	01400074 	movhi	r5,1
    3294:	2960f304 	addi	r5,r5,-31796
    3298:	28c00117 	ldw	r3,4(r5)
    329c:	223fff04 	addi	r8,r4,-4
    32a0:	18001a26 	beq	r3,zero,330c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
    32a4:	227fff17 	ldw	r9,-4(r4)
    32a8:	424d883a 	add	r6,r8,r9
    32ac:	30c01736 	bltu	r6,r3,330c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
    32b0:	18800117 	ldw	r2,4(r3)
    32b4:	19802326 	beq	r3,r6,3344 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb4>
    32b8:	01c00074 	movhi	r7,1
    32bc:	39e0f404 	addi	r7,r7,-31792
    32c0:	10000726 	beq	r2,zero,32e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
    32c4:	3080062e 	bgeu	r6,r2,32e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
    32c8:	11400117 	ldw	r5,4(r2)
    32cc:	19c00104 	addi	r7,r3,4
    32d0:	1007883a 	mov	r3,r2
    32d4:	28001826 	beq	r5,zero,3338 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa8>
    32d8:	2805883a 	mov	r2,r5
    32dc:	30bffa36 	bltu	r6,r2,32c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x38>
    32e0:	30801026 	beq	r6,r2,3324 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
    32e4:	38800017 	ldw	r2,0(r7)
    32e8:	10c00017 	ldw	r3,0(r2)
    32ec:	10cb883a 	add	r5,r2,r3
    32f0:	41400926 	beq	r8,r5,3318 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x88>
    32f4:	10800117 	ldw	r2,4(r2)
    32f8:	227fff15 	stw	r9,-4(r4)
    32fc:	20800015 	stw	r2,0(r4)
    3300:	38800017 	ldw	r2,0(r7)
    3304:	12000115 	stw	r8,4(r2)
    3308:	f800283a 	ret
    330c:	20c00015 	stw	r3,0(r4)
    3310:	2a000115 	stw	r8,4(r5)
    3314:	f800283a 	ret
    3318:	1a47883a 	add	r3,r3,r9
    331c:	10c00015 	stw	r3,0(r2)
    3320:	f800283a 	ret
    3324:	31400017 	ldw	r5,0(r6)
    3328:	30800117 	ldw	r2,4(r6)
    332c:	4953883a 	add	r9,r9,r5
    3330:	18800115 	stw	r2,4(r3)
    3334:	003feb06 	br	32e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
    3338:	0005883a 	mov	r2,zero
    333c:	30bfe91e 	bne	r6,r2,32e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
    3340:	003ff806 	br	3324 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
    3344:	18c00017 	ldw	r3,0(r3)
    3348:	20800015 	stw	r2,0(r4)
    334c:	1a53883a 	add	r9,r3,r9
    3350:	227fff15 	stw	r9,-4(r4)
    3354:	2a000115 	stw	r8,4(r5)
    3358:	f800283a 	ret

0000335c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
    335c:	21000104 	addi	r4,r4,4
    3360:	20800228 	cmpgeui	r2,r4,8
    3364:	1000011e 	bne	r2,zero,336c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x10>
    3368:	01000204 	movi	r4,8
    336c:	00800074 	movhi	r2,1
    3370:	10a0f417 	ldw	r2,-31792(r2)
    3374:	210000c4 	addi	r4,r4,3
    3378:	00ffff04 	movi	r3,-4
    337c:	20c8703a 	and	r4,r4,r3
    3380:	10001026 	beq	r2,zero,33c4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x68>
    3384:	01800074 	movhi	r6,1
    3388:	31a0f404 	addi	r6,r6,-31792
    338c:	00000206 	br	3398 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
    3390:	19800104 	addi	r6,r3,4
    3394:	10001426 	beq	r2,zero,33e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x8c>
    3398:	11400017 	ldw	r5,0(r2)
    339c:	1007883a 	mov	r3,r2
    33a0:	10800117 	ldw	r2,4(r2)
    33a4:	293ffa36 	bltu	r5,r4,3390 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
    33a8:	290fc83a 	sub	r7,r5,r4
    33ac:	3a000228 	cmpgeui	r8,r7,8
    33b0:	4000051e 	bne	r8,zero,33c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x6c>
    33b4:	19400015 	stw	r5,0(r3)
    33b8:	30800015 	stw	r2,0(r6)
    33bc:	18800104 	addi	r2,r3,4
    33c0:	f800283a 	ret
    33c4:	f800283a 	ret
    33c8:	190b883a 	add	r5,r3,r4
    33cc:	28800115 	stw	r2,4(r5)
    33d0:	30c00017 	ldw	r3,0(r6)
    33d4:	29c00015 	stw	r7,0(r5)
    33d8:	19000015 	stw	r4,0(r3)
    33dc:	31400015 	stw	r5,0(r6)
    33e0:	18800104 	addi	r2,r3,4
    33e4:	f800283a 	ret
    33e8:	f800283a 	ret

000033ec <__cxa_allocate_exception>:
    33ec:	defffe04 	addi	sp,sp,-8
    33f0:	dc000015 	stw	r16,0(sp)
    33f4:	24001104 	addi	r16,r4,68
    33f8:	8009883a 	mov	r4,r16
    33fc:	dfc00115 	stw	ra,4(sp)
    3400:	00041800 	call	4180 <malloc>
    3404:	1007883a 	mov	r3,r2
    3408:	10000926 	beq	r2,zero,3430 <__cxa_allocate_exception+0x44>
    340c:	01801104 	movi	r6,68
    3410:	000b883a 	mov	r5,zero
    3414:	1809883a 	mov	r4,r3
    3418:	00042280 	call	4228 <memset>
    341c:	10801104 	addi	r2,r2,68
    3420:	dfc00117 	ldw	ra,4(sp)
    3424:	dc000017 	ldw	r16,0(sp)
    3428:	dec00204 	addi	sp,sp,8
    342c:	f800283a 	ret
    3430:	8009883a 	mov	r4,r16
    3434:	000335c0 	call	335c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
    3438:	1007883a 	mov	r3,r2
    343c:	103ff31e 	bne	r2,zero,340c <__cxa_allocate_exception+0x20>
    3440:	00030900 	call	3090 <_ZSt9terminatev>

00003444 <__cxa_free_exception>:
    3444:	00800074 	movhi	r2,1
    3448:	10a0f304 	addi	r2,r2,-31796
    344c:	10c00217 	ldw	r3,8(r2)
    3450:	213fef04 	addi	r4,r4,-68
    3454:	1900042e 	bgeu	r3,r4,3468 <__cxa_free_exception+0x24>
    3458:	10800317 	ldw	r2,12(r2)
    345c:	1887883a 	add	r3,r3,r2
    3460:	20c0012e 	bgeu	r4,r3,3468 <__cxa_free_exception+0x24>
    3464:	00032901 	jmpi	3290 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
    3468:	00041901 	jmpi	4190 <free>

0000346c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
    346c:	defffd04 	addi	sp,sp,-12
    3470:	dc000015 	stw	r16,0(sp)
    3474:	04000074 	movhi	r16,1
    3478:	dc400115 	stw	r17,4(sp)
    347c:	8420f304 	addi	r16,r16,-31796
    3480:	04424004 	movi	r17,2304
    3484:	01024004 	movi	r4,2304
    3488:	dfc00215 	stw	ra,8(sp)
    348c:	84400315 	stw	r17,12(r16)
    3490:	00041800 	call	4180 <malloc>
    3494:	80800215 	stw	r2,8(r16)
    3498:	10000826 	beq	r2,zero,34bc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x50>
    349c:	80800115 	stw	r2,4(r16)
    34a0:	14400015 	stw	r17,0(r2)
    34a4:	10000115 	stw	zero,4(r2)
    34a8:	dfc00217 	ldw	ra,8(sp)
    34ac:	dc400117 	ldw	r17,4(sp)
    34b0:	dc000017 	ldw	r16,0(sp)
    34b4:	dec00304 	addi	sp,sp,12
    34b8:	f800283a 	ret
    34bc:	00800074 	movhi	r2,1
    34c0:	1020f615 	stw	zero,-31784(r2)
    34c4:	00800074 	movhi	r2,1
    34c8:	1020f415 	stw	zero,-31792(r2)
    34cc:	003ff606 	br	34a8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x3c>

000034d0 <__cxa_call_terminate>:
    34d0:	defffe04 	addi	sp,sp,-8
    34d4:	dfc00115 	stw	ra,4(sp)
    34d8:	dc000015 	stw	r16,0(sp)
    34dc:	20000d26 	beq	r4,zero,3514 <__cxa_call_terminate+0x44>
    34e0:	2021883a 	mov	r16,r4
    34e4:	00035280 	call	3528 <__cxa_begin_catch>
    34e8:	80800017 	ldw	r2,0(r16)
    34ec:	81000117 	ldw	r4,4(r16)
    34f0:	00ef3574 	movhi	r3,48341
    34f4:	18f54004 	addi	r3,r3,-11008
    34f8:	016e2cb4 	movhi	r5,47282
    34fc:	296aaf04 	addi	r5,r5,-21828
    3500:	10c7883a 	add	r3,r2,r3
    3504:	1885803a 	cmpltu	r2,r3,r2
    3508:	2149883a 	add	r4,r4,r5
    350c:	1105883a 	add	r2,r2,r4
    3510:	10000126 	beq	r2,zero,3518 <__cxa_call_terminate+0x48>
    3514:	00030900 	call	3090 <_ZSt9terminatev>
    3518:	18c000a8 	cmpgeui	r3,r3,2
    351c:	183ffd1e 	bne	r3,zero,3514 <__cxa_call_terminate+0x44>
    3520:	813ff817 	ldw	r4,-32(r16)
    3524:	0002fc80 	call	2fc8 <_ZN10__cxxabiv111__terminateEPFvvE>

00003528 <__cxa_begin_catch>:
    3528:	defffe04 	addi	sp,sp,-8
    352c:	dc000015 	stw	r16,0(sp)
    3530:	dfc00115 	stw	ra,4(sp)
    3534:	2021883a 	mov	r16,r4
    3538:	00036b80 	call	36b8 <__cxa_get_globals>
    353c:	80c00017 	ldw	r3,0(r16)
    3540:	81800117 	ldw	r6,4(r16)
    3544:	012f3574 	movhi	r4,48341
    3548:	21354004 	addi	r4,r4,-11008
    354c:	016e2cb4 	movhi	r5,47282
    3550:	296aaf04 	addi	r5,r5,-21828
    3554:	1909883a 	add	r4,r3,r4
    3558:	314d883a 	add	r6,r6,r5
    355c:	20c7803a 	cmpltu	r3,r4,r3
    3560:	1987883a 	add	r3,r3,r6
    3564:	100b883a 	mov	r5,r2
    3568:	81bff504 	addi	r6,r16,-44
    356c:	10800017 	ldw	r2,0(r2)
    3570:	18000626 	beq	r3,zero,358c <__cxa_begin_catch+0x64>
    3574:	1000191e 	bne	r2,zero,35dc <__cxa_begin_catch+0xb4>
    3578:	29800015 	stw	r6,0(r5)
    357c:	dfc00117 	ldw	ra,4(sp)
    3580:	dc000017 	ldw	r16,0(sp)
    3584:	dec00204 	addi	sp,sp,8
    3588:	f800283a 	ret
    358c:	210000a8 	cmpgeui	r4,r4,2
    3590:	203ff81e 	bne	r4,zero,3574 <__cxa_begin_catch+0x4c>
    3594:	80fffa17 	ldw	r3,-24(r16)
    3598:	18000d16 	blt	r3,zero,35d0 <__cxa_begin_catch+0xa8>
    359c:	18c00044 	addi	r3,r3,1
    35a0:	29000117 	ldw	r4,4(r5)
    35a4:	80fffa15 	stw	r3,-24(r16)
    35a8:	20ffffc4 	addi	r3,r4,-1
    35ac:	28c00115 	stw	r3,4(r5)
    35b0:	11800226 	beq	r2,r6,35bc <__cxa_begin_catch+0x94>
    35b4:	80bff915 	stw	r2,-28(r16)
    35b8:	29800015 	stw	r6,0(r5)
    35bc:	80bfff17 	ldw	r2,-4(r16)
    35c0:	dfc00117 	ldw	ra,4(sp)
    35c4:	dc000017 	ldw	r16,0(sp)
    35c8:	dec00204 	addi	sp,sp,8
    35cc:	f800283a 	ret
    35d0:	01000044 	movi	r4,1
    35d4:	20c7c83a 	sub	r3,r4,r3
    35d8:	003ff106 	br	35a0 <__cxa_begin_catch+0x78>
    35dc:	00030900 	call	3090 <_ZSt9terminatev>

000035e0 <__cxa_end_catch>:
    35e0:	deffff04 	addi	sp,sp,-4
    35e4:	dfc00015 	stw	ra,0(sp)
    35e8:	00036ac0 	call	36ac <__cxa_get_globals_fast>
    35ec:	11000017 	ldw	r4,0(r2)
    35f0:	20001426 	beq	r4,zero,3644 <__cxa_end_catch+0x64>
    35f4:	20c00b17 	ldw	r3,44(r4)
    35f8:	21800c17 	ldw	r6,48(r4)
    35fc:	016f3574 	movhi	r5,48341
    3600:	29754004 	addi	r5,r5,-11008
    3604:	01ee2cb4 	movhi	r7,47282
    3608:	39eaaf04 	addi	r7,r7,-21828
    360c:	194b883a 	add	r5,r3,r5
    3610:	28c7803a 	cmpltu	r3,r5,r3
    3614:	31cd883a 	add	r6,r6,r7
    3618:	1987883a 	add	r3,r3,r6
    361c:	1800111e 	bne	r3,zero,3664 <__cxa_end_catch+0x84>
    3620:	294000a8 	cmpgeui	r5,r5,2
    3624:	28000f1e 	bne	r5,zero,3664 <__cxa_end_catch+0x84>
    3628:	20c00517 	ldw	r3,20(r4)
    362c:	18000816 	blt	r3,zero,3650 <__cxa_end_catch+0x70>
    3630:	18ffffc4 	addi	r3,r3,-1
    3634:	18001026 	beq	r3,zero,3678 <__cxa_end_catch+0x98>
    3638:	18bfffd8 	cmpnei	r2,r3,-1
    363c:	10001426 	beq	r2,zero,3690 <__cxa_end_catch+0xb0>
    3640:	20c00515 	stw	r3,20(r4)
    3644:	dfc00017 	ldw	ra,0(sp)
    3648:	dec00104 	addi	sp,sp,4
    364c:	f800283a 	ret
    3650:	18c00044 	addi	r3,r3,1
    3654:	183ffa1e 	bne	r3,zero,3640 <__cxa_end_catch+0x60>
    3658:	21400417 	ldw	r5,16(r4)
    365c:	11400015 	stw	r5,0(r2)
    3660:	003ff706 	br	3640 <__cxa_end_catch+0x60>
    3664:	21000b04 	addi	r4,r4,44
    3668:	10000015 	stw	zero,0(r2)
    366c:	dfc00017 	ldw	ra,0(sp)
    3670:	dec00104 	addi	sp,sp,4
    3674:	00040c81 	jmpi	40c8 <_Unwind_DeleteException>
    3678:	20c00417 	ldw	r3,16(r4)
    367c:	21000b04 	addi	r4,r4,44
    3680:	10c00015 	stw	r3,0(r2)
    3684:	dfc00017 	ldw	ra,0(sp)
    3688:	dec00104 	addi	sp,sp,4
    368c:	00040c81 	jmpi	40c8 <_Unwind_DeleteException>
    3690:	00030900 	call	3090 <_ZSt9terminatev>

00003694 <_ZNSt13bad_exceptionD1Ev>:
    3694:	f800283a 	ret

00003698 <_ZGTtNKSt13bad_exception4whatEv>:
    3698:	00800034 	movhi	r2,0
    369c:	1096f404 	addi	r2,r2,23504
    36a0:	f800283a 	ret

000036a4 <_ZNSt13bad_exceptionD0Ev>:
    36a4:	01400104 	movi	r5,4
    36a8:	0003c3c1 	jmpi	3c3c <_ZdlPvj>

000036ac <__cxa_get_globals_fast>:
    36ac:	00800074 	movhi	r2,1
    36b0:	10a0b404 	addi	r2,r2,-32048
    36b4:	f800283a 	ret

000036b8 <__cxa_get_globals>:
    36b8:	00800074 	movhi	r2,1
    36bc:	10a0b404 	addi	r2,r2,-32048
    36c0:	f800283a 	ret

000036c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    36c4:	00800034 	movhi	r2,0
    36c8:	10972a04 	addi	r2,r2,23720
    36cc:	20800015 	stw	r2,0(r4)
    36d0:	0003a281 	jmpi	3a28 <_ZN10__cxxabiv117__class_type_infoD1Ev>

000036d4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    36d4:	defffe04 	addi	sp,sp,-8
    36d8:	00800034 	movhi	r2,0
    36dc:	dc000015 	stw	r16,0(sp)
    36e0:	dfc00115 	stw	ra,4(sp)
    36e4:	10972a04 	addi	r2,r2,23720
    36e8:	20800015 	stw	r2,0(r4)
    36ec:	2021883a 	mov	r16,r4
    36f0:	0003a280 	call	3a28 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    36f4:	01400304 	movi	r5,12
    36f8:	8009883a 	mov	r4,r16
    36fc:	dfc00117 	ldw	ra,4(sp)
    3700:	dc000017 	ldw	r16,0(sp)
    3704:	dec00204 	addi	sp,sp,8
    3708:	0003c3c1 	jmpi	3c3c <_ZdlPvj>

0000370c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    370c:	defff504 	addi	sp,sp,-44
    3710:	dcc00415 	stw	r19,16(sp)
    3714:	38800117 	ldw	r2,4(r7)
    3718:	24c00117 	ldw	r19,4(r4)
    371c:	df000915 	stw	fp,36(sp)
    3720:	dd800715 	stw	r22,28(sp)
    3724:	dd400615 	stw	r21,24(sp)
    3728:	dd000515 	stw	r20,20(sp)
    372c:	dc000115 	stw	r16,4(sp)
    3730:	dfc00a15 	stw	ra,40(sp)
    3734:	ddc00815 	stw	r23,32(sp)
    3738:	dc800315 	stw	r18,12(sp)
    373c:	dc400215 	stw	r17,8(sp)
    3740:	dd000b17 	ldw	r20,44(sp)
    3744:	df000c17 	ldw	fp,48(sp)
    3748:	dd800d17 	ldw	r22,52(sp)
    374c:	dd400e17 	ldw	r21,56(sp)
    3750:	2821883a 	mov	r16,r5
    3754:	98800b26 	beq	r19,r2,3784 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
    3758:	9dc00007 	ldb	r23,0(r19)
    375c:	2025883a 	mov	r18,r4
    3760:	3823883a 	mov	r17,r7
    3764:	b8c00aa0 	cmpeqi	r3,r23,42
    3768:	18001a1e 	bne	r3,zero,37d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
    376c:	100b883a 	mov	r5,r2
    3770:	9809883a 	mov	r4,r19
    3774:	d9800015 	stw	r6,0(sp)
    3778:	000464c0 	call	464c <strcmp>
    377c:	d9800017 	ldw	r6,0(sp)
    3780:	1000141e 	bne	r2,zero,37d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
    3784:	ad000015 	stw	r20,0(r21)
    3788:	a9800115 	stw	r6,4(r21)
    378c:	80003416 	blt	r16,zero,3860 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
    3790:	a421883a 	add	r16,r20,r16
    3794:	b4003026 	beq	r22,r16,3858 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
    3798:	00800044 	movi	r2,1
    379c:	a8800315 	stw	r2,12(r21)
    37a0:	0005883a 	mov	r2,zero
    37a4:	dfc00a17 	ldw	ra,40(sp)
    37a8:	df000917 	ldw	fp,36(sp)
    37ac:	ddc00817 	ldw	r23,32(sp)
    37b0:	dd800717 	ldw	r22,28(sp)
    37b4:	dd400617 	ldw	r21,24(sp)
    37b8:	dd000517 	ldw	r20,20(sp)
    37bc:	dcc00417 	ldw	r19,16(sp)
    37c0:	dc800317 	ldw	r18,12(sp)
    37c4:	dc400217 	ldw	r17,8(sp)
    37c8:	dc000117 	ldw	r16,4(sp)
    37cc:	dec00b04 	addi	sp,sp,44
    37d0:	f800283a 	ret
    37d4:	a5801526 	beq	r20,r22,382c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
    37d8:	91000217 	ldw	r4,8(r18)
    37dc:	880f883a 	mov	r7,r17
    37e0:	800b883a 	mov	r5,r16
    37e4:	20800017 	ldw	r2,0(r4)
    37e8:	dd400e15 	stw	r21,56(sp)
    37ec:	dd800d15 	stw	r22,52(sp)
    37f0:	df000c15 	stw	fp,48(sp)
    37f4:	dd000b15 	stw	r20,44(sp)
    37f8:	10800717 	ldw	r2,28(r2)
    37fc:	dfc00a17 	ldw	ra,40(sp)
    3800:	df000917 	ldw	fp,36(sp)
    3804:	ddc00817 	ldw	r23,32(sp)
    3808:	dd800717 	ldw	r22,28(sp)
    380c:	dd400617 	ldw	r21,24(sp)
    3810:	dd000517 	ldw	r20,20(sp)
    3814:	dcc00417 	ldw	r19,16(sp)
    3818:	dc800317 	ldw	r18,12(sp)
    381c:	dc400217 	ldw	r17,8(sp)
    3820:	dc000117 	ldw	r16,4(sp)
    3824:	dec00b04 	addi	sp,sp,44
    3828:	1000683a 	jmp	r2
    382c:	e1400117 	ldw	r5,4(fp)
    3830:	99400726 	beq	r19,r5,3850 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x144>
    3834:	bdc00aa0 	cmpeqi	r23,r23,42
    3838:	b83fe71e 	bne	r23,zero,37d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    383c:	9809883a 	mov	r4,r19
    3840:	d9800015 	stw	r6,0(sp)
    3844:	000464c0 	call	464c <strcmp>
    3848:	d9800017 	ldw	r6,0(sp)
    384c:	103fe21e 	bne	r2,zero,37d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    3850:	a9800215 	stw	r6,8(r21)
    3854:	003fd206 	br	37a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
    3858:	00800184 	movi	r2,6
    385c:	003fcf06 	br	379c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
    3860:	843fff98 	cmpnei	r16,r16,-2
    3864:	803fce1e 	bne	r16,zero,37a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
    3868:	003fcb06 	br	3798 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>

0000386c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    386c:	defffa04 	addi	sp,sp,-24
    3870:	dc800415 	stw	r18,16(sp)
    3874:	dc800617 	ldw	r18,24(sp)
    3878:	dc400315 	stw	r17,12(sp)
    387c:	dc000215 	stw	r16,8(sp)
    3880:	dfc00515 	stw	ra,20(sp)
    3884:	2021883a 	mov	r16,r4
    3888:	2823883a 	mov	r17,r5
    388c:	91800b26 	beq	r18,r6,38bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    3890:	81000217 	ldw	r4,8(r16)
    3894:	880b883a 	mov	r5,r17
    3898:	20800017 	ldw	r2,0(r4)
    389c:	dc800615 	stw	r18,24(sp)
    38a0:	10800817 	ldw	r2,32(r2)
    38a4:	dfc00517 	ldw	ra,20(sp)
    38a8:	dc800417 	ldw	r18,16(sp)
    38ac:	dc400317 	ldw	r17,12(sp)
    38b0:	dc000217 	ldw	r16,8(sp)
    38b4:	dec00604 	addi	sp,sp,24
    38b8:	1000683a 	jmp	r2
    38bc:	21000117 	ldw	r4,4(r4)
    38c0:	39400117 	ldw	r5,4(r7)
    38c4:	21400926 	beq	r4,r5,38ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    38c8:	20800007 	ldb	r2,0(r4)
    38cc:	10800aa0 	cmpeqi	r2,r2,42
    38d0:	103fef1e 	bne	r2,zero,3890 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
    38d4:	d9c00115 	stw	r7,4(sp)
    38d8:	d9800015 	stw	r6,0(sp)
    38dc:	000464c0 	call	464c <strcmp>
    38e0:	d9800017 	ldw	r6,0(sp)
    38e4:	d9c00117 	ldw	r7,4(sp)
    38e8:	103fe91e 	bne	r2,zero,3890 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
    38ec:	00800184 	movi	r2,6
    38f0:	dfc00517 	ldw	ra,20(sp)
    38f4:	dc800417 	ldw	r18,16(sp)
    38f8:	dc400317 	ldw	r17,12(sp)
    38fc:	dc000217 	ldw	r16,8(sp)
    3900:	dec00604 	addi	sp,sp,24
    3904:	f800283a 	ret

00003908 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    3908:	defffb04 	addi	sp,sp,-20
    390c:	dcc00315 	stw	r19,12(sp)
    3910:	dc800215 	stw	r18,8(sp)
    3914:	dc400115 	stw	r17,4(sp)
    3918:	dc000015 	stw	r16,0(sp)
    391c:	dfc00415 	stw	ra,16(sp)
    3920:	2025883a 	mov	r18,r4
    3924:	2827883a 	mov	r19,r5
    3928:	3021883a 	mov	r16,r6
    392c:	3823883a 	mov	r17,r7
    3930:	0003a700 	call	3a70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    3934:	10c03fcc 	andi	r3,r2,255
    3938:	18000d1e 	bne	r3,zero,3970 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
    393c:	91000217 	ldw	r4,8(r18)
    3940:	880f883a 	mov	r7,r17
    3944:	800d883a 	mov	r6,r16
    3948:	20800017 	ldw	r2,0(r4)
    394c:	980b883a 	mov	r5,r19
    3950:	10800617 	ldw	r2,24(r2)
    3954:	dfc00417 	ldw	ra,16(sp)
    3958:	dcc00317 	ldw	r19,12(sp)
    395c:	dc800217 	ldw	r18,8(sp)
    3960:	dc400117 	ldw	r17,4(sp)
    3964:	dc000017 	ldw	r16,0(sp)
    3968:	dec00504 	addi	sp,sp,20
    396c:	1000683a 	jmp	r2
    3970:	dfc00417 	ldw	ra,16(sp)
    3974:	dcc00317 	ldw	r19,12(sp)
    3978:	dc800217 	ldw	r18,8(sp)
    397c:	dc400117 	ldw	r17,4(sp)
    3980:	dc000017 	ldw	r16,0(sp)
    3984:	dec00504 	addi	sp,sp,20
    3988:	f800283a 	ret

0000398c <_ZNSt9type_infoD1Ev>:
    398c:	f800283a 	ret

00003990 <_ZNKSt9type_info14__is_pointer_pEv>:
    3990:	0005883a 	mov	r2,zero
    3994:	f800283a 	ret

00003998 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    3998:	20800017 	ldw	r2,0(r4)
    399c:	defffa04 	addi	sp,sp,-24
    39a0:	dc000415 	stw	r16,16(sp)
    39a4:	10800617 	ldw	r2,24(r2)
    39a8:	3021883a 	mov	r16,r6
    39ac:	31800017 	ldw	r6,0(r6)
    39b0:	00c00404 	movi	r3,16
    39b4:	dfc00515 	stw	ra,20(sp)
    39b8:	d8000015 	stw	zero,0(sp)
    39bc:	d8000115 	stw	zero,4(sp)
    39c0:	d8c00215 	stw	r3,8(sp)
    39c4:	d8000315 	stw	zero,12(sp)
    39c8:	d80f883a 	mov	r7,sp
    39cc:	103ee83a 	callr	r2
    39d0:	d8800117 	ldw	r2,4(sp)
    39d4:	1080018c 	andi	r2,r2,6
    39d8:	10800198 	cmpnei	r2,r2,6
    39dc:	1000071e 	bne	r2,zero,39fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x64>
    39e0:	d8c00017 	ldw	r3,0(sp)
    39e4:	00800044 	movi	r2,1
    39e8:	80c00015 	stw	r3,0(r16)
    39ec:	dfc00517 	ldw	ra,20(sp)
    39f0:	dc000417 	ldw	r16,16(sp)
    39f4:	dec00604 	addi	sp,sp,24
    39f8:	f800283a 	ret
    39fc:	0005883a 	mov	r2,zero
    3a00:	dfc00517 	ldw	ra,20(sp)
    3a04:	dc000417 	ldw	r16,16(sp)
    3a08:	dec00604 	addi	sp,sp,24
    3a0c:	f800283a 	ret

00003a10 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    3a10:	d8c00017 	ldw	r3,0(sp)
    3a14:	00800044 	movi	r2,1
    3a18:	19800126 	beq	r3,r6,3a20 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    3a1c:	f800283a 	ret
    3a20:	00800184 	movi	r2,6
    3a24:	f800283a 	ret

00003a28 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    3a28:	00800034 	movhi	r2,0
    3a2c:	10974504 	addi	r2,r2,23828
    3a30:	20800015 	stw	r2,0(r4)
    3a34:	000398c1 	jmpi	398c <_ZNSt9type_infoD1Ev>

00003a38 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    3a38:	defffe04 	addi	sp,sp,-8
    3a3c:	00800034 	movhi	r2,0
    3a40:	dc000015 	stw	r16,0(sp)
    3a44:	dfc00115 	stw	ra,4(sp)
    3a48:	10974504 	addi	r2,r2,23828
    3a4c:	20800015 	stw	r2,0(r4)
    3a50:	2021883a 	mov	r16,r4
    3a54:	000398c0 	call	398c <_ZNSt9type_infoD1Ev>
    3a58:	01400204 	movi	r5,8
    3a5c:	8009883a 	mov	r4,r16
    3a60:	dfc00117 	ldw	ra,4(sp)
    3a64:	dc000017 	ldw	r16,0(sp)
    3a68:	dec00204 	addi	sp,sp,8
    3a6c:	0003c3c1 	jmpi	3c3c <_ZdlPvj>

00003a70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    3a70:	21000117 	ldw	r4,4(r4)
    3a74:	29400117 	ldw	r5,4(r5)
    3a78:	defffd04 	addi	sp,sp,-12
    3a7c:	dc400115 	stw	r17,4(sp)
    3a80:	dc000015 	stw	r16,0(sp)
    3a84:	dfc00215 	stw	ra,8(sp)
    3a88:	3023883a 	mov	r17,r6
    3a8c:	3821883a 	mov	r16,r7
    3a90:	21400526 	beq	r4,r5,3aa8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    3a94:	20800007 	ldb	r2,0(r4)
    3a98:	10800aa0 	cmpeqi	r2,r2,42
    3a9c:	10000d1e 	bne	r2,zero,3ad4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    3aa0:	000464c0 	call	464c <strcmp>
    3aa4:	10000b1e 	bne	r2,zero,3ad4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    3aa8:	00800204 	movi	r2,8
    3aac:	80800315 	stw	r2,12(r16)
    3ab0:	00800184 	movi	r2,6
    3ab4:	80800115 	stw	r2,4(r16)
    3ab8:	84400015 	stw	r17,0(r16)
    3abc:	00800044 	movi	r2,1
    3ac0:	dfc00217 	ldw	ra,8(sp)
    3ac4:	dc400117 	ldw	r17,4(sp)
    3ac8:	dc000017 	ldw	r16,0(sp)
    3acc:	dec00304 	addi	sp,sp,12
    3ad0:	f800283a 	ret
    3ad4:	0005883a 	mov	r2,zero
    3ad8:	003ff906 	br	3ac0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>

00003adc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    3adc:	defffb04 	addi	sp,sp,-20
    3ae0:	dc800315 	stw	r18,12(sp)
    3ae4:	dc400215 	stw	r17,8(sp)
    3ae8:	2025883a 	mov	r18,r4
    3aec:	2823883a 	mov	r17,r5
    3af0:	21000117 	ldw	r4,4(r4)
    3af4:	29400117 	ldw	r5,4(r5)
    3af8:	dfc00415 	stw	ra,16(sp)
    3afc:	dc000115 	stw	r16,4(sp)
    3b00:	21400826 	beq	r4,r5,3b24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x48>
    3b04:	20800007 	ldb	r2,0(r4)
    3b08:	3821883a 	mov	r16,r7
    3b0c:	10800aa0 	cmpeqi	r2,r2,42
    3b10:	10000b1e 	bne	r2,zero,3b40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    3b14:	d9800015 	stw	r6,0(sp)
    3b18:	000464c0 	call	464c <strcmp>
    3b1c:	d9800017 	ldw	r6,0(sp)
    3b20:	1000071e 	bne	r2,zero,3b40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    3b24:	00800044 	movi	r2,1
    3b28:	dfc00417 	ldw	ra,16(sp)
    3b2c:	dc800317 	ldw	r18,12(sp)
    3b30:	dc400217 	ldw	r17,8(sp)
    3b34:	dc000117 	ldw	r16,4(sp)
    3b38:	dec00504 	addi	sp,sp,20
    3b3c:	f800283a 	ret
    3b40:	81c00128 	cmpgeui	r7,r16,4
    3b44:	38000a1e 	bne	r7,zero,3b70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
    3b48:	88800017 	ldw	r2,0(r17)
    3b4c:	900b883a 	mov	r5,r18
    3b50:	8809883a 	mov	r4,r17
    3b54:	10800517 	ldw	r2,20(r2)
    3b58:	dfc00417 	ldw	ra,16(sp)
    3b5c:	dc800317 	ldw	r18,12(sp)
    3b60:	dc400217 	ldw	r17,8(sp)
    3b64:	dc000117 	ldw	r16,4(sp)
    3b68:	dec00504 	addi	sp,sp,20
    3b6c:	1000683a 	jmp	r2
    3b70:	0005883a 	mov	r2,zero
    3b74:	003fec06 	br	3b28 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4c>

00003b78 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    3b78:	defffa04 	addi	sp,sp,-24
    3b7c:	dc400315 	stw	r17,12(sp)
    3b80:	d8800817 	ldw	r2,32(sp)
    3b84:	dc400617 	ldw	r17,24(sp)
    3b88:	dc800415 	stw	r18,16(sp)
    3b8c:	dc000215 	stw	r16,8(sp)
    3b90:	dfc00515 	stw	ra,20(sp)
    3b94:	dc800917 	ldw	r18,36(sp)
    3b98:	21000117 	ldw	r4,4(r4)
    3b9c:	3021883a 	mov	r16,r6
    3ba0:	88801226 	beq	r17,r2,3bec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x74>
    3ba4:	39400117 	ldw	r5,4(r7)
    3ba8:	21400526 	beq	r4,r5,3bc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
    3bac:	20800007 	ldb	r2,0(r4)
    3bb0:	10800aa0 	cmpeqi	r2,r2,42
    3bb4:	1000061e 	bne	r2,zero,3bd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
    3bb8:	000464c0 	call	464c <strcmp>
    3bbc:	1000041e 	bne	r2,zero,3bd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
    3bc0:	00800044 	movi	r2,1
    3bc4:	94400015 	stw	r17,0(r18)
    3bc8:	94000115 	stw	r16,4(r18)
    3bcc:	90800315 	stw	r2,12(r18)
    3bd0:	0005883a 	mov	r2,zero
    3bd4:	dfc00517 	ldw	ra,20(sp)
    3bd8:	dc800417 	ldw	r18,16(sp)
    3bdc:	dc400317 	ldw	r17,12(sp)
    3be0:	dc000217 	ldw	r16,8(sp)
    3be4:	dec00604 	addi	sp,sp,24
    3be8:	f800283a 	ret
    3bec:	d8800717 	ldw	r2,28(sp)
    3bf0:	11400117 	ldw	r5,4(r2)
    3bf4:	21400f26 	beq	r4,r5,3c34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
    3bf8:	20800007 	ldb	r2,0(r4)
    3bfc:	10800aa0 	cmpeqi	r2,r2,42
    3c00:	1000091e 	bne	r2,zero,3c28 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    3c04:	d9c00115 	stw	r7,4(sp)
    3c08:	d9000015 	stw	r4,0(sp)
    3c0c:	000464c0 	call	464c <strcmp>
    3c10:	d9000017 	ldw	r4,0(sp)
    3c14:	d9c00117 	ldw	r7,4(sp)
    3c18:	10000626 	beq	r2,zero,3c34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
    3c1c:	39400117 	ldw	r5,4(r7)
    3c20:	217fe51e 	bne	r4,r5,3bb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x40>
    3c24:	003fe606 	br	3bc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
    3c28:	38800117 	ldw	r2,4(r7)
    3c2c:	20bfe81e 	bne	r4,r2,3bd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
    3c30:	003fe306 	br	3bc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
    3c34:	94000215 	stw	r16,8(r18)
    3c38:	003fe506 	br	3bd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>

00003c3c <_ZdlPvj>:
    3c3c:	0003c401 	jmpi	3c40 <_ZdlPv>

00003c40 <_ZdlPv>:
    3c40:	00041901 	jmpi	4190 <free>

00003c44 <_Unwind_ForcedUnwind_Phase2>:
    3c44:	28800017 	ldw	r2,0(r5)
    3c48:	defff504 	addi	sp,sp,-44
    3c4c:	dd400815 	stw	r21,32(sp)
    3c50:	dd000715 	stw	r20,28(sp)
    3c54:	dcc00615 	stw	r19,24(sp)
    3c58:	dc800515 	stw	r18,20(sp)
    3c5c:	dc400415 	stw	r17,16(sp)
    3c60:	dc000315 	stw	r16,12(sp)
    3c64:	dfc00a15 	stw	ra,40(sp)
    3c68:	dd800915 	stw	r22,36(sp)
    3c6c:	302b883a 	mov	r21,r6
    3c70:	24c00317 	ldw	r19,12(r4)
    3c74:	25000417 	ldw	r20,16(r4)
    3c78:	21800017 	ldw	r6,0(r4)
    3c7c:	21c00117 	ldw	r7,4(r4)
    3c80:	2823883a 	mov	r17,r5
    3c84:	2021883a 	mov	r16,r4
    3c88:	04800044 	movi	r18,1
    3c8c:	10001d26 	beq	r2,zero,3d04 <_Unwind_ForcedUnwind_Phase2+0xc0>
    3c90:	15800617 	ldw	r22,24(r2)
    3c94:	01400284 	movi	r5,10
    3c98:	01000044 	movi	r4,1
    3c9c:	dd000215 	stw	r20,8(sp)
    3ca0:	dc400115 	stw	r17,4(sp)
    3ca4:	dc000015 	stw	r16,0(sp)
    3ca8:	983ee83a 	callr	r19
    3cac:	01400284 	movi	r5,10
    3cb0:	01000044 	movi	r4,1
    3cb4:	10001a1e 	bne	r2,zero,3d20 <_Unwind_ForcedUnwind_Phase2+0xdc>
    3cb8:	81800017 	ldw	r6,0(r16)
    3cbc:	81c00117 	ldw	r7,4(r16)
    3cc0:	b0000926 	beq	r22,zero,3ce8 <_Unwind_ForcedUnwind_Phase2+0xa4>
    3cc4:	dc400115 	stw	r17,4(sp)
    3cc8:	dc000015 	stw	r16,0(sp)
    3ccc:	b03ee83a 	callr	r22
    3cd0:	10c001e0 	cmpeqi	r3,r2,7
    3cd4:	11000218 	cmpnei	r4,r2,8
    3cd8:	18001d1e 	bne	r3,zero,3d50 <_Unwind_ForcedUnwind_Phase2+0x10c>
    3cdc:	2000101e 	bne	r4,zero,3d20 <_Unwind_ForcedUnwind_Phase2+0xdc>
    3ce0:	81800017 	ldw	r6,0(r16)
    3ce4:	81c00117 	ldw	r7,4(r16)
    3ce8:	88800017 	ldw	r2,0(r17)
    3cec:	00c00074 	movhi	r3,1
    3cf0:	94800044 	addi	r18,r18,1
    3cf4:	10800017 	ldw	r2,0(r2)
    3cf8:	18a0b615 	stw	r2,-32040(r3)
    3cfc:	88800015 	stw	r2,0(r17)
    3d00:	103fe31e 	bne	r2,zero,3c90 <_Unwind_ForcedUnwind_Phase2+0x4c>
    3d04:	dd000215 	stw	r20,8(sp)
    3d08:	dc400115 	stw	r17,4(sp)
    3d0c:	dc000015 	stw	r16,0(sp)
    3d10:	01400684 	movi	r5,26
    3d14:	01000044 	movi	r4,1
    3d18:	983ee83a 	callr	r19
    3d1c:	10000b26 	beq	r2,zero,3d4c <_Unwind_ForcedUnwind_Phase2+0x108>
    3d20:	00800084 	movi	r2,2
    3d24:	dfc00a17 	ldw	ra,40(sp)
    3d28:	dd800917 	ldw	r22,36(sp)
    3d2c:	dd400817 	ldw	r21,32(sp)
    3d30:	dd000717 	ldw	r20,28(sp)
    3d34:	dcc00617 	ldw	r19,24(sp)
    3d38:	dc800517 	ldw	r18,20(sp)
    3d3c:	dc400417 	ldw	r17,16(sp)
    3d40:	dc000317 	ldw	r16,12(sp)
    3d44:	dec00b04 	addi	sp,sp,44
    3d48:	f800283a 	ret
    3d4c:	00800144 	movi	r2,5
    3d50:	ac800015 	stw	r18,0(r21)
    3d54:	003ff306 	br	3d24 <_Unwind_ForcedUnwind_Phase2+0xe0>

00003d58 <_Unwind_RaiseException_Phase2>:
    3d58:	28800017 	ldw	r2,0(r5)
    3d5c:	10002f26 	beq	r2,zero,3e1c <_Unwind_RaiseException_Phase2+0xc4>
    3d60:	defff804 	addi	sp,sp,-32
    3d64:	dcc00515 	stw	r19,20(sp)
    3d68:	dc800415 	stw	r18,16(sp)
    3d6c:	dc400315 	stw	r17,12(sp)
    3d70:	dc000215 	stw	r16,8(sp)
    3d74:	dfc00715 	stw	ra,28(sp)
    3d78:	dd000615 	stw	r20,24(sp)
    3d7c:	2823883a 	mov	r17,r5
    3d80:	2021883a 	mov	r16,r4
    3d84:	3027883a 	mov	r19,r6
    3d88:	04800044 	movi	r18,1
    3d8c:	00001306 	br	3ddc <_Unwind_RaiseException_Phase2+0x84>
    3d90:	18000e26 	beq	r3,zero,3dcc <_Unwind_RaiseException_Phase2+0x74>
    3d94:	01400084 	movi	r5,2
    3d98:	0029883a 	mov	r20,zero
    3d9c:	81800017 	ldw	r6,0(r16)
    3da0:	81c00117 	ldw	r7,4(r16)
    3da4:	01000044 	movi	r4,1
    3da8:	dc400115 	stw	r17,4(sp)
    3dac:	dc000015 	stw	r16,0(sp)
    3db0:	183ee83a 	callr	r3
    3db4:	10c001e0 	cmpeqi	r3,r2,7
    3db8:	18001a1e 	bne	r3,zero,3e24 <_Unwind_RaiseException_Phase2+0xcc>
    3dbc:	10800218 	cmpnei	r2,r2,8
    3dc0:	10000d1e 	bne	r2,zero,3df8 <_Unwind_RaiseException_Phase2+0xa0>
    3dc4:	a000191e 	bne	r20,zero,3e2c <_Unwind_RaiseException_Phase2+0xd4>
    3dc8:	88800017 	ldw	r2,0(r17)
    3dcc:	10800017 	ldw	r2,0(r2)
    3dd0:	94800044 	addi	r18,r18,1
    3dd4:	88800015 	stw	r2,0(r17)
    3dd8:	10000726 	beq	r2,zero,3df8 <_Unwind_RaiseException_Phase2+0xa0>
    3ddc:	81000417 	ldw	r4,16(r16)
    3de0:	10c00617 	ldw	r3,24(r2)
    3de4:	113fea1e 	bne	r2,r4,3d90 <_Unwind_RaiseException_Phase2+0x38>
    3de8:	18001026 	beq	r3,zero,3e2c <_Unwind_RaiseException_Phase2+0xd4>
    3dec:	01400184 	movi	r5,6
    3df0:	05000104 	movi	r20,4
    3df4:	003fe906 	br	3d9c <_Unwind_RaiseException_Phase2+0x44>
    3df8:	00800084 	movi	r2,2
    3dfc:	dfc00717 	ldw	ra,28(sp)
    3e00:	dd000617 	ldw	r20,24(sp)
    3e04:	dcc00517 	ldw	r19,20(sp)
    3e08:	dc800417 	ldw	r18,16(sp)
    3e0c:	dc400317 	ldw	r17,12(sp)
    3e10:	dc000217 	ldw	r16,8(sp)
    3e14:	dec00804 	addi	sp,sp,32
    3e18:	f800283a 	ret
    3e1c:	00800084 	movi	r2,2
    3e20:	f800283a 	ret
    3e24:	9c800015 	stw	r18,0(r19)
    3e28:	003ff406 	br	3dfc <_Unwind_RaiseException_Phase2+0xa4>
    3e2c:	00041680 	call	4168 <abort>

00003e30 <uw_install_context.constprop.0.isra.0>:
    3e30:	deffff04 	addi	sp,sp,-4
    3e34:	df000015 	stw	fp,0(sp)
    3e38:	20800804 	addi	r2,r4,32
    3e3c:	00c00074 	movhi	r3,1
    3e40:	1920b615 	stw	r4,-32040(r3)
    3e44:	d839883a 	mov	fp,sp
    3e48:	20c00917 	ldw	r3,36(r4)
    3e4c:	21000817 	ldw	r4,32(r4)
    3e50:	16c00217 	ldw	sp,8(r2)
    3e54:	2039883a 	mov	fp,r4
    3e58:	1800683a 	jmp	r3

00003e5c <_Unwind_SjLj_Register>:
    3e5c:	00800074 	movhi	r2,1
    3e60:	10a0b617 	ldw	r2,-32040(r2)
    3e64:	20800015 	stw	r2,0(r4)
    3e68:	00800074 	movhi	r2,1
    3e6c:	1120b615 	stw	r4,-32040(r2)
    3e70:	f800283a 	ret

00003e74 <_Unwind_SjLj_Unregister>:
    3e74:	20c00017 	ldw	r3,0(r4)
    3e78:	00800074 	movhi	r2,1
    3e7c:	10e0b615 	stw	r3,-32040(r2)
    3e80:	f800283a 	ret

00003e84 <_Unwind_GetGR>:
    3e84:	29400084 	addi	r5,r5,2
    3e88:	20800017 	ldw	r2,0(r4)
    3e8c:	280a90ba 	slli	r5,r5,2
    3e90:	114b883a 	add	r5,r2,r5
    3e94:	28800017 	ldw	r2,0(r5)
    3e98:	f800283a 	ret

00003e9c <_Unwind_GetCFA>:
    3e9c:	20800017 	ldw	r2,0(r4)
    3ea0:	10000226 	beq	r2,zero,3eac <_Unwind_GetCFA+0x10>
    3ea4:	10800a17 	ldw	r2,40(r2)
    3ea8:	f800283a 	ret
    3eac:	0005883a 	mov	r2,zero
    3eb0:	f800283a 	ret

00003eb4 <_Unwind_SetGR>:
    3eb4:	29400084 	addi	r5,r5,2
    3eb8:	20800017 	ldw	r2,0(r4)
    3ebc:	280a90ba 	slli	r5,r5,2
    3ec0:	114b883a 	add	r5,r2,r5
    3ec4:	29800015 	stw	r6,0(r5)
    3ec8:	f800283a 	ret

00003ecc <_Unwind_GetIP>:
    3ecc:	20800017 	ldw	r2,0(r4)
    3ed0:	10800117 	ldw	r2,4(r2)
    3ed4:	10800044 	addi	r2,r2,1
    3ed8:	f800283a 	ret

00003edc <_Unwind_GetIPInfo>:
    3edc:	20800017 	ldw	r2,0(r4)
    3ee0:	28000015 	stw	zero,0(r5)
    3ee4:	10000326 	beq	r2,zero,3ef4 <_Unwind_GetIPInfo+0x18>
    3ee8:	10800117 	ldw	r2,4(r2)
    3eec:	10800044 	addi	r2,r2,1
    3ef0:	f800283a 	ret
    3ef4:	0005883a 	mov	r2,zero
    3ef8:	f800283a 	ret

00003efc <_Unwind_SetIP>:
    3efc:	20800017 	ldw	r2,0(r4)
    3f00:	297fffc4 	addi	r5,r5,-1
    3f04:	11400115 	stw	r5,4(r2)
    3f08:	f800283a 	ret

00003f0c <_Unwind_GetLanguageSpecificData>:
    3f0c:	20800017 	ldw	r2,0(r4)
    3f10:	10800717 	ldw	r2,28(r2)
    3f14:	f800283a 	ret

00003f18 <_Unwind_GetRegionStart>:
    3f18:	0005883a 	mov	r2,zero
    3f1c:	f800283a 	ret

00003f20 <_Unwind_FindEnclosingFunction>:
    3f20:	0005883a 	mov	r2,zero
    3f24:	f800283a 	ret

00003f28 <_Unwind_GetDataRelBase>:
    3f28:	0005883a 	mov	r2,zero
    3f2c:	f800283a 	ret

00003f30 <_Unwind_GetTextRelBase>:
    3f30:	0005883a 	mov	r2,zero
    3f34:	f800283a 	ret

00003f38 <_Unwind_SjLj_RaiseException>:
    3f38:	defff804 	addi	sp,sp,-32
    3f3c:	00800074 	movhi	r2,1
    3f40:	dc400515 	stw	r17,20(sp)
    3f44:	1460b617 	ldw	r17,-32040(r2)
    3f48:	dfc00715 	stw	ra,28(sp)
    3f4c:	dc800615 	stw	r18,24(sp)
    3f50:	dc000415 	stw	r16,16(sp)
    3f54:	dc400215 	stw	r17,8(sp)
    3f58:	88001426 	beq	r17,zero,3fac <_Unwind_SjLj_RaiseException+0x74>
    3f5c:	2021883a 	mov	r16,r4
    3f60:	8805883a 	mov	r2,r17
    3f64:	dc800204 	addi	r18,sp,8
    3f68:	10800617 	ldw	r2,24(r2)
    3f6c:	10000b26 	beq	r2,zero,3f9c <_Unwind_SjLj_RaiseException+0x64>
    3f70:	81800017 	ldw	r6,0(r16)
    3f74:	81c00117 	ldw	r7,4(r16)
    3f78:	01400044 	movi	r5,1
    3f7c:	dc800115 	stw	r18,4(sp)
    3f80:	dc000015 	stw	r16,0(sp)
    3f84:	01000044 	movi	r4,1
    3f88:	103ee83a 	callr	r2
    3f8c:	10c001a0 	cmpeqi	r3,r2,6
    3f90:	18000d1e 	bne	r3,zero,3fc8 <_Unwind_SjLj_RaiseException+0x90>
    3f94:	10800218 	cmpnei	r2,r2,8
    3f98:	1000171e 	bne	r2,zero,3ff8 <_Unwind_SjLj_RaiseException+0xc0>
    3f9c:	d8800217 	ldw	r2,8(sp)
    3fa0:	10800017 	ldw	r2,0(r2)
    3fa4:	d8800215 	stw	r2,8(sp)
    3fa8:	103fef1e 	bne	r2,zero,3f68 <_Unwind_SjLj_RaiseException+0x30>
    3fac:	00800144 	movi	r2,5
    3fb0:	dfc00717 	ldw	ra,28(sp)
    3fb4:	dc800617 	ldw	r18,24(sp)
    3fb8:	dc400517 	ldw	r17,20(sp)
    3fbc:	dc000417 	ldw	r16,16(sp)
    3fc0:	dec00804 	addi	sp,sp,32
    3fc4:	f800283a 	ret
    3fc8:	d8800217 	ldw	r2,8(sp)
    3fcc:	80000315 	stw	zero,12(r16)
    3fd0:	d9800304 	addi	r6,sp,12
    3fd4:	80800415 	stw	r2,16(r16)
    3fd8:	900b883a 	mov	r5,r18
    3fdc:	8009883a 	mov	r4,r16
    3fe0:	dc400215 	stw	r17,8(sp)
    3fe4:	0003d580 	call	3d58 <_Unwind_RaiseException_Phase2>
    3fe8:	10c001d8 	cmpnei	r3,r2,7
    3fec:	183ff01e 	bne	r3,zero,3fb0 <_Unwind_SjLj_RaiseException+0x78>
    3ff0:	d9000217 	ldw	r4,8(sp)
    3ff4:	0003e300 	call	3e30 <uw_install_context.constprop.0.isra.0>
    3ff8:	008000c4 	movi	r2,3
    3ffc:	003fec06 	br	3fb0 <_Unwind_SjLj_RaiseException+0x78>

00004000 <_Unwind_SjLj_ForcedUnwind>:
    4000:	00800074 	movhi	r2,1
    4004:	defffd04 	addi	sp,sp,-12
    4008:	10e0b617 	ldw	r3,-32040(r2)
    400c:	dfc00215 	stw	ra,8(sp)
    4010:	21400315 	stw	r5,12(r4)
    4014:	21800415 	stw	r6,16(r4)
    4018:	d80b883a 	mov	r5,sp
    401c:	d9800104 	addi	r6,sp,4
    4020:	d8c00015 	stw	r3,0(sp)
    4024:	0003c440 	call	3c44 <_Unwind_ForcedUnwind_Phase2>
    4028:	10c001e0 	cmpeqi	r3,r2,7
    402c:	1800031e 	bne	r3,zero,403c <_Unwind_SjLj_ForcedUnwind+0x3c>
    4030:	dfc00217 	ldw	ra,8(sp)
    4034:	dec00304 	addi	sp,sp,12
    4038:	f800283a 	ret
    403c:	d9000017 	ldw	r4,0(sp)
    4040:	0003e300 	call	3e30 <uw_install_context.constprop.0.isra.0>

00004044 <_Unwind_SjLj_Resume>:
    4044:	00800074 	movhi	r2,1
    4048:	10e0b617 	ldw	r3,-32040(r2)
    404c:	20800317 	ldw	r2,12(r4)
    4050:	defffd04 	addi	sp,sp,-12
    4054:	dfc00215 	stw	ra,8(sp)
    4058:	d8c00015 	stw	r3,0(sp)
    405c:	d9800104 	addi	r6,sp,4
    4060:	d80b883a 	mov	r5,sp
    4064:	1000051e 	bne	r2,zero,407c <_Unwind_SjLj_Resume+0x38>
    4068:	0003d580 	call	3d58 <_Unwind_RaiseException_Phase2>
    406c:	108001e0 	cmpeqi	r2,r2,7
    4070:	10000426 	beq	r2,zero,4084 <_Unwind_SjLj_Resume+0x40>
    4074:	d9000017 	ldw	r4,0(sp)
    4078:	0003e300 	call	3e30 <uw_install_context.constprop.0.isra.0>
    407c:	0003c440 	call	3c44 <_Unwind_ForcedUnwind_Phase2>
    4080:	003ffa06 	br	406c <_Unwind_SjLj_Resume+0x28>
    4084:	00041680 	call	4168 <abort>

00004088 <_Unwind_SjLj_Resume_or_Rethrow>:
    4088:	20800317 	ldw	r2,12(r4)
    408c:	1000011e 	bne	r2,zero,4094 <_Unwind_SjLj_Resume_or_Rethrow+0xc>
    4090:	0003f381 	jmpi	3f38 <_Unwind_SjLj_RaiseException>
    4094:	00800074 	movhi	r2,1
    4098:	10a0b617 	ldw	r2,-32040(r2)
    409c:	defffd04 	addi	sp,sp,-12
    40a0:	d9800104 	addi	r6,sp,4
    40a4:	d80b883a 	mov	r5,sp
    40a8:	dfc00215 	stw	ra,8(sp)
    40ac:	d8800015 	stw	r2,0(sp)
    40b0:	0003c440 	call	3c44 <_Unwind_ForcedUnwind_Phase2>
    40b4:	108001e0 	cmpeqi	r2,r2,7
    40b8:	10000226 	beq	r2,zero,40c4 <_Unwind_SjLj_Resume_or_Rethrow+0x3c>
    40bc:	d9000017 	ldw	r4,0(sp)
    40c0:	0003e300 	call	3e30 <uw_install_context.constprop.0.isra.0>
    40c4:	00041680 	call	4168 <abort>

000040c8 <_Unwind_DeleteException>:
    40c8:	20800217 	ldw	r2,8(r4)
    40cc:	200b883a 	mov	r5,r4
    40d0:	10000226 	beq	r2,zero,40dc <_Unwind_DeleteException+0x14>
    40d4:	01000044 	movi	r4,1
    40d8:	1000683a 	jmp	r2
    40dc:	f800283a 	ret

000040e0 <_Unwind_Backtrace>:
    40e0:	00800074 	movhi	r2,1
    40e4:	10a0b617 	ldw	r2,-32040(r2)
    40e8:	defffb04 	addi	sp,sp,-20
    40ec:	dc800315 	stw	r18,12(sp)
    40f0:	dc400215 	stw	r17,8(sp)
    40f4:	dc000115 	stw	r16,4(sp)
    40f8:	dfc00415 	stw	ra,16(sp)
    40fc:	d8800015 	stw	r2,0(sp)
    4100:	2021883a 	mov	r16,r4
    4104:	2823883a 	mov	r17,r5
    4108:	d825883a 	mov	r18,sp
    410c:	10000826 	beq	r2,zero,4130 <_Unwind_Backtrace+0x50>
    4110:	880b883a 	mov	r5,r17
    4114:	9009883a 	mov	r4,r18
    4118:	803ee83a 	callr	r16
    411c:	1000101e 	bne	r2,zero,4160 <_Unwind_Backtrace+0x80>
    4120:	d8800017 	ldw	r2,0(sp)
    4124:	10800017 	ldw	r2,0(r2)
    4128:	d8800015 	stw	r2,0(sp)
    412c:	103ff81e 	bne	r2,zero,4110 <_Unwind_Backtrace+0x30>
    4130:	880b883a 	mov	r5,r17
    4134:	9009883a 	mov	r4,r18
    4138:	803ee83a 	callr	r16
    413c:	00c00144 	movi	r3,5
    4140:	1000071e 	bne	r2,zero,4160 <_Unwind_Backtrace+0x80>
    4144:	1805883a 	mov	r2,r3
    4148:	dfc00417 	ldw	ra,16(sp)
    414c:	dc800317 	ldw	r18,12(sp)
    4150:	dc400217 	ldw	r17,8(sp)
    4154:	dc000117 	ldw	r16,4(sp)
    4158:	dec00504 	addi	sp,sp,20
    415c:	f800283a 	ret
    4160:	00c000c4 	movi	r3,3
    4164:	003ff706 	br	4144 <_Unwind_Backtrace+0x64>

00004168 <abort>:
    4168:	deffff04 	addi	sp,sp,-4
    416c:	01000184 	movi	r4,6
    4170:	dfc00015 	stw	ra,0(sp)
    4174:	00045ec0 	call	45ec <raise>
    4178:	01000044 	movi	r4,1
    417c:	000000c0 	call	c <_exit>

00004180 <malloc>:
    4180:	00800074 	movhi	r2,1
    4184:	200b883a 	mov	r5,r4
    4188:	11209c17 	ldw	r4,-32144(r2)
    418c:	00043481 	jmpi	4348 <_malloc_r>

00004190 <free>:
    4190:	00800074 	movhi	r2,1
    4194:	200b883a 	mov	r5,r4
    4198:	11209c17 	ldw	r4,-32144(r2)
    419c:	00042481 	jmpi	4248 <_free_r>

000041a0 <memcpy>:
    41a0:	2005883a 	mov	r2,r4
    41a4:	0007883a 	mov	r3,zero
    41a8:	30c0011e 	bne	r6,r3,41b0 <memcpy+0x10>
    41ac:	f800283a 	ret
    41b0:	28cf883a 	add	r7,r5,r3
    41b4:	39c00003 	ldbu	r7,0(r7)
    41b8:	10c9883a 	add	r4,r2,r3
    41bc:	18c00044 	addi	r3,r3,1
    41c0:	21c00005 	stb	r7,0(r4)
    41c4:	003ff806 	br	41a8 <memcpy+0x8>

000041c8 <memmove>:
    41c8:	2005883a 	mov	r2,r4
    41cc:	2900142e 	bgeu	r5,r4,4220 <memmove+0x58>
    41d0:	298f883a 	add	r7,r5,r6
    41d4:	21c0122e 	bgeu	r4,r7,4220 <memmove+0x58>
    41d8:	018a303a 	nor	r5,zero,r6
    41dc:	0007883a 	mov	r3,zero
    41e0:	18ffffc4 	addi	r3,r3,-1
    41e4:	28c0011e 	bne	r5,r3,41ec <memmove+0x24>
    41e8:	f800283a 	ret
    41ec:	38c9883a 	add	r4,r7,r3
    41f0:	22000003 	ldbu	r8,0(r4)
    41f4:	30c9883a 	add	r4,r6,r3
    41f8:	1109883a 	add	r4,r2,r4
    41fc:	22000005 	stb	r8,0(r4)
    4200:	003ff706 	br	41e0 <memmove+0x18>
    4204:	28c9883a 	add	r4,r5,r3
    4208:	21c00003 	ldbu	r7,0(r4)
    420c:	10c9883a 	add	r4,r2,r3
    4210:	18c00044 	addi	r3,r3,1
    4214:	21c00005 	stb	r7,0(r4)
    4218:	30fffa1e 	bne	r6,r3,4204 <memmove+0x3c>
    421c:	f800283a 	ret
    4220:	0007883a 	mov	r3,zero
    4224:	003ffc06 	br	4218 <memmove+0x50>

00004228 <memset>:
    4228:	2005883a 	mov	r2,r4
    422c:	218d883a 	add	r6,r4,r6
    4230:	2007883a 	mov	r3,r4
    4234:	1980011e 	bne	r3,r6,423c <memset+0x14>
    4238:	f800283a 	ret
    423c:	18c00044 	addi	r3,r3,1
    4240:	197fffc5 	stb	r5,-1(r3)
    4244:	003ffb06 	br	4234 <memset+0xc>

00004248 <_free_r>:
    4248:	28003e26 	beq	r5,zero,4344 <_free_r+0xfc>
    424c:	28bfff17 	ldw	r2,-4(r5)
    4250:	defffd04 	addi	sp,sp,-12
    4254:	dc000115 	stw	r16,4(sp)
    4258:	dfc00215 	stw	ra,8(sp)
    425c:	2c3fff04 	addi	r16,r5,-4
    4260:	1000010e 	bge	r2,zero,4268 <_free_r+0x20>
    4264:	80a1883a 	add	r16,r16,r2
    4268:	d9000015 	stw	r4,0(sp)
    426c:	00050b80 	call	50b8 <__malloc_lock>
    4270:	00800074 	movhi	r2,1
    4274:	10a0b817 	ldw	r2,-32032(r2)
    4278:	d9000017 	ldw	r4,0(sp)
    427c:	1000071e 	bne	r2,zero,429c <_free_r+0x54>
    4280:	80000115 	stw	zero,4(r16)
    4284:	00800074 	movhi	r2,1
    4288:	1420b815 	stw	r16,-32032(r2)
    428c:	dfc00217 	ldw	ra,8(sp)
    4290:	dc000117 	ldw	r16,4(sp)
    4294:	dec00304 	addi	sp,sp,12
    4298:	00050bc1 	jmpi	50bc <__malloc_unlock>
    429c:	8080092e 	bgeu	r16,r2,42c4 <_free_r+0x7c>
    42a0:	81400017 	ldw	r5,0(r16)
    42a4:	8147883a 	add	r3,r16,r5
    42a8:	10c0041e 	bne	r2,r3,42bc <_free_r+0x74>
    42ac:	10c00017 	ldw	r3,0(r2)
    42b0:	10800117 	ldw	r2,4(r2)
    42b4:	1947883a 	add	r3,r3,r5
    42b8:	80c00015 	stw	r3,0(r16)
    42bc:	80800115 	stw	r2,4(r16)
    42c0:	003ff006 	br	4284 <_free_r+0x3c>
    42c4:	1007883a 	mov	r3,r2
    42c8:	10800117 	ldw	r2,4(r2)
    42cc:	10000126 	beq	r2,zero,42d4 <_free_r+0x8c>
    42d0:	80bffc2e 	bgeu	r16,r2,42c4 <_free_r+0x7c>
    42d4:	19400017 	ldw	r5,0(r3)
    42d8:	194d883a 	add	r6,r3,r5
    42dc:	34000b1e 	bne	r6,r16,430c <_free_r+0xc4>
    42e0:	81800017 	ldw	r6,0(r16)
    42e4:	298b883a 	add	r5,r5,r6
    42e8:	19400015 	stw	r5,0(r3)
    42ec:	194d883a 	add	r6,r3,r5
    42f0:	11bfe61e 	bne	r2,r6,428c <_free_r+0x44>
    42f4:	11800017 	ldw	r6,0(r2)
    42f8:	10800117 	ldw	r2,4(r2)
    42fc:	314b883a 	add	r5,r6,r5
    4300:	19400015 	stw	r5,0(r3)
    4304:	18800115 	stw	r2,4(r3)
    4308:	003fe006 	br	428c <_free_r+0x44>
    430c:	8180032e 	bgeu	r16,r6,431c <_free_r+0xd4>
    4310:	00800304 	movi	r2,12
    4314:	20800015 	stw	r2,0(r4)
    4318:	003fdc06 	br	428c <_free_r+0x44>
    431c:	81800017 	ldw	r6,0(r16)
    4320:	818b883a 	add	r5,r16,r6
    4324:	1140041e 	bne	r2,r5,4338 <_free_r+0xf0>
    4328:	11400017 	ldw	r5,0(r2)
    432c:	10800117 	ldw	r2,4(r2)
    4330:	298b883a 	add	r5,r5,r6
    4334:	81400015 	stw	r5,0(r16)
    4338:	80800115 	stw	r2,4(r16)
    433c:	1c000115 	stw	r16,4(r3)
    4340:	003fd206 	br	428c <_free_r+0x44>
    4344:	f800283a 	ret

00004348 <_malloc_r>:
    4348:	defffc04 	addi	sp,sp,-16
    434c:	00bfff04 	movi	r2,-4
    4350:	dc400115 	stw	r17,4(sp)
    4354:	2c4000c4 	addi	r17,r5,3
    4358:	88a2703a 	and	r17,r17,r2
    435c:	8c400204 	addi	r17,r17,8
    4360:	dc800215 	stw	r18,8(sp)
    4364:	dfc00315 	stw	ra,12(sp)
    4368:	dc000015 	stw	r16,0(sp)
    436c:	88800328 	cmpgeui	r2,r17,12
    4370:	2025883a 	mov	r18,r4
    4374:	10001a1e 	bne	r2,zero,43e0 <_malloc_r+0x98>
    4378:	04400304 	movi	r17,12
    437c:	89401936 	bltu	r17,r5,43e4 <_malloc_r+0x9c>
    4380:	9009883a 	mov	r4,r18
    4384:	00050b80 	call	50b8 <__malloc_lock>
    4388:	00800074 	movhi	r2,1
    438c:	10e0b817 	ldw	r3,-32032(r2)
    4390:	1821883a 	mov	r16,r3
    4394:	80001c1e 	bne	r16,zero,4408 <_malloc_r+0xc0>
    4398:	00800074 	movhi	r2,1
    439c:	10a0b717 	ldw	r2,-32036(r2)
    43a0:	1000051e 	bne	r2,zero,43b8 <_malloc_r+0x70>
    43a4:	000b883a 	mov	r5,zero
    43a8:	9009883a 	mov	r4,r18
    43ac:	00044f00 	call	44f0 <_sbrk_r>
    43b0:	00c00074 	movhi	r3,1
    43b4:	18a0b715 	stw	r2,-32036(r3)
    43b8:	880b883a 	mov	r5,r17
    43bc:	9009883a 	mov	r4,r18
    43c0:	00044f00 	call	44f0 <_sbrk_r>
    43c4:	10ffffd8 	cmpnei	r3,r2,-1
    43c8:	18002d1e 	bne	r3,zero,4480 <_malloc_r+0x138>
    43cc:	00800304 	movi	r2,12
    43d0:	90800015 	stw	r2,0(r18)
    43d4:	9009883a 	mov	r4,r18
    43d8:	00050bc0 	call	50bc <__malloc_unlock>
    43dc:	00000306 	br	43ec <_malloc_r+0xa4>
    43e0:	883fe60e 	bge	r17,zero,437c <_malloc_r+0x34>
    43e4:	00800304 	movi	r2,12
    43e8:	90800015 	stw	r2,0(r18)
    43ec:	0005883a 	mov	r2,zero
    43f0:	dfc00317 	ldw	ra,12(sp)
    43f4:	dc800217 	ldw	r18,8(sp)
    43f8:	dc400117 	ldw	r17,4(sp)
    43fc:	dc000017 	ldw	r16,0(sp)
    4400:	dec00404 	addi	sp,sp,16
    4404:	f800283a 	ret
    4408:	80800017 	ldw	r2,0(r16)
    440c:	1445c83a 	sub	r2,r2,r17
    4410:	10001816 	blt	r2,zero,4474 <_malloc_r+0x12c>
    4414:	11000330 	cmpltui	r4,r2,12
    4418:	2000041e 	bne	r4,zero,442c <_malloc_r+0xe4>
    441c:	80800015 	stw	r2,0(r16)
    4420:	80a1883a 	add	r16,r16,r2
    4424:	84400015 	stw	r17,0(r16)
    4428:	00000406 	br	443c <_malloc_r+0xf4>
    442c:	80800117 	ldw	r2,4(r16)
    4430:	1c000e1e 	bne	r3,r16,446c <_malloc_r+0x124>
    4434:	00c00074 	movhi	r3,1
    4438:	18a0b815 	stw	r2,-32032(r3)
    443c:	9009883a 	mov	r4,r18
    4440:	00050bc0 	call	50bc <__malloc_unlock>
    4444:	013ffe04 	movi	r4,-8
    4448:	808002c4 	addi	r2,r16,11
    444c:	80c00104 	addi	r3,r16,4
    4450:	1104703a 	and	r2,r2,r4
    4454:	10c9c83a 	sub	r4,r2,r3
    4458:	10ffe526 	beq	r2,r3,43f0 <_malloc_r+0xa8>
    445c:	8121883a 	add	r16,r16,r4
    4460:	1887c83a 	sub	r3,r3,r2
    4464:	80c00015 	stw	r3,0(r16)
    4468:	003fe106 	br	43f0 <_malloc_r+0xa8>
    446c:	18800115 	stw	r2,4(r3)
    4470:	003ff206 	br	443c <_malloc_r+0xf4>
    4474:	8007883a 	mov	r3,r16
    4478:	84000117 	ldw	r16,4(r16)
    447c:	003fc506 	br	4394 <_malloc_r+0x4c>
    4480:	140000c4 	addi	r16,r2,3
    4484:	00ffff04 	movi	r3,-4
    4488:	80e0703a 	and	r16,r16,r3
    448c:	143fe526 	beq	r2,r16,4424 <_malloc_r+0xdc>
    4490:	808bc83a 	sub	r5,r16,r2
    4494:	9009883a 	mov	r4,r18
    4498:	00044f00 	call	44f0 <_sbrk_r>
    449c:	10bfffe0 	cmpeqi	r2,r2,-1
    44a0:	103fe026 	beq	r2,zero,4424 <_malloc_r+0xdc>
    44a4:	003fc906 	br	43cc <_malloc_r+0x84>

000044a8 <printf>:
    44a8:	defffc04 	addi	sp,sp,-16
    44ac:	dfc00015 	stw	ra,0(sp)
    44b0:	d9400115 	stw	r5,4(sp)
    44b4:	d9800215 	stw	r6,8(sp)
    44b8:	d9c00315 	stw	r7,12(sp)
    44bc:	00800074 	movhi	r2,1
    44c0:	10e09c17 	ldw	r3,-32144(r2)
    44c4:	00800034 	movhi	r2,0
    44c8:	10930004 	addi	r2,r2,19456
    44cc:	19400217 	ldw	r5,8(r3)
    44d0:	d9800104 	addi	r6,sp,4
    44d4:	28800115 	stw	r2,4(r5)
    44d8:	200b883a 	mov	r5,r4
    44dc:	19000217 	ldw	r4,8(r3)
    44e0:	0004be80 	call	4be8 <__vfprintf_internal>
    44e4:	dfc00017 	ldw	ra,0(sp)
    44e8:	dec00404 	addi	sp,sp,16
    44ec:	f800283a 	ret

000044f0 <_sbrk_r>:
    44f0:	defffe04 	addi	sp,sp,-8
    44f4:	dc000015 	stw	r16,0(sp)
    44f8:	00800074 	movhi	r2,1
    44fc:	2021883a 	mov	r16,r4
    4500:	2809883a 	mov	r4,r5
    4504:	dfc00115 	stw	ra,4(sp)
    4508:	1020b915 	stw	zero,-32028(r2)
    450c:	00051440 	call	5144 <sbrk>
    4510:	10ffffd8 	cmpnei	r3,r2,-1
    4514:	1800041e 	bne	r3,zero,4528 <_sbrk_r+0x38>
    4518:	00c00074 	movhi	r3,1
    451c:	18e0b917 	ldw	r3,-32028(r3)
    4520:	18000126 	beq	r3,zero,4528 <_sbrk_r+0x38>
    4524:	80c00015 	stw	r3,0(r16)
    4528:	dfc00117 	ldw	ra,4(sp)
    452c:	dc000017 	ldw	r16,0(sp)
    4530:	dec00204 	addi	sp,sp,8
    4534:	f800283a 	ret

00004538 <_raise_r>:
    4538:	defffd04 	addi	sp,sp,-12
    453c:	dc000015 	stw	r16,0(sp)
    4540:	dfc00215 	stw	ra,8(sp)
    4544:	dc400115 	stw	r17,4(sp)
    4548:	28800830 	cmpltui	r2,r5,32
    454c:	2021883a 	mov	r16,r4
    4550:	1000081e 	bne	r2,zero,4574 <_raise_r+0x3c>
    4554:	00800584 	movi	r2,22
    4558:	20800015 	stw	r2,0(r4)
    455c:	00bfffc4 	movi	r2,-1
    4560:	dfc00217 	ldw	ra,8(sp)
    4564:	dc400117 	ldw	r17,4(sp)
    4568:	dc000017 	ldw	r16,0(sp)
    456c:	dec00304 	addi	sp,sp,12
    4570:	f800283a 	ret
    4574:	20800c17 	ldw	r2,48(r4)
    4578:	2823883a 	mov	r17,r5
    457c:	10000426 	beq	r2,zero,4590 <_raise_r+0x58>
    4580:	280690ba 	slli	r3,r5,2
    4584:	10c5883a 	add	r2,r2,r3
    4588:	10c00017 	ldw	r3,0(r2)
    458c:	18000a1e 	bne	r3,zero,45b8 <_raise_r+0x80>
    4590:	8009883a 	mov	r4,r16
    4594:	00046480 	call	4648 <_getpid_r>
    4598:	880d883a 	mov	r6,r17
    459c:	100b883a 	mov	r5,r2
    45a0:	8009883a 	mov	r4,r16
    45a4:	dfc00217 	ldw	ra,8(sp)
    45a8:	dc400117 	ldw	r17,4(sp)
    45ac:	dc000017 	ldw	r16,0(sp)
    45b0:	dec00304 	addi	sp,sp,12
    45b4:	00045fc1 	jmpi	45fc <_kill_r>
    45b8:	19000060 	cmpeqi	r4,r3,1
    45bc:	2000091e 	bne	r4,zero,45e4 <_raise_r+0xac>
    45c0:	193fffd8 	cmpnei	r4,r3,-1
    45c4:	2000041e 	bne	r4,zero,45d8 <_raise_r+0xa0>
    45c8:	00800584 	movi	r2,22
    45cc:	80800015 	stw	r2,0(r16)
    45d0:	00800044 	movi	r2,1
    45d4:	003fe206 	br	4560 <_raise_r+0x28>
    45d8:	10000015 	stw	zero,0(r2)
    45dc:	2809883a 	mov	r4,r5
    45e0:	183ee83a 	callr	r3
    45e4:	0005883a 	mov	r2,zero
    45e8:	003fdd06 	br	4560 <_raise_r+0x28>

000045ec <raise>:
    45ec:	00800074 	movhi	r2,1
    45f0:	200b883a 	mov	r5,r4
    45f4:	11209c17 	ldw	r4,-32144(r2)
    45f8:	00045381 	jmpi	4538 <_raise_r>

000045fc <_kill_r>:
    45fc:	defffe04 	addi	sp,sp,-8
    4600:	dc000015 	stw	r16,0(sp)
    4604:	00800074 	movhi	r2,1
    4608:	2021883a 	mov	r16,r4
    460c:	2809883a 	mov	r4,r5
    4610:	300b883a 	mov	r5,r6
    4614:	dfc00115 	stw	ra,4(sp)
    4618:	1020b915 	stw	zero,-32028(r2)
    461c:	0004f100 	call	4f10 <kill>
    4620:	10ffffd8 	cmpnei	r3,r2,-1
    4624:	1800041e 	bne	r3,zero,4638 <_kill_r+0x3c>
    4628:	00c00074 	movhi	r3,1
    462c:	18e0b917 	ldw	r3,-32028(r3)
    4630:	18000126 	beq	r3,zero,4638 <_kill_r+0x3c>
    4634:	80c00015 	stw	r3,0(r16)
    4638:	dfc00117 	ldw	ra,4(sp)
    463c:	dc000017 	ldw	r16,0(sp)
    4640:	dec00204 	addi	sp,sp,8
    4644:	f800283a 	ret

00004648 <_getpid_r>:
    4648:	0004f081 	jmpi	4f08 <getpid>

0000464c <strcmp>:
    464c:	20800003 	ldbu	r2,0(r4)
    4650:	28c00003 	ldbu	r3,0(r5)
    4654:	11803fcc 	andi	r6,r2,255
    4658:	3180201c 	xori	r6,r6,128
    465c:	31bfe004 	addi	r6,r6,-128
    4660:	30000426 	beq	r6,zero,4674 <strcmp+0x28>
    4664:	19c03fcc 	andi	r7,r3,255
    4668:	39c0201c 	xori	r7,r7,128
    466c:	39ffe004 	addi	r7,r7,-128
    4670:	31c00426 	beq	r6,r7,4684 <strcmp+0x38>
    4674:	18c03fcc 	andi	r3,r3,255
    4678:	10803fcc 	andi	r2,r2,255
    467c:	10c5c83a 	sub	r2,r2,r3
    4680:	f800283a 	ret
    4684:	21000044 	addi	r4,r4,1
    4688:	29400044 	addi	r5,r5,1
    468c:	003fef06 	br	464c <strcmp>

00004690 <print_repeat>:
    4690:	defffb04 	addi	sp,sp,-20
    4694:	dc800315 	stw	r18,12(sp)
    4698:	dc400215 	stw	r17,8(sp)
    469c:	dc000115 	stw	r16,4(sp)
    46a0:	dfc00415 	stw	ra,16(sp)
    46a4:	2025883a 	mov	r18,r4
    46a8:	2823883a 	mov	r17,r5
    46ac:	d9800005 	stb	r6,0(sp)
    46b0:	3821883a 	mov	r16,r7
    46b4:	04000716 	blt	zero,r16,46d4 <print_repeat+0x44>
    46b8:	0005883a 	mov	r2,zero
    46bc:	dfc00417 	ldw	ra,16(sp)
    46c0:	dc800317 	ldw	r18,12(sp)
    46c4:	dc400217 	ldw	r17,8(sp)
    46c8:	dc000117 	ldw	r16,4(sp)
    46cc:	dec00504 	addi	sp,sp,20
    46d0:	f800283a 	ret
    46d4:	88800117 	ldw	r2,4(r17)
    46d8:	01c00044 	movi	r7,1
    46dc:	d80d883a 	mov	r6,sp
    46e0:	880b883a 	mov	r5,r17
    46e4:	9009883a 	mov	r4,r18
    46e8:	103ee83a 	callr	r2
    46ec:	843fffc4 	addi	r16,r16,-1
    46f0:	103ff026 	beq	r2,zero,46b4 <print_repeat+0x24>
    46f4:	00bfffc4 	movi	r2,-1
    46f8:	003ff006 	br	46bc <print_repeat+0x2c>

000046fc <___vfprintf_internal_r>:
    46fc:	deffe604 	addi	sp,sp,-104
    4700:	df001815 	stw	fp,96(sp)
    4704:	ddc01715 	stw	r23,92(sp)
    4708:	dd801615 	stw	r22,88(sp)
    470c:	dd001415 	stw	r20,80(sp)
    4710:	dcc01315 	stw	r19,76(sp)
    4714:	dc801215 	stw	r18,72(sp)
    4718:	dc401115 	stw	r17,68(sp)
    471c:	dc001015 	stw	r16,64(sp)
    4720:	dfc01915 	stw	ra,100(sp)
    4724:	dd401515 	stw	r21,84(sp)
    4728:	2021883a 	mov	r16,r4
    472c:	282f883a 	mov	r23,r5
    4730:	d9800515 	stw	r6,20(sp)
    4734:	3839883a 	mov	fp,r7
    4738:	002d883a 	mov	r22,zero
    473c:	d8000215 	stw	zero,8(sp)
    4740:	0027883a 	mov	r19,zero
    4744:	0029883a 	mov	r20,zero
    4748:	0025883a 	mov	r18,zero
    474c:	0023883a 	mov	r17,zero
    4750:	d8000115 	stw	zero,4(sp)
    4754:	d8000015 	stw	zero,0(sp)
    4758:	0005883a 	mov	r2,zero
    475c:	00000206 	br	4768 <___vfprintf_internal_r+0x6c>
    4760:	118000e0 	cmpeqi	r6,r2,3
    4764:	30003d1e 	bne	r6,zero,485c <___vfprintf_internal_r+0x160>
    4768:	d8c00517 	ldw	r3,20(sp)
    476c:	19000003 	ldbu	r4,0(r3)
    4770:	18c00044 	addi	r3,r3,1
    4774:	d8c00515 	stw	r3,20(sp)
    4778:	21403fcc 	andi	r5,r4,255
    477c:	2940201c 	xori	r5,r5,128
    4780:	297fe004 	addi	r5,r5,-128
    4784:	28001426 	beq	r5,zero,47d8 <___vfprintf_internal_r+0xdc>
    4788:	118000a0 	cmpeqi	r6,r2,2
    478c:	3000231e 	bne	r6,zero,481c <___vfprintf_internal_r+0x120>
    4790:	118000c8 	cmpgei	r6,r2,3
    4794:	303ff21e 	bne	r6,zero,4760 <___vfprintf_internal_r+0x64>
    4798:	10000426 	beq	r2,zero,47ac <___vfprintf_internal_r+0xb0>
    479c:	10800060 	cmpeqi	r2,r2,1
    47a0:	10001a1e 	bne	r2,zero,480c <___vfprintf_internal_r+0x110>
    47a4:	00800084 	movi	r2,2
    47a8:	003fef06 	br	4768 <___vfprintf_internal_r+0x6c>
    47ac:	29400960 	cmpeqi	r5,r5,37
    47b0:	2800f61e 	bne	r5,zero,4b8c <___vfprintf_internal_r+0x490>
    47b4:	b8800117 	ldw	r2,4(r23)
    47b8:	d9000805 	stb	r4,32(sp)
    47bc:	01c00044 	movi	r7,1
    47c0:	d9800804 	addi	r6,sp,32
    47c4:	b80b883a 	mov	r5,r23
    47c8:	8009883a 	mov	r4,r16
    47cc:	103ee83a 	callr	r2
    47d0:	10001b26 	beq	r2,zero,4840 <___vfprintf_internal_r+0x144>
    47d4:	05bfffc4 	movi	r22,-1
    47d8:	b005883a 	mov	r2,r22
    47dc:	dfc01917 	ldw	ra,100(sp)
    47e0:	df001817 	ldw	fp,96(sp)
    47e4:	ddc01717 	ldw	r23,92(sp)
    47e8:	dd801617 	ldw	r22,88(sp)
    47ec:	dd401517 	ldw	r21,84(sp)
    47f0:	dd001417 	ldw	r20,80(sp)
    47f4:	dcc01317 	ldw	r19,76(sp)
    47f8:	dc801217 	ldw	r18,72(sp)
    47fc:	dc401117 	ldw	r17,68(sp)
    4800:	dc001017 	ldw	r16,64(sp)
    4804:	dec01a04 	addi	sp,sp,104
    4808:	f800283a 	ret
    480c:	28800c20 	cmpeqi	r2,r5,48
    4810:	1000e71e 	bne	r2,zero,4bb0 <___vfprintf_internal_r+0x4b4>
    4814:	28800958 	cmpnei	r2,r5,37
    4818:	103fe626 	beq	r2,zero,47b4 <___vfprintf_internal_r+0xb8>
    481c:	20bff404 	addi	r2,r4,-48
    4820:	10803fcc 	andi	r2,r2,255
    4824:	118002a8 	cmpgeui	r6,r2,10
    4828:	3000091e 	bne	r6,zero,4850 <___vfprintf_internal_r+0x154>
    482c:	893fffe0 	cmpeqi	r4,r17,-1
    4830:	2000051e 	bne	r4,zero,4848 <___vfprintf_internal_r+0x14c>
    4834:	8c4002a4 	muli	r17,r17,10
    4838:	1463883a 	add	r17,r2,r17
    483c:	003fd906 	br	47a4 <___vfprintf_internal_r+0xa8>
    4840:	b5800044 	addi	r22,r22,1
    4844:	003fc806 	br	4768 <___vfprintf_internal_r+0x6c>
    4848:	0023883a 	mov	r17,zero
    484c:	003ffa06 	br	4838 <___vfprintf_internal_r+0x13c>
    4850:	28800ba0 	cmpeqi	r2,r5,46
    4854:	1000db1e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x4c8>
    4858:	00800084 	movi	r2,2
    485c:	213ff404 	addi	r4,r4,-48
    4860:	21003fcc 	andi	r4,r4,255
    4864:	218002a8 	cmpgeui	r6,r4,10
    4868:	3000071e 	bne	r6,zero,4888 <___vfprintf_internal_r+0x18c>
    486c:	917fffe0 	cmpeqi	r5,r18,-1
    4870:	2800031e 	bne	r5,zero,4880 <___vfprintf_internal_r+0x184>
    4874:	948002a4 	muli	r18,r18,10
    4878:	24a5883a 	add	r18,r4,r18
    487c:	003fba06 	br	4768 <___vfprintf_internal_r+0x6c>
    4880:	0025883a 	mov	r18,zero
    4884:	003ffc06 	br	4878 <___vfprintf_internal_r+0x17c>
    4888:	28801b20 	cmpeqi	r2,r5,108
    488c:	1000cb1e 	bne	r2,zero,4bbc <___vfprintf_internal_r+0x4c0>
    4890:	90bfffe0 	cmpeqi	r2,r18,-1
    4894:	10000f1e 	bne	r2,zero,48d4 <___vfprintf_internal_r+0x1d8>
    4898:	d8000015 	stw	zero,0(sp)
    489c:	28801be0 	cmpeqi	r2,r5,111
    48a0:	1000ca1e 	bne	r2,zero,4bcc <___vfprintf_internal_r+0x4d0>
    48a4:	28801c08 	cmpgei	r2,r5,112
    48a8:	1000171e 	bne	r2,zero,4908 <___vfprintf_internal_r+0x20c>
    48ac:	288018e0 	cmpeqi	r2,r5,99
    48b0:	10009f1e 	bne	r2,zero,4b30 <___vfprintf_internal_r+0x434>
    48b4:	28801908 	cmpgei	r2,r5,100
    48b8:	1000081e 	bne	r2,zero,48dc <___vfprintf_internal_r+0x1e0>
    48bc:	29401620 	cmpeqi	r5,r5,88
    48c0:	283fa526 	beq	r5,zero,4758 <___vfprintf_internal_r+0x5c>
    48c4:	00800044 	movi	r2,1
    48c8:	d8800215 	stw	r2,8(sp)
    48cc:	05000404 	movi	r20,16
    48d0:	0000bf06 	br	4bd0 <___vfprintf_internal_r+0x4d4>
    48d4:	04800044 	movi	r18,1
    48d8:	003ff006 	br	489c <___vfprintf_internal_r+0x1a0>
    48dc:	28801920 	cmpeqi	r2,r5,100
    48e0:	1000021e 	bne	r2,zero,48ec <___vfprintf_internal_r+0x1f0>
    48e4:	29401a60 	cmpeqi	r5,r5,105
    48e8:	283f9b26 	beq	r5,zero,4758 <___vfprintf_internal_r+0x5c>
    48ec:	e0800104 	addi	r2,fp,4
    48f0:	d8800415 	stw	r2,16(sp)
    48f4:	9800b626 	beq	r19,zero,4bd0 <___vfprintf_internal_r+0x4d4>
    48f8:	e5400017 	ldw	r21,0(fp)
    48fc:	a8002216 	blt	r21,zero,4988 <___vfprintf_internal_r+0x28c>
    4900:	04c00044 	movi	r19,1
    4904:	0000b606 	br	4be0 <___vfprintf_internal_r+0x4e4>
    4908:	28801d60 	cmpeqi	r2,r5,117
    490c:	1000b01e 	bne	r2,zero,4bd0 <___vfprintf_internal_r+0x4d4>
    4910:	28801e20 	cmpeqi	r2,r5,120
    4914:	103fed1e 	bne	r2,zero,48cc <___vfprintf_internal_r+0x1d0>
    4918:	29401ce0 	cmpeqi	r5,r5,115
    491c:	283f8e26 	beq	r5,zero,4758 <___vfprintf_internal_r+0x5c>
    4920:	e5400017 	ldw	r21,0(fp)
    4924:	e0800104 	addi	r2,fp,4
    4928:	d8800315 	stw	r2,12(sp)
    492c:	a809883a 	mov	r4,r21
    4930:	0004ca80 	call	4ca8 <strlen>
    4934:	888fc83a 	sub	r7,r17,r2
    4938:	1039883a 	mov	fp,r2
    493c:	01c0080e 	bge	zero,r7,4960 <___vfprintf_internal_r+0x264>
    4940:	01800804 	movi	r6,32
    4944:	b80b883a 	mov	r5,r23
    4948:	8009883a 	mov	r4,r16
    494c:	d9c00415 	stw	r7,16(sp)
    4950:	00046900 	call	4690 <print_repeat>
    4954:	103f9f1e 	bne	r2,zero,47d4 <___vfprintf_internal_r+0xd8>
    4958:	d9c00417 	ldw	r7,16(sp)
    495c:	b1ed883a 	add	r22,r22,r7
    4960:	b8800117 	ldw	r2,4(r23)
    4964:	e00f883a 	mov	r7,fp
    4968:	a80d883a 	mov	r6,r21
    496c:	b80b883a 	mov	r5,r23
    4970:	8009883a 	mov	r4,r16
    4974:	103ee83a 	callr	r2
    4978:	103f961e 	bne	r2,zero,47d4 <___vfprintf_internal_r+0xd8>
    497c:	b72d883a 	add	r22,r22,fp
    4980:	df000317 	ldw	fp,12(sp)
    4984:	003f7806 	br	4768 <___vfprintf_internal_r+0x6c>
    4988:	056bc83a 	sub	r21,zero,r21
    498c:	04c00044 	movi	r19,1
    4990:	00c00044 	movi	r3,1
    4994:	df000804 	addi	fp,sp,32
    4998:	e00d883a 	mov	r6,fp
    499c:	a8002e1e 	bne	r21,zero,4a58 <___vfprintf_internal_r+0x35c>
    49a0:	e185c83a 	sub	r2,fp,r6
    49a4:	d8800315 	stw	r2,12(sp)
    49a8:	9085c83a 	sub	r2,r18,r2
    49ac:	0080090e 	bge	zero,r2,49d4 <___vfprintf_internal_r+0x2d8>
    49b0:	e085883a 	add	r2,fp,r2
    49b4:	d9001004 	addi	r4,sp,64
    49b8:	e100042e 	bgeu	fp,r4,49cc <___vfprintf_internal_r+0x2d0>
    49bc:	e7000044 	addi	fp,fp,1
    49c0:	01000c04 	movi	r4,48
    49c4:	e13fffc5 	stb	r4,-1(fp)
    49c8:	e0bffa1e 	bne	fp,r2,49b4 <___vfprintf_internal_r+0x2b8>
    49cc:	e185c83a 	sub	r2,fp,r6
    49d0:	d8800315 	stw	r2,12(sp)
    49d4:	d8800317 	ldw	r2,12(sp)
    49d8:	1897883a 	add	r11,r3,r2
    49dc:	d8800017 	ldw	r2,0(sp)
    49e0:	8aebc83a 	sub	r21,r17,r11
    49e4:	10003126 	beq	r2,zero,4aac <___vfprintf_internal_r+0x3b0>
    49e8:	18000a26 	beq	r3,zero,4a14 <___vfprintf_internal_r+0x318>
    49ec:	00800b44 	movi	r2,45
    49f0:	d88007c5 	stb	r2,31(sp)
    49f4:	b8800117 	ldw	r2,4(r23)
    49f8:	01c00044 	movi	r7,1
    49fc:	d98007c4 	addi	r6,sp,31
    4a00:	b80b883a 	mov	r5,r23
    4a04:	8009883a 	mov	r4,r16
    4a08:	103ee83a 	callr	r2
    4a0c:	103f711e 	bne	r2,zero,47d4 <___vfprintf_internal_r+0xd8>
    4a10:	b5800044 	addi	r22,r22,1
    4a14:	0540070e 	bge	zero,r21,4a34 <___vfprintf_internal_r+0x338>
    4a18:	a80f883a 	mov	r7,r21
    4a1c:	01800c04 	movi	r6,48
    4a20:	b80b883a 	mov	r5,r23
    4a24:	8009883a 	mov	r4,r16
    4a28:	00046900 	call	4690 <print_repeat>
    4a2c:	103f691e 	bne	r2,zero,47d4 <___vfprintf_internal_r+0xd8>
    4a30:	b56d883a 	add	r22,r22,r21
    4a34:	d8800317 	ldw	r2,12(sp)
    4a38:	b72d883a 	add	r22,r22,fp
    4a3c:	172bc83a 	sub	r21,r2,fp
    4a40:	af05883a 	add	r2,r21,fp
    4a44:	b707c83a 	sub	r3,r22,fp
    4a48:	00802e16 	blt	zero,r2,4b04 <___vfprintf_internal_r+0x408>
    4a4c:	df000417 	ldw	fp,16(sp)
    4a50:	182d883a 	mov	r22,r3
    4a54:	003f4006 	br	4758 <___vfprintf_internal_r+0x5c>
    4a58:	a809883a 	mov	r4,r21
    4a5c:	a00b883a 	mov	r5,r20
    4a60:	d8c00315 	stw	r3,12(sp)
    4a64:	0004e080 	call	4e08 <__udivsi3>
    4a68:	1509383a 	mul	r4,r2,r20
    4a6c:	d8c00317 	ldw	r3,12(sp)
    4a70:	d9800804 	addi	r6,sp,32
    4a74:	a92bc83a 	sub	r21,r21,r4
    4a78:	a9000288 	cmpgei	r4,r21,10
    4a7c:	2000051e 	bne	r4,zero,4a94 <___vfprintf_internal_r+0x398>
    4a80:	ad400c04 	addi	r21,r21,48
    4a84:	e7000044 	addi	fp,fp,1
    4a88:	e57fffc5 	stb	r21,-1(fp)
    4a8c:	102b883a 	mov	r21,r2
    4a90:	003fc206 	br	499c <___vfprintf_internal_r+0x2a0>
    4a94:	d9000217 	ldw	r4,8(sp)
    4a98:	20000226 	beq	r4,zero,4aa4 <___vfprintf_internal_r+0x3a8>
    4a9c:	ad400dc4 	addi	r21,r21,55
    4aa0:	003ff806 	br	4a84 <___vfprintf_internal_r+0x388>
    4aa4:	ad4015c4 	addi	r21,r21,87
    4aa8:	003ff606 	br	4a84 <___vfprintf_internal_r+0x388>
    4aac:	0540090e 	bge	zero,r21,4ad4 <___vfprintf_internal_r+0x3d8>
    4ab0:	a80f883a 	mov	r7,r21
    4ab4:	01800804 	movi	r6,32
    4ab8:	b80b883a 	mov	r5,r23
    4abc:	8009883a 	mov	r4,r16
    4ac0:	d8c00615 	stw	r3,24(sp)
    4ac4:	00046900 	call	4690 <print_repeat>
    4ac8:	103f421e 	bne	r2,zero,47d4 <___vfprintf_internal_r+0xd8>
    4acc:	d8c00617 	ldw	r3,24(sp)
    4ad0:	b56d883a 	add	r22,r22,r21
    4ad4:	183fd726 	beq	r3,zero,4a34 <___vfprintf_internal_r+0x338>
    4ad8:	00800b44 	movi	r2,45
    4adc:	d88007c5 	stb	r2,31(sp)
    4ae0:	b8800117 	ldw	r2,4(r23)
    4ae4:	01c00044 	movi	r7,1
    4ae8:	d98007c4 	addi	r6,sp,31
    4aec:	b80b883a 	mov	r5,r23
    4af0:	8009883a 	mov	r4,r16
    4af4:	103ee83a 	callr	r2
    4af8:	103f361e 	bne	r2,zero,47d4 <___vfprintf_internal_r+0xd8>
    4afc:	b5800044 	addi	r22,r22,1
    4b00:	003fcc06 	br	4a34 <___vfprintf_internal_r+0x338>
    4b04:	e0bfffc3 	ldbu	r2,-1(fp)
    4b08:	01c00044 	movi	r7,1
    4b0c:	d98007c4 	addi	r6,sp,31
    4b10:	d88007c5 	stb	r2,31(sp)
    4b14:	b8800117 	ldw	r2,4(r23)
    4b18:	b80b883a 	mov	r5,r23
    4b1c:	8009883a 	mov	r4,r16
    4b20:	e73fffc4 	addi	fp,fp,-1
    4b24:	103ee83a 	callr	r2
    4b28:	103fc526 	beq	r2,zero,4a40 <___vfprintf_internal_r+0x344>
    4b2c:	003f2906 	br	47d4 <___vfprintf_internal_r+0xd8>
    4b30:	88800090 	cmplti	r2,r17,2
    4b34:	1000081e 	bne	r2,zero,4b58 <___vfprintf_internal_r+0x45c>
    4b38:	8d7fffc4 	addi	r21,r17,-1
    4b3c:	a80f883a 	mov	r7,r21
    4b40:	01800804 	movi	r6,32
    4b44:	b80b883a 	mov	r5,r23
    4b48:	8009883a 	mov	r4,r16
    4b4c:	00046900 	call	4690 <print_repeat>
    4b50:	103f201e 	bne	r2,zero,47d4 <___vfprintf_internal_r+0xd8>
    4b54:	b56d883a 	add	r22,r22,r21
    4b58:	e0800017 	ldw	r2,0(fp)
    4b5c:	01c00044 	movi	r7,1
    4b60:	d9800804 	addi	r6,sp,32
    4b64:	d8800805 	stb	r2,32(sp)
    4b68:	b8800117 	ldw	r2,4(r23)
    4b6c:	b80b883a 	mov	r5,r23
    4b70:	8009883a 	mov	r4,r16
    4b74:	e5400104 	addi	r21,fp,4
    4b78:	103ee83a 	callr	r2
    4b7c:	103f151e 	bne	r2,zero,47d4 <___vfprintf_internal_r+0xd8>
    4b80:	b5800044 	addi	r22,r22,1
    4b84:	a839883a 	mov	fp,r21
    4b88:	003ef706 	br	4768 <___vfprintf_internal_r+0x6c>
    4b8c:	d8000215 	stw	zero,8(sp)
    4b90:	d8000115 	stw	zero,4(sp)
    4b94:	d8000015 	stw	zero,0(sp)
    4b98:	04c00044 	movi	r19,1
    4b9c:	05000284 	movi	r20,10
    4ba0:	04bfffc4 	movi	r18,-1
    4ba4:	047fffc4 	movi	r17,-1
    4ba8:	00800044 	movi	r2,1
    4bac:	003eee06 	br	4768 <___vfprintf_internal_r+0x6c>
    4bb0:	00800044 	movi	r2,1
    4bb4:	d8800015 	stw	r2,0(sp)
    4bb8:	003efa06 	br	47a4 <___vfprintf_internal_r+0xa8>
    4bbc:	00800044 	movi	r2,1
    4bc0:	d8800115 	stw	r2,4(sp)
    4bc4:	008000c4 	movi	r2,3
    4bc8:	003ee706 	br	4768 <___vfprintf_internal_r+0x6c>
    4bcc:	05000204 	movi	r20,8
    4bd0:	e0800104 	addi	r2,fp,4
    4bd4:	d8800415 	stw	r2,16(sp)
    4bd8:	e5400017 	ldw	r21,0(fp)
    4bdc:	0027883a 	mov	r19,zero
    4be0:	0007883a 	mov	r3,zero
    4be4:	003f6b06 	br	4994 <___vfprintf_internal_r+0x298>

00004be8 <__vfprintf_internal>:
    4be8:	00800074 	movhi	r2,1
    4bec:	300f883a 	mov	r7,r6
    4bf0:	280d883a 	mov	r6,r5
    4bf4:	200b883a 	mov	r5,r4
    4bf8:	11209c17 	ldw	r4,-32144(r2)
    4bfc:	00046fc1 	jmpi	46fc <___vfprintf_internal_r>

00004c00 <__sfvwrite_small_dev>:
    4c00:	2880000b 	ldhu	r2,0(r5)
    4c04:	1080020c 	andi	r2,r2,8
    4c08:	10002526 	beq	r2,zero,4ca0 <__sfvwrite_small_dev+0xa0>
    4c0c:	2880008f 	ldh	r2,2(r5)
    4c10:	defffb04 	addi	sp,sp,-20
    4c14:	dcc00315 	stw	r19,12(sp)
    4c18:	dc800215 	stw	r18,8(sp)
    4c1c:	dc400115 	stw	r17,4(sp)
    4c20:	dc000015 	stw	r16,0(sp)
    4c24:	dfc00415 	stw	ra,16(sp)
    4c28:	2027883a 	mov	r19,r4
    4c2c:	2821883a 	mov	r16,r5
    4c30:	3025883a 	mov	r18,r6
    4c34:	3823883a 	mov	r17,r7
    4c38:	1000100e 	bge	r2,zero,4c7c <__sfvwrite_small_dev+0x7c>
    4c3c:	8080000b 	ldhu	r2,0(r16)
    4c40:	10801014 	ori	r2,r2,64
    4c44:	8080000d 	sth	r2,0(r16)
    4c48:	00bfffc4 	movi	r2,-1
    4c4c:	00000d06 	br	4c84 <__sfvwrite_small_dev+0x84>
    4c50:	88810050 	cmplti	r2,r17,1025
    4c54:	880f883a 	mov	r7,r17
    4c58:	1000011e 	bne	r2,zero,4c60 <__sfvwrite_small_dev+0x60>
    4c5c:	01c10004 	movi	r7,1024
    4c60:	8140008f 	ldh	r5,2(r16)
    4c64:	900d883a 	mov	r6,r18
    4c68:	9809883a 	mov	r4,r19
    4c6c:	0004cc40 	call	4cc4 <_write_r>
    4c70:	00bff20e 	bge	zero,r2,4c3c <__sfvwrite_small_dev+0x3c>
    4c74:	88a3c83a 	sub	r17,r17,r2
    4c78:	90a5883a 	add	r18,r18,r2
    4c7c:	047ff416 	blt	zero,r17,4c50 <__sfvwrite_small_dev+0x50>
    4c80:	0005883a 	mov	r2,zero
    4c84:	dfc00417 	ldw	ra,16(sp)
    4c88:	dcc00317 	ldw	r19,12(sp)
    4c8c:	dc800217 	ldw	r18,8(sp)
    4c90:	dc400117 	ldw	r17,4(sp)
    4c94:	dc000017 	ldw	r16,0(sp)
    4c98:	dec00504 	addi	sp,sp,20
    4c9c:	f800283a 	ret
    4ca0:	00bfffc4 	movi	r2,-1
    4ca4:	f800283a 	ret

00004ca8 <strlen>:
    4ca8:	2005883a 	mov	r2,r4
    4cac:	10c00007 	ldb	r3,0(r2)
    4cb0:	1800021e 	bne	r3,zero,4cbc <strlen+0x14>
    4cb4:	1105c83a 	sub	r2,r2,r4
    4cb8:	f800283a 	ret
    4cbc:	10800044 	addi	r2,r2,1
    4cc0:	003ffa06 	br	4cac <strlen+0x4>

00004cc4 <_write_r>:
    4cc4:	defffe04 	addi	sp,sp,-8
    4cc8:	dc000015 	stw	r16,0(sp)
    4ccc:	00800074 	movhi	r2,1
    4cd0:	2021883a 	mov	r16,r4
    4cd4:	2809883a 	mov	r4,r5
    4cd8:	300b883a 	mov	r5,r6
    4cdc:	380d883a 	mov	r6,r7
    4ce0:	dfc00115 	stw	ra,4(sp)
    4ce4:	1020b915 	stw	zero,-32028(r2)
    4ce8:	00051b00 	call	51b0 <write>
    4cec:	10ffffd8 	cmpnei	r3,r2,-1
    4cf0:	1800041e 	bne	r3,zero,4d04 <_write_r+0x40>
    4cf4:	00c00074 	movhi	r3,1
    4cf8:	18e0b917 	ldw	r3,-32028(r3)
    4cfc:	18000126 	beq	r3,zero,4d04 <_write_r+0x40>
    4d00:	80c00015 	stw	r3,0(r16)
    4d04:	dfc00117 	ldw	ra,4(sp)
    4d08:	dc000017 	ldw	r16,0(sp)
    4d0c:	dec00204 	addi	sp,sp,8
    4d10:	f800283a 	ret

00004d14 <__divsi3>:
    4d14:	20001a16 	blt	r4,zero,4d80 <__divsi3+0x6c>
    4d18:	000f883a 	mov	r7,zero
    4d1c:	2800020e 	bge	r5,zero,4d28 <__divsi3+0x14>
    4d20:	014bc83a 	sub	r5,zero,r5
    4d24:	39c0005c 	xori	r7,r7,1
    4d28:	200d883a 	mov	r6,r4
    4d2c:	00c00044 	movi	r3,1
    4d30:	2900092e 	bgeu	r5,r4,4d58 <__divsi3+0x44>
    4d34:	00800804 	movi	r2,32
    4d38:	00c00044 	movi	r3,1
    4d3c:	00000106 	br	4d44 <__divsi3+0x30>
    4d40:	10001226 	beq	r2,zero,4d8c <__divsi3+0x78>
    4d44:	294b883a 	add	r5,r5,r5
    4d48:	10bfffc4 	addi	r2,r2,-1
    4d4c:	18c7883a 	add	r3,r3,r3
    4d50:	293ffb36 	bltu	r5,r4,4d40 <__divsi3+0x2c>
    4d54:	18000d26 	beq	r3,zero,4d8c <__divsi3+0x78>
    4d58:	0005883a 	mov	r2,zero
    4d5c:	31400236 	bltu	r6,r5,4d68 <__divsi3+0x54>
    4d60:	314dc83a 	sub	r6,r6,r5
    4d64:	10c4b03a 	or	r2,r2,r3
    4d68:	1806d07a 	srli	r3,r3,1
    4d6c:	280ad07a 	srli	r5,r5,1
    4d70:	183ffa1e 	bne	r3,zero,4d5c <__divsi3+0x48>
    4d74:	38000126 	beq	r7,zero,4d7c <__divsi3+0x68>
    4d78:	0085c83a 	sub	r2,zero,r2
    4d7c:	f800283a 	ret
    4d80:	0109c83a 	sub	r4,zero,r4
    4d84:	01c00044 	movi	r7,1
    4d88:	003fe406 	br	4d1c <__divsi3+0x8>
    4d8c:	0005883a 	mov	r2,zero
    4d90:	003ff806 	br	4d74 <__divsi3+0x60>

00004d94 <__modsi3>:
    4d94:	20001916 	blt	r4,zero,4dfc <__modsi3+0x68>
    4d98:	000f883a 	mov	r7,zero
    4d9c:	2005883a 	mov	r2,r4
    4da0:	2800010e 	bge	r5,zero,4da8 <__modsi3+0x14>
    4da4:	014bc83a 	sub	r5,zero,r5
    4da8:	00c00044 	movi	r3,1
    4dac:	2900092e 	bgeu	r5,r4,4dd4 <__modsi3+0x40>
    4db0:	01800804 	movi	r6,32
    4db4:	00c00044 	movi	r3,1
    4db8:	00000106 	br	4dc0 <__modsi3+0x2c>
    4dbc:	30000d26 	beq	r6,zero,4df4 <__modsi3+0x60>
    4dc0:	294b883a 	add	r5,r5,r5
    4dc4:	31bfffc4 	addi	r6,r6,-1
    4dc8:	18c7883a 	add	r3,r3,r3
    4dcc:	293ffb36 	bltu	r5,r4,4dbc <__modsi3+0x28>
    4dd0:	18000826 	beq	r3,zero,4df4 <__modsi3+0x60>
    4dd4:	1806d07a 	srli	r3,r3,1
    4dd8:	11400136 	bltu	r2,r5,4de0 <__modsi3+0x4c>
    4ddc:	1145c83a 	sub	r2,r2,r5
    4de0:	280ad07a 	srli	r5,r5,1
    4de4:	183ffb1e 	bne	r3,zero,4dd4 <__modsi3+0x40>
    4de8:	38000126 	beq	r7,zero,4df0 <__modsi3+0x5c>
    4dec:	0085c83a 	sub	r2,zero,r2
    4df0:	f800283a 	ret
    4df4:	2005883a 	mov	r2,r4
    4df8:	003ffb06 	br	4de8 <__modsi3+0x54>
    4dfc:	0109c83a 	sub	r4,zero,r4
    4e00:	01c00044 	movi	r7,1
    4e04:	003fe506 	br	4d9c <__modsi3+0x8>

00004e08 <__udivsi3>:
    4e08:	200d883a 	mov	r6,r4
    4e0c:	2900152e 	bgeu	r5,r4,4e64 <__udivsi3+0x5c>
    4e10:	28001416 	blt	r5,zero,4e64 <__udivsi3+0x5c>
    4e14:	00800804 	movi	r2,32
    4e18:	00c00044 	movi	r3,1
    4e1c:	00000206 	br	4e28 <__udivsi3+0x20>
    4e20:	10000e26 	beq	r2,zero,4e5c <__udivsi3+0x54>
    4e24:	28000516 	blt	r5,zero,4e3c <__udivsi3+0x34>
    4e28:	294b883a 	add	r5,r5,r5
    4e2c:	10bfffc4 	addi	r2,r2,-1
    4e30:	18c7883a 	add	r3,r3,r3
    4e34:	293ffa36 	bltu	r5,r4,4e20 <__udivsi3+0x18>
    4e38:	18000826 	beq	r3,zero,4e5c <__udivsi3+0x54>
    4e3c:	0005883a 	mov	r2,zero
    4e40:	31400236 	bltu	r6,r5,4e4c <__udivsi3+0x44>
    4e44:	314dc83a 	sub	r6,r6,r5
    4e48:	10c4b03a 	or	r2,r2,r3
    4e4c:	1806d07a 	srli	r3,r3,1
    4e50:	280ad07a 	srli	r5,r5,1
    4e54:	183ffa1e 	bne	r3,zero,4e40 <__udivsi3+0x38>
    4e58:	f800283a 	ret
    4e5c:	0005883a 	mov	r2,zero
    4e60:	f800283a 	ret
    4e64:	00c00044 	movi	r3,1
    4e68:	003ff406 	br	4e3c <__udivsi3+0x34>

00004e6c <__umodsi3>:
    4e6c:	2005883a 	mov	r2,r4
    4e70:	2900132e 	bgeu	r5,r4,4ec0 <__umodsi3+0x54>
    4e74:	28001216 	blt	r5,zero,4ec0 <__umodsi3+0x54>
    4e78:	01800804 	movi	r6,32
    4e7c:	00c00044 	movi	r3,1
    4e80:	00000206 	br	4e8c <__umodsi3+0x20>
    4e84:	30000c26 	beq	r6,zero,4eb8 <__umodsi3+0x4c>
    4e88:	28000516 	blt	r5,zero,4ea0 <__umodsi3+0x34>
    4e8c:	294b883a 	add	r5,r5,r5
    4e90:	31bfffc4 	addi	r6,r6,-1
    4e94:	18c7883a 	add	r3,r3,r3
    4e98:	293ffa36 	bltu	r5,r4,4e84 <__umodsi3+0x18>
    4e9c:	18000626 	beq	r3,zero,4eb8 <__umodsi3+0x4c>
    4ea0:	1806d07a 	srli	r3,r3,1
    4ea4:	11400136 	bltu	r2,r5,4eac <__umodsi3+0x40>
    4ea8:	1145c83a 	sub	r2,r2,r5
    4eac:	280ad07a 	srli	r5,r5,1
    4eb0:	183ffb1e 	bne	r3,zero,4ea0 <__umodsi3+0x34>
    4eb4:	f800283a 	ret
    4eb8:	2005883a 	mov	r2,r4
    4ebc:	f800283a 	ret
    4ec0:	00c00044 	movi	r3,1
    4ec4:	003ff606 	br	4ea0 <__umodsi3+0x34>

00004ec8 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    4ec8:	00800074 	movhi	r2,1
    4ecc:	11e07d17 	ldw	r7,-32268(r2)
{
    4ed0:	defffe04 	addi	sp,sp,-8
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    4ed4:	01000074 	movhi	r4,1
    4ed8:	01800044 	movi	r6,1
    4edc:	d94000c4 	addi	r5,sp,3
    4ee0:	21209e04 	addi	r4,r4,-32136
{
    4ee4:	dfc00115 	stw	ra,4(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    4ee8:	00052580 	call	5258 <altera_avalon_jtag_uart_read>
    4eec:	0080040e 	bge	zero,r2,4f00 <alt_getchar+0x38>
        return -1;
    }
    return c;
    4ef0:	d88000c7 	ldb	r2,3(sp)
#else
    return getchar();
#endif
#endif
}
    4ef4:	dfc00117 	ldw	ra,4(sp)
    4ef8:	dec00204 	addi	sp,sp,8
    4efc:	f800283a 	ret
        return -1;
    4f00:	00bfffc4 	movi	r2,-1
    4f04:	003ffb06 	br	4ef4 <alt_getchar+0x2c>

00004f08 <getpid>:
 */
 
int ALT_GETPID (void)
{
  return 0;
}
    4f08:	0005883a 	mov	r2,zero
    4f0c:	f800283a 	ret

00004f10 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    4f10:	defffe04 	addi	sp,sp,-8
    4f14:	dfc00115 	stw	ra,4(sp)
    4f18:	dc000015 	stw	r16,0(sp)
  int status = 0;

  if (pid <= 0)
    4f1c:	01002916 	blt	zero,r4,4fc4 <kill+0xb4>
  {
    switch (sig)
    4f20:	28800828 	cmpgeui	r2,r5,32
    4f24:	1000311e 	bne	r2,zero,4fec <kill+0xdc>
    4f28:	280a90ba 	slli	r5,r5,2
    4f2c:	00800034 	movhi	r2,0
    4f30:	2885883a 	add	r2,r5,r2
    4f34:	1093cf17 	ldw	r2,20284(r2)
    4f38:	1000683a 	jmp	r2
    4f3c:	00004ffc 	xorhi	zero,zero,319
    4f40:	00004fec 	andhi	zero,zero,319
    4f44:	00004fec 	andhi	zero,zero,319
    4f48:	00004fbc 	xorhi	zero,zero,318
    4f4c:	00004fbc 	xorhi	zero,zero,318
    4f50:	00004fbc 	xorhi	zero,zero,318
    4f54:	00004fbc 	xorhi	zero,zero,318
    4f58:	00004fec 	andhi	zero,zero,319
    4f5c:	00004fbc 	xorhi	zero,zero,318
    4f60:	00004fbc 	xorhi	zero,zero,318
    4f64:	00004fbc 	xorhi	zero,zero,318
    4f68:	00004fbc 	xorhi	zero,zero,318
    4f6c:	00004fbc 	xorhi	zero,zero,318
    4f70:	00004fbc 	xorhi	zero,zero,318
    4f74:	00004fbc 	xorhi	zero,zero,318
    4f78:	00004fbc 	xorhi	zero,zero,318
    4f7c:	00004ffc 	xorhi	zero,zero,319
    4f80:	00004fec 	andhi	zero,zero,319
    4f84:	00004fec 	andhi	zero,zero,319
    4f88:	00004fec 	andhi	zero,zero,319
    4f8c:	00004ffc 	xorhi	zero,zero,319
    4f90:	00004fec 	andhi	zero,zero,319
    4f94:	00004fec 	andhi	zero,zero,319
    4f98:	00004fbc 	xorhi	zero,zero,318
    4f9c:	00004fbc 	xorhi	zero,zero,318
    4fa0:	00004fbc 	xorhi	zero,zero,318
    4fa4:	00004fbc 	xorhi	zero,zero,318
    4fa8:	00004fbc 	xorhi	zero,zero,318
    4fac:	00004fec 	andhi	zero,zero,319
    4fb0:	00004fec 	andhi	zero,zero,319
    4fb4:	00004fbc 	xorhi	zero,zero,318
    4fb8:	00004fbc 	xorhi	zero,zero,318
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    4fbc:	0009883a 	mov	r4,zero
    4fc0:	000000c0 	call	c <_exit>

  else if (pid > 0)
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    4fc4:	040000c4 	movi	r16,3

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4fc8:	d0a01217 	ldw	r2,-32696(gp)
    4fcc:	10000926 	beq	r2,zero,4ff4 <kill+0xe4>
    4fd0:	103ee83a 	callr	r2
  }

  if (status)
  {
    ALT_ERRNO = status;
    4fd4:	14000015 	stw	r16,0(r2)
    return -1;
    4fd8:	00bfffc4 	movi	r2,-1
  }

  return 0;
}
    4fdc:	dfc00117 	ldw	ra,4(sp)
    4fe0:	dc000017 	ldw	r16,0(sp)
    4fe4:	dec00204 	addi	sp,sp,8
    4fe8:	f800283a 	ret
  if (pid <= 0)
    4fec:	04000584 	movi	r16,22
    4ff0:	003ff506 	br	4fc8 <kill+0xb8>
    4ff4:	d0a02804 	addi	r2,gp,-32608
    4ff8:	003ff606 	br	4fd4 <kill+0xc4>
    4ffc:	0005883a 	mov	r2,zero
    5000:	003ff606 	br	4fdc <kill+0xcc>

00005004 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5004:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5008:	01000074 	movhi	r4,1
    500c:	01400034 	movhi	r5,0
    5010:	dfc00015 	stw	ra,0(sp)
    5014:	21200004 	addi	r4,r4,-32768
    5018:	29575e04 	addi	r5,r5,23928
    501c:	21400426 	beq	r4,r5,5030 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    5020:	01800074 	movhi	r6,1
    5024:	31a0a404 	addi	r6,r6,-32112
    5028:	310dc83a 	sub	r6,r6,r4
    502c:	00041a00 	call	41a0 <memcpy>
  if (to != from)
    5030:	01000034 	movhi	r4,0
    5034:	01400034 	movhi	r5,0
    5038:	21000804 	addi	r4,r4,32
    503c:	29400804 	addi	r5,r5,32
    5040:	21400426 	beq	r4,r5,5054 <alt_load+0x50>
      *to++ = *from++;
    5044:	01800034 	movhi	r6,0
    5048:	31800804 	addi	r6,r6,32
    504c:	310dc83a 	sub	r6,r6,r4
    5050:	00041a00 	call	41a0 <memcpy>
  if (to != from)
    5054:	01000034 	movhi	r4,0
    5058:	01400034 	movhi	r5,0
    505c:	21167304 	addi	r4,r4,22988
    5060:	29567304 	addi	r5,r5,22988
    5064:	21400426 	beq	r4,r5,5078 <alt_load+0x74>
      *to++ = *from++;
    5068:	01800034 	movhi	r6,0
    506c:	31975e04 	addi	r6,r6,23928
    5070:	310dc83a 	sub	r6,r6,r4
    5074:	00041a00 	call	41a0 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5078:	00058240 	call	5824 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    507c:	dfc00017 	ldw	ra,0(sp)
    5080:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    5084:	00059541 	jmpi	5954 <alt_icache_flush_all>

00005088 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5088:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    508c:	0009883a 	mov	r4,zero
{
    5090:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    5094:	000520c0 	call	520c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5098:	00052380 	call	5238 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    509c:	000589c0 	call	589c <_do_ctors>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    50a0:	d1a02917 	ldw	r6,-32604(gp)
    50a4:	d1602a17 	ldw	r5,-32600(gp)
    50a8:	d1202b17 	ldw	r4,-32596(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    50ac:	dfc00017 	ldw	ra,0(sp)
    50b0:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    50b4:	0001b6c1 	jmpi	1b6c <main>

000050b8 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    50b8:	f800283a 	ret

000050bc <__malloc_unlock>:
    50bc:	f800283a 	ret

000050c0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    50c0:	defffd04 	addi	sp,sp,-12
    50c4:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    50c8:	d90000c5 	stb	r4,3(sp)
{
    50cc:	2021883a 	mov	r16,r4

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    50d0:	01000074 	movhi	r4,1
    50d4:	000f883a 	mov	r7,zero
    50d8:	01800044 	movi	r6,1
    50dc:	d94000c4 	addi	r5,sp,3
    50e0:	21209e04 	addi	r4,r4,-32136
{
    50e4:	dfc00215 	stw	ra,8(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    50e8:	00052b00 	call	52b0 <altera_avalon_jtag_uart_write>
    50ec:	10bfffd8 	cmpnei	r2,r2,-1
    50f0:	1000011e 	bne	r2,zero,50f8 <alt_putchar+0x38>
        return -1;
    50f4:	043fffc4 	movi	r16,-1
    return c;
#else
    return putchar(c);
#endif
#endif
}
    50f8:	8005883a 	mov	r2,r16
    50fc:	dfc00217 	ldw	ra,8(sp)
    5100:	dc000117 	ldw	r16,4(sp)
    5104:	dec00304 	addi	sp,sp,12
    5108:	f800283a 	ret

0000510c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    510c:	defffe04 	addi	sp,sp,-8
    5110:	dc000015 	stw	r16,0(sp)
    5114:	dfc00115 	stw	ra,4(sp)
    5118:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    511c:	0004ca80 	call	4ca8 <strlen>
    5120:	01000074 	movhi	r4,1
    5124:	000f883a 	mov	r7,zero
    5128:	100d883a 	mov	r6,r2
    512c:	800b883a 	mov	r5,r16
    5130:	21209e04 	addi	r4,r4,-32136
#else
    return fputs(str, stdout);
#endif
#endif
}
    5134:	dfc00117 	ldw	ra,4(sp)
    5138:	dc000017 	ldw	r16,0(sp)
    513c:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5140:	00052b01 	jmpi	52b0 <altera_avalon_jtag_uart_write>

00005144 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5144:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5148:	017fff84 	movi	r5,-2
    514c:	1944703a 	and	r2,r3,r5
    5150:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5154:	d0a00c17 	ldw	r2,-32720(gp)
    5158:	01bfff04 	movi	r6,-4
    515c:	18c0004c 	andi	r3,r3,1
    5160:	108000c4 	addi	r2,r2,3
    5164:	1184703a 	and	r2,r2,r6
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5168:	01800074 	movhi	r6,1
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    516c:	d0a00c15 	stw	r2,-32720(gp)
  if ((heap_end + incr) > __alt_heap_limit) {
    5170:	1109883a 	add	r4,r2,r4
    5174:	31a40004 	addi	r6,r6,-28672
    5178:	3100062e 	bgeu	r6,r4,5194 <sbrk+0x50>
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    517c:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    5180:	2148703a 	and	r4,r4,r5
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5184:	1906b03a 	or	r3,r3,r4
  
  NIOS2_WRITE_STATUS (status);
    5188:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    518c:	00bfffc4 	movi	r2,-1
    5190:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    5194:	d1200c15 	stw	r4,-32720(gp)
  NIOS2_READ_STATUS (status);
    5198:	0009303a 	rdctl	r4,status
  status &= ~NIOS2_STATUS_PIE_MSK;
    519c:	2148703a 	and	r4,r4,r5
  status |= (context & NIOS2_STATUS_PIE_MSK);
    51a0:	1906b03a 	or	r3,r3,r4
  NIOS2_WRITE_STATUS (status);
    51a4:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    51a8:	f800283a 	ret

000051ac <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    51ac:	00057a01 	jmpi	57a0 <alt_busy_sleep>

000051b0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    51b0:	213fffc4 	addi	r4,r4,-1
    51b4:	210000a8 	cmpgeui	r4,r4,2
    51b8:	2000041e 	bne	r4,zero,51cc <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    51bc:	01000074 	movhi	r4,1
    51c0:	000f883a 	mov	r7,zero
    51c4:	21209e04 	addi	r4,r4,-32136
    51c8:	00052b01 	jmpi	52b0 <altera_avalon_jtag_uart_write>
    51cc:	d0a01217 	ldw	r2,-32696(gp)
    51d0:	10000926 	beq	r2,zero,51f8 <write+0x48>
{
    51d4:	deffff04 	addi	sp,sp,-4
    51d8:	dfc00015 	stw	ra,0(sp)
    51dc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    51e0:	00c01444 	movi	r3,81
    51e4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    51e8:	00bfffc4 	movi	r2,-1
    51ec:	dfc00017 	ldw	ra,0(sp)
    51f0:	dec00104 	addi	sp,sp,4
    51f4:	f800283a 	ret
    51f8:	d0a02804 	addi	r2,gp,-32608
        ALT_ERRNO = EBADFD;
    51fc:	00c01444 	movi	r3,81
    5200:	10c00015 	stw	r3,0(r2)
}
    5204:	00bfffc4 	movi	r2,-1
    5208:	f800283a 	ret

0000520c <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    520c:	01000074 	movhi	r4,1
{
    5210:	deffff04 	addi	sp,sp,-4
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    5214:	21205404 	addi	r4,r4,-32432
{
    5218:	dfc00015 	stw	ra,0(sp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    521c:	00056880 	call	5688 <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5220:	00802034 	movhi	r2,128
    5224:	10800044 	addi	r2,r2,1
    5228:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    522c:	dfc00017 	ldw	ra,0(sp)
    5230:	dec00104 	addi	sp,sp,4
    5234:	f800283a 	ret

00005238 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
    5238:	00c00044 	movi	r3,1
    523c:	00b1c014 	movui	r2,50944
    5240:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SPI_INIT ( SPIM_0, spim_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_MSGDMA_INIT ( MSGDMA_0, msgdma_0);
    5244:	01000074 	movhi	r4,1
    5248:	21203c04 	addi	r4,r4,-32528
    524c:	21800817 	ldw	r6,32(r4)
    5250:	21400717 	ldw	r5,28(r4)
    5254:	00055001 	jmpi	5500 <alt_msgdma_init>

00005258 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    5258:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    525c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    5260:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    5264:	3a10000c 	andi	r8,r7,16384
  while (ptr < end)
    5268:	11800536 	bltu	r2,r6,5280 <altera_avalon_jtag_uart_read+0x28>
      break;   
    
  }

  if (ptr != buffer)
    526c:	11400b1e 	bne	r2,r5,529c <altera_avalon_jtag_uart_read+0x44>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    5270:	39d0000c 	andi	r7,r7,16384
    5274:	38000c1e 	bne	r7,zero,52a8 <altera_avalon_jtag_uart_read+0x50>
    return -EWOULDBLOCK;
  else
    return -EIO;
    5278:	00bffec4 	movi	r2,-5
}
    527c:	f800283a 	ret
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5280:	20c00037 	ldwio	r3,0(r4)
    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    5284:	1a60000c 	andi	r9,r3,32768
    5288:	48000326 	beq	r9,zero,5298 <altera_avalon_jtag_uart_read+0x40>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    528c:	10c00005 	stb	r3,0(r2)
    5290:	10800044 	addi	r2,r2,1
    5294:	003ff406 	br	5268 <altera_avalon_jtag_uart_read+0x10>
    else if (ptr != buffer)
    5298:	11400226 	beq	r2,r5,52a4 <altera_avalon_jtag_uart_read+0x4c>
    return ptr - buffer;
    529c:	1145c83a 	sub	r2,r2,r5
    52a0:	f800283a 	ret
    else if(flags & O_NONBLOCK)
    52a4:	403ff026 	beq	r8,zero,5268 <altera_avalon_jtag_uart_read+0x10>
    return -EWOULDBLOCK;
    52a8:	00bffd44 	movi	r2,-11
    52ac:	f800283a 	ret

000052b0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    52b0:	21000017 	ldw	r4,0(r4)
{
    52b4:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    52b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    52bc:	29800136 	bltu	r5,r6,52c4 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    52c0:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    52c4:	20c00137 	ldwio	r3,4(r4)
    52c8:	18ffffec 	andhi	r3,r3,65535
    52cc:	183ffb26 	beq	r3,zero,52bc <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    52d0:	28c00007 	ldb	r3,0(r5)
    52d4:	29400044 	addi	r5,r5,1
    52d8:	20c00035 	stwio	r3,0(r4)
    52dc:	003ff706 	br	52bc <altera_avalon_jtag_uart_write+0xc>

000052e0 <perf_get_section_time>:
{
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;

  PERF_STOP_MEASURING(hw_base_address);
    52e0:	20000035 	stwio	zero,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
    52e4:	2804913a 	slli	r2,r5,4
    52e8:	2085883a 	add	r2,r4,r2
    52ec:	10800037 	ldwio	r2,0(r2)
  hi = IORD(hw_base_address, ((which_section*4)+1));
    52f0:	280a913a 	slli	r5,r5,4
    52f4:	29400104 	addi	r5,r5,4
    52f8:	214b883a 	add	r5,r4,r5
    52fc:	28c00037 	ldwio	r3,0(r5)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
}
    5300:	f800283a 	ret

00005304 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    5304:	d8800017 	ldw	r2,0(sp)
    5308:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    530c:	00c00044 	movi	r3,1
{
    5310:	da400217 	ldw	r9,8(sp)
  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5314:	1946983a 	sll	r3,r3,r5
  const alt_u8 * write_end = write_data + write_length;
    5318:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
    531c:	409b883a 	add	r13,r8,r2
  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5320:	20c00535 	stwio	r3,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    5324:	48c0008c 	andi	r3,r9,2
    5328:	1800021e 	bne	r3,zero,5334 <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    532c:	00c10004 	movi	r3,1024
    5330:	20c00335 	stwio	r3,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5334:	20c00037 	ldwio	r3,0(r4)
  alt_32 credits = 1;
    5338:	00c00044 	movi	r3,1
  alt_u32 write_zeros = read_length;
    533c:	1015883a 	mov	r10,r2
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5340:	23000204 	addi	r12,r4,8
    5344:	21400237 	ldwio	r5,8(r4)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5348:	2ac0100c 	andi	r11,r5,64
    534c:	2940200c 	andi	r5,r5,128
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    5350:	58000126 	beq	r11,zero,5358 <alt_avalon_spi_command+0x54>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5354:	1800021e 	bne	r3,zero,5360 <alt_avalon_spi_command+0x5c>
    5358:	283ff926 	beq	r5,zero,5340 <alt_avalon_spi_command+0x3c>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    535c:	58000726 	beq	r11,zero,537c <alt_avalon_spi_command+0x78>
    5360:	00c0060e 	bge	zero,r3,537c <alt_avalon_spi_command+0x78>
    {
      credits--;
    5364:	18ffffc4 	addi	r3,r3,-1

      if (write_data < write_end)
    5368:	3b80122e 	bgeu	r7,r14,53b4 <alt_avalon_spi_command+0xb0>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    536c:	3ac00044 	addi	r11,r7,1
    5370:	39c00003 	ldbu	r7,0(r7)
    5374:	21c00135 	stwio	r7,4(r4)
    5378:	580f883a 	mov	r7,r11
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    537c:	283ff026 	beq	r5,zero,5340 <alt_avalon_spi_command+0x3c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5380:	21400037 	ldwio	r5,0(r4)

      if (read_ignore > 0)
    5384:	30001126 	beq	r6,zero,53cc <alt_avalon_spi_command+0xc8>
        read_ignore--;
    5388:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;
    538c:	18c00044 	addi	r3,r3,1

      if (read_ignore == 0 && read_data == read_end)
    5390:	303feb1e 	bne	r6,zero,5340 <alt_avalon_spi_command+0x3c>
    5394:	437fea1e 	bne	r8,r13,5340 <alt_avalon_spi_command+0x3c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5398:	60c00037 	ldwio	r3,0(r12)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    539c:	18c0080c 	andi	r3,r3,32
    53a0:	183ffd26 	beq	r3,zero,5398 <alt_avalon_spi_command+0x94>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    53a4:	4a40004c 	andi	r9,r9,1
    53a8:	4800011e 	bne	r9,zero,53b0 <alt_avalon_spi_command+0xac>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    53ac:	20000335 	stwio	zero,12(r4)

  return read_length;
}
    53b0:	f800283a 	ret
      else if (write_zeros > 0)
    53b4:	50000326 	beq	r10,zero,53c4 <alt_avalon_spi_command+0xc0>
        write_zeros--;
    53b8:	52bfffc4 	addi	r10,r10,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    53bc:	20000135 	stwio	zero,4(r4)
    53c0:	003fee06 	br	537c <alt_avalon_spi_command+0x78>
        credits = -1024;
    53c4:	00ff0004 	movi	r3,-1024
    53c8:	003fec06 	br	537c <alt_avalon_spi_command+0x78>
        *read_data++ = (alt_u8)rxdata;
    53cc:	41400005 	stb	r5,0(r8)
    53d0:	42000044 	addi	r8,r8,1
    53d4:	003fed06 	br	538c <alt_avalon_spi_command+0x88>

000053d8 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
    53d8:	defffc04 	addi	sp,sp,-16
    53dc:	dc000015 	stw	r16,0(sp)
    53e0:	dfc00315 	stw	ra,12(sp)
    53e4:	dc800215 	stw	r18,8(sp)
    53e8:	dc400115 	stw	r17,4(sp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    53ec:	20801783 	ldbu	r2,94(r4)
{
    53f0:	2021883a 	mov	r16,r4
    if (dev->prefetcher_enable)
    53f4:	10002126 	beq	r2,zero,547c <alt_msgdma_irq+0xa4>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
    53f8:	20c00617 	ldw	r3,24(r4)
    53fc:	18800037 	ldwio	r2,0(r3)
        temporary_control = 
    5400:	013ffdc4 	movi	r4,-9
    5404:	1104703a 	and	r2,r2,r4
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    5408:	18800035 	stwio	r2,0(r3)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
    540c:	80800617 	ldw	r2,24(r16)
    5410:	00c00044 	movi	r3,1
    5414:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
    5418:	80800b17 	ldw	r2,44(r16)
    541c:	10000b26 	beq	r2,zero,544c <alt_msgdma_irq+0x74>
  NIOS2_READ_STATUS (context);
    5420:	0023303a 	rdctl	r17,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5424:	04bfff84 	movi	r18,-2
    5428:	8c86703a 	and	r3,r17,r18
    542c:	1801703a 	wrctl	status,r3
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback (dev->callback_context);
    5430:	81000c17 	ldw	r4,48(r16)
    5434:	103ee83a 	callr	r2
  NIOS2_READ_STATUS (status);
    5438:	0005303a 	rdctl	r2,status
  status &= ~NIOS2_STATUS_PIE_MSK;
    543c:	1484703a 	and	r2,r2,r18
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5440:	8c40004c 	andi	r17,r17,1
    5444:	88a2b03a 	or	r17,r17,r2
  NIOS2_WRITE_STATUS (status);
    5448:	8801703a 	wrctl	status,r17
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    544c:	80801783 	ldbu	r2,94(r16)
    5450:	10001326 	beq	r2,zero,54a0 <alt_msgdma_irq+0xc8>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
    5454:	80c00617 	ldw	r3,24(r16)
    5458:	18800037 	ldwio	r2,0(r3)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    545c:	10800214 	ori	r2,r2,8
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    5460:	18800035 	stwio	r2,0(r3)
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
}
    5464:	dfc00317 	ldw	ra,12(sp)
    5468:	dc800217 	ldw	r18,8(sp)
    546c:	dc400117 	ldw	r17,4(sp)
    5470:	dc000017 	ldw	r16,0(sp)
    5474:	dec00404 	addi	sp,sp,16
    5478:	f800283a 	ret
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
    547c:	20c00317 	ldw	r3,12(r4)
    5480:	18800137 	ldwio	r2,4(r3)
    5484:	013ffbc4 	movi	r4,-17
    5488:	1104703a 	and	r2,r2,r4
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    548c:	18800135 	stwio	r2,4(r3)
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
    5490:	80800317 	ldw	r2,12(r16)
    5494:	00c08004 	movi	r3,512
    5498:	10c00035 	stwio	r3,0(r2)
    549c:	003fde06 	br	5418 <alt_msgdma_irq+0x40>
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
    54a0:	80c00317 	ldw	r3,12(r16)
    54a4:	18800137 	ldwio	r2,4(r3)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    54a8:	10800414 	ori	r2,r2,16
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    54ac:	18800135 	stwio	r2,4(r3)
    return;
    54b0:	003fec06 	br	5464 <alt_msgdma_irq+0x8c>

000054b4 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
    54b4:	defffe04 	addi	sp,sp,-8
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
    54b8:	d1600e04 	addi	r5,gp,-32712
{
    54bc:	dc000015 	stw	r16,0(sp)
    54c0:	dfc00115 	stw	ra,4(sp)
    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
    54c4:	00058e40 	call	58e4 <alt_find_dev>
    54c8:	1021883a 	mov	r16,r2

    if (NULL == dev)
    54cc:	1000051e 	bne	r2,zero,54e4 <alt_msgdma_open+0x30>
    54d0:	d0a01217 	ldw	r2,-32696(gp)
    54d4:	10000826 	beq	r2,zero,54f8 <alt_msgdma_open+0x44>
    54d8:	103ee83a 	callr	r2
    {
        ALT_ERRNO = ENODEV;
    54dc:	00c004c4 	movi	r3,19
    54e0:	10c00015 	stw	r3,0(r2)
    }

    return dev;
}
    54e4:	8005883a 	mov	r2,r16
    54e8:	dfc00117 	ldw	ra,4(sp)
    54ec:	dc000017 	ldw	r16,0(sp)
    54f0:	dec00204 	addi	sp,sp,8
    54f4:	f800283a 	ret
    54f8:	d0a02804 	addi	r2,gp,-32608
    54fc:	003ff706 	br	54dc <alt_msgdma_open+0x28>

00005500 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
    5500:	defffb04 	addi	sp,sp,-20
    5504:	dc800315 	stw	r18,12(sp)
    5508:	dc400215 	stw	r17,8(sp)
    550c:	dc000115 	stw	r16,4(sp)
    5510:	dfc00415 	stw	ra,16(sp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
    5514:	20801783 	ldbu	r2,94(r4)
{
    5518:	2021883a 	mov	r16,r4
    551c:	2823883a 	mov	r17,r5
    5520:	3025883a 	mov	r18,r6
    if (dev->prefetcher_enable)
    5524:	10000726 	beq	r2,zero,5544 <alt_msgdma_init+0x44>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
    5528:	20800617 	ldw	r2,24(r4)
    552c:	00c00104 	movi	r3,4
    5530:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
    5534:	80800617 	ldw	r2,24(r16)
    5538:	10800037 	ldwio	r2,0(r2)
    553c:	1080010c 	andi	r2,r2,4
    5540:	103ffc1e 	bne	r2,zero,5534 <alt_msgdma_init+0x34>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    5544:	80800317 	ldw	r2,12(r16)
    5548:	00c00084 	movi	r3,2
    554c:	10c00135 	stwio	r3,4(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
    5550:	80c00317 	ldw	r3,12(r16)
    5554:	18800037 	ldwio	r2,0(r3)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
    5558:	1080100c 	andi	r2,r2,64
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
    555c:	103ffc1e 	bne	r2,zero,5550 <alt_msgdma_init+0x50>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
    5560:	18800137 	ldwio	r2,4(r3)
    5564:	013ffbc4 	movi	r4,-17
    5568:	1104703a 	and	r2,r2,r4
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    556c:	10800814 	ori	r2,r2,32
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    5570:	18800135 	stwio	r2,4(r3)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
    5574:	80800317 	ldw	r2,12(r16)
    5578:	10c00037 	ldwio	r3,0(r2)
    557c:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
    5580:	80801783 	ldbu	r2,94(r16)
    5584:	10000326 	beq	r2,zero,5594 <alt_msgdma_init+0x94>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
    5588:	80800617 	ldw	r2,24(r16)
    558c:	10c00437 	ldwio	r3,16(r2)
    5590:	10c00435 	stwio	r3,16(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
    5594:	8009883a 	mov	r4,r16
    5598:	d1600e04 	addi	r5,gp,-32712
    559c:	00058300 	call	5830 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
            
    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    55a0:	01800034 	movhi	r6,0
    55a4:	d8000015 	stw	zero,0(sp)
    55a8:	800f883a 	mov	r7,r16
    55ac:	3194f604 	addi	r6,r6,21464
    55b0:	900b883a 	mov	r5,r18
    55b4:	8809883a 	mov	r4,r17
    55b8:	00057240 	call	5724 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }
    
    return;

}
    55bc:	dfc00417 	ldw	ra,16(sp)
    55c0:	dc800317 	ldw	r18,12(sp)
    55c4:	dc400217 	ldw	r17,8(sp)
    55c8:	dc000117 	ldw	r16,4(sp)
    55cc:	dec00504 	addi	sp,sp,20
    55d0:	f800283a 	ret

000055d4 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    55d4:	0030e03a 	nextpc	et
    55d8:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    55e4:	0030e03a 	nextpc	et
    55e8:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    55f4:	0030e03a 	nextpc	et
    55f8:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5604:	0030e03a 	nextpc	et
    5608:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5614:	0030e03a 	nextpc	et
    5618:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5624:	0030e03a 	nextpc	et
    5628:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5634:	0030e03a 	nextpc	et
    5638:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5644:	0030e03a 	nextpc	et
    5648:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5654:	0030e03a 	nextpc	et
    5658:	00056641 	jmpi	5664 <alt_shadow_non_preemptive_interrupt>
	...

00005664 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
    5664:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
    5668:	dec00038 	rdprs	sp,sp,0
   */
    ALT_OS_INT_ENTER_ASM

    /* Re-enable interrupts if preemption into a new register set is enabled */
#ifdef ALTERA_VIC_DRIVER_PREEMPTION_INTO_NEW_REGISTER_SET_ENABLED
    rdctl r5, status
    566c:	000b303a 	rdctl	r5,status
    ori   r5, r5, NIOS2_STATUS_PIE_MSK
    5670:	29400054 	ori	r5,r5,1
    wrctl status, r5
    5674:	2801703a 	wrctl	status,r5
#endif

    ldw r4, 8(et)               /* load isr_context */
    5678:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
    567c:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
    5680:	ef7fff04 	addi	ea,ea,-4
    eret
    5684:	ef80083a 	eret

00005688 <alt_vic_irq_init>:
{
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
    5688:	20800117 	ldw	r2,4(r4)
    568c:	100690ba 	slli	r3,r2,2
    5690:	d0a02c04 	addi	r2,gp,-32592
    5694:	10c5883a 	add	r2,r2,r3
    5698:	11000015 	stw	r4,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
    569c:	20800017 	ldw	r2,0(r4)
    56a0:	00ffffc4 	movi	r3,-1
    56a4:	10c02235 	stwio	r3,136(r2)

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    56a8:	20c00704 	addi	r3,r4,28
    56ac:	0005883a 	mov	r2,zero
    56b0:	21800217 	ldw	r6,8(r4)
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    56b4:	21400017 	ldw	r5,0(r4)
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    56b8:	11800e36 	bltu	r2,r6,56f4 <alt_vic_irq_init+0x6c>
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
    56bc:	21c00517 	ldw	r7,20(r4)
    56c0:	00800034 	movhi	r2,0
    56c4:	10975304 	addi	r2,r2,23884
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    56c8:	0007883a 	mov	r3,zero
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
    56cc:	11800017 	ldw	r6,0(r2)
    56d0:	31c00f1e 	bne	r6,r7,5710 <alt_vic_irq_init+0x88>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
    56d4:	20800417 	ldw	r2,16(r4)
    56d8:	100490fa 	slli	r2,r2,3
    56dc:	10c4b03a 	or	r2,r2,r3
    56e0:	28802835 	stwio	r2,160(r5)
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
    56e4:	20800017 	ldw	r2,0(r4)
    56e8:	20c00617 	ldw	r3,24(r4)
    56ec:	10c02a35 	stwio	r3,168(r2)
}
    56f0:	f800283a 	ret
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    56f4:	100c90ba 	slli	r6,r2,2
    56f8:	298b883a 	add	r5,r5,r6
    56fc:	19800017 	ldw	r6,0(r3)
    5700:	29800035 	stwio	r6,0(r5)
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    5704:	10800044 	addi	r2,r2,1
    5708:	18c00104 	addi	r3,r3,4
    570c:	003fe806 	br	56b0 <alt_vic_irq_init+0x28>
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    5710:	18c00044 	addi	r3,r3,1
    5714:	19800218 	cmpnei	r6,r3,8
    5718:	10800104 	addi	r2,r2,4
    571c:	303feb1e 	bne	r6,zero,56cc <alt_vic_irq_init+0x44>
    5720:	003ff006 	br	56e4 <alt_vic_irq_init+0x5c>

00005724 <alt_ic_isr_register>:
{
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
    5724:	20001c1e 	bne	r4,zero,5798 <alt_ic_isr_register+0x74>
        return -1;

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
    5728:	d0e02c17 	ldw	r3,-32592(gp)

    if(irq < pdev->num_of_intr_ports)
    572c:	18800217 	ldw	r2,8(r3)
    5730:	2880192e 	bgeu	r5,r2,5798 <alt_ic_isr_register+0x74>
  NIOS2_READ_STATUS (context);
    5734:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5738:	013fff84 	movi	r4,-2
    573c:	1108703a 	and	r4,r2,r4
    5740:	2001703a 	wrctl	status,r4
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
    5744:	19000517 	ldw	r4,20(r3)
    5748:	2911383a 	mul	r8,r5,r4
    574c:	19000617 	ldw	r4,24(r3)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);

        if(isr)
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    5750:	18c00017 	ldw	r3,0(r3)
        offset = pdev->vec_addr + (irq * pdev->vec_size);
    5754:	2209883a 	add	r4,r4,r8
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
    5758:	21800215 	stw	r6,8(r4)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
    575c:	21c00315 	stw	r7,12(r4)
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    5760:	01000044 	movi	r4,1
    5764:	214a983a 	sll	r5,r4,r5
        if(isr)
    5768:	30000926 	beq	r6,zero,5790 <alt_ic_isr_register+0x6c>
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    576c:	19402135 	stwio	r5,132(r3)
  NIOS2_READ_STATUS (status);
    5770:	0007303a 	rdctl	r3,status
  status &= ~NIOS2_STATUS_PIE_MSK;
    5774:	013fff84 	movi	r4,-2
    5778:	1906703a 	and	r3,r3,r4
  status |= (context & NIOS2_STATUS_PIE_MSK);
    577c:	1080004c 	andi	r2,r2,1
    5780:	10c4b03a 	or	r2,r2,r3
  NIOS2_WRITE_STATUS (status);
    5784:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
    5788:	0005883a 	mov	r2,zero
    578c:	f800283a 	ret
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
    5790:	19402235 	stwio	r5,136(r3)
    5794:	003ff606 	br	5770 <alt_ic_isr_register+0x4c>
        return -1;
    5798:	00bfffc4 	movi	r2,-1
    }

    return -1;
}
    579c:	f800283a 	ret

000057a0 <alt_busy_sleep>:
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    57a0:	008147f4 	movhi	r2,1311
    57a4:	10ae1404 	addi	r2,r2,-18352
    57a8:	11001a2e 	bgeu	r2,r4,5814 <alt_busy_sleep+0x74>
  big_loops = us / (INT_MAX/
    57ac:	008147f4 	movhi	r2,1311
    57b0:	10ae1444 	addi	r2,r2,-18351
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    57b4:	01600034 	movhi	r5,32768
  big_loops = us / (INT_MAX/
    57b8:	2085203a 	divu	r2,r4,r2
    for(i=0;i<big_loops;i++)
    57bc:	0007883a 	mov	r3,zero
      __asm__ volatile (
    57c0:	297fffc4 	addi	r5,r5,-1
    57c4:	297fffc4 	addi	r5,r5,-1
    57c8:	283ffe1e 	bne	r5,zero,57c4 <alt_busy_sleep+0x24>
    for(i=0;i<big_loops;i++)
    57cc:	18c00044 	addi	r3,r3,1
    57d0:	18bffc16 	blt	r3,r2,57c4 <alt_busy_sleep+0x24>
    57d4:	00feb874 	movhi	r3,64225
    57d8:	18d1ebc4 	addi	r3,r3,18351
    57dc:	20c9883a 	add	r4,r4,r3
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    57e0:	00800a0e 	bge	zero,r2,580c <alt_busy_sleep+0x6c>
    57e4:	10c5383a 	mul	r2,r2,r3
    57e8:	00c147f4 	movhi	r3,1311
    57ec:	18ee1444 	addi	r3,r3,-18351
    57f0:	10c5883a 	add	r2,r2,r3
    57f4:	1105883a 	add	r2,r2,r4
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    57f8:	10800664 	muli	r2,r2,25
    __asm__ volatile (
    57fc:	10bfffc4 	addi	r2,r2,-1
    5800:	103ffe1e 	bne	r2,zero,57fc <alt_busy_sleep+0x5c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    5804:	0005883a 	mov	r2,zero
    5808:	f800283a 	ret
      us -= (INT_MAX/(ALT_CPU_FREQ/
    580c:	0005883a 	mov	r2,zero
    5810:	003ff806 	br	57f4 <alt_busy_sleep+0x54>
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5814:	21000664 	muli	r4,r4,25
    __asm__ volatile (
    5818:	213fffc4 	addi	r4,r4,-1
    581c:	013ffe16 	blt	zero,r4,5818 <alt_busy_sleep+0x78>
    5820:	003ff806 	br	5804 <alt_busy_sleep+0x64>

00005824 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5824:	f800283a 	ret

00005828 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    5828:	3005883a 	mov	r2,r6
  return len;
}
    582c:	f800283a 	ret

00005830 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5830:	20000226 	beq	r4,zero,583c <alt_dev_llist_insert+0xc>
    5834:	20800217 	ldw	r2,8(r4)
    5838:	10000b1e 	bne	r2,zero,5868 <alt_dev_llist_insert+0x38>
    583c:	d0a01217 	ldw	r2,-32696(gp)
    5840:	10001126 	beq	r2,zero,5888 <alt_dev_llist_insert+0x58>
{
    5844:	deffff04 	addi	sp,sp,-4
    5848:	dfc00015 	stw	ra,0(sp)
    584c:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
    5850:	00c00584 	movi	r3,22
    5854:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    5858:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    585c:	dfc00017 	ldw	ra,0(sp)
    5860:	dec00104 	addi	sp,sp,4
    5864:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    5868:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
    586c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    5870:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    5874:	28800017 	ldw	r2,0(r5)
    5878:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    587c:	29000015 	stw	r4,0(r5)
  return 0;  
    5880:	0005883a 	mov	r2,zero
    5884:	f800283a 	ret
    5888:	d0a02804 	addi	r2,gp,-32608
    ALT_ERRNO = EINVAL;
    588c:	00c00584 	movi	r3,22
    5890:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    5894:	00bffa84 	movi	r2,-22
}
    5898:	f800283a 	ret

0000589c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    589c:	defffd04 	addi	sp,sp,-12
    58a0:	dc400115 	stw	r17,4(sp)
    58a4:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    58a8:	04400034 	movhi	r17,0
    58ac:	04000034 	movhi	r16,0
{
    58b0:	dfc00215 	stw	ra,8(sp)
    58b4:	84167304 	addi	r16,r16,22988
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    58b8:	8c567144 	addi	r17,r17,22981
    58bc:	843fff04 	addi	r16,r16,-4
    58c0:	8440052e 	bgeu	r16,r17,58d8 <_do_ctors+0x3c>
        (*ctor) (); 
}
    58c4:	dfc00217 	ldw	ra,8(sp)
    58c8:	dc400117 	ldw	r17,4(sp)
    58cc:	dc000017 	ldw	r16,0(sp)
    58d0:	dec00304 	addi	sp,sp,12
    58d4:	f800283a 	ret
        (*ctor) (); 
    58d8:	80800017 	ldw	r2,0(r16)
    58dc:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    58e0:	003ff606 	br	58bc <_do_ctors+0x20>

000058e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    58e4:	defffb04 	addi	sp,sp,-20
    58e8:	dcc00315 	stw	r19,12(sp)
    58ec:	dc800215 	stw	r18,8(sp)
    58f0:	dc400115 	stw	r17,4(sp)
    58f4:	dc000015 	stw	r16,0(sp)
    58f8:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
    58fc:	2c000017 	ldw	r16,0(r5)
{
    5900:	2027883a 	mov	r19,r4
    5904:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
    5908:	0004ca80 	call	4ca8 <strlen>
    590c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5910:	8440091e 	bne	r16,r17,5938 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5914:	0021883a 	mov	r16,zero
}
    5918:	8005883a 	mov	r2,r16
    591c:	dfc00417 	ldw	ra,16(sp)
    5920:	dcc00317 	ldw	r19,12(sp)
    5924:	dc800217 	ldw	r18,8(sp)
    5928:	dc400117 	ldw	r17,4(sp)
    592c:	dc000017 	ldw	r16,0(sp)
    5930:	dec00504 	addi	sp,sp,20
    5934:	f800283a 	ret
    if (!memcmp (next->name, name, len))
    5938:	81000217 	ldw	r4,8(r16)
    593c:	900d883a 	mov	r6,r18
    5940:	980b883a 	mov	r5,r19
    5944:	00059580 	call	5958 <memcmp>
    5948:	103ff326 	beq	r2,zero,5918 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
    594c:	84000017 	ldw	r16,0(r16)
    5950:	003fef06 	br	5910 <alt_find_dev+0x2c>

00005954 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5954:	f800283a 	ret

00005958 <memcmp>:
    5958:	0007883a 	mov	r3,zero
    595c:	30c0021e 	bne	r6,r3,5968 <memcmp+0x10>
    5960:	0005883a 	mov	r2,zero
    5964:	f800283a 	ret
    5968:	20c5883a 	add	r2,r4,r3
    596c:	18c00044 	addi	r3,r3,1
    5970:	28cf883a 	add	r7,r5,r3
    5974:	10800003 	ldbu	r2,0(r2)
    5978:	39ffffc3 	ldbu	r7,-1(r7)
    597c:	11fff726 	beq	r2,r7,595c <memcmp+0x4>
    5980:	11c5c83a 	sub	r2,r2,r7
    5984:	f800283a 	ret
    5988:	0201ffff 	0x201ffff
    598c:	883a0000 	call	883a000 <_gp+0x8829dbc>
    5990:	010d00ff 	0x10d00ff
    5994:	01010002 	0x1010002
	...
    59a0:	010d00ff 	0x10d00ff
    59a4:	01010004 	movi	r4,1024
    59a8:	00000100 	call	10 <_exit+0x4>
    59ac:	00000000 	call	0 <__alt_mem_instruction_rom_0>
    59b0:	011100ff 	0x11100ff
    59b4:	01010004 	movi	r4,1024
    59b8:	7f000105 	stb	fp,4(r15)
    59bc:	007d0000 	call	7d000 <_gp+0x6cdbc>
    59c0:	00000000 	call	0 <__alt_mem_instruction_rom_0>
    59c4:	01883a00 	call	1883a0 <_gp+0x17815c>
    59c8:	0000346c 	andhi	zero,zero,209
