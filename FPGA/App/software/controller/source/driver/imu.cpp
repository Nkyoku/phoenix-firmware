#include "imu.hpp"
#include <altera_avalon_spi.h>
#include <sys/unistd.h>
#include "../peripheral/imu_spim.hpp"

enum : uint32_t {
    ICM42688_REG_BANK_SEL = 0x76,

    ICM42688_BANK0_DEVICE_CONFIG = 0x011,
    ICM42688_BANK0_DRIVE_CONFIG = 0x013,
    ICM42688_BANK0_INT_CONFIG = 0x014,
    ICM42688_BANK0_FIFO_CONFIG = 0x016,
    ICM42688_BANK0_TEMP_DATA1 = 0x01D,
    ICM42688_BANK0_TEMP_DATA0 = 0x01E,
    ICM42688_BANK0_ACCEL_DATA_X1 = 0x01F,
    ICM42688_BANK0_ACCEL_DATA_X0 = 0x020,
    ICM42688_BANK0_ACCEL_DATA_Y1 = 0x021,
    ICM42688_BANK0_ACCEL_DATA_Y0 = 0x022,
    ICM42688_BANK0_ACCEL_DATA_Z1 = 0x023,
    ICM42688_BANK0_ACCEL_DATA_Z0 = 0x024,
    ICM42688_BANK0_GYRO_DATA_X1 = 0x025,
    ICM42688_BANK0_GYRO_DATA_X0 = 0x026,
    ICM42688_BANK0_GYRO_DATA_Y1 = 0x027,
    ICM42688_BANK0_GYRO_DATA_Y0 = 0x028,
    ICM42688_BANK0_GYRO_DATA_Z1 = 0x029,
    ICM42688_BANK0_GYRO_DATA_Z0 = 0x02A,
    ICM42688_BANK0_TMST_FSYNCH = 0x02B,
    ICM42688_BANK0_TMST_FSYNCL = 0x02C,
    ICM42688_BANK0_INT_STATUS = 0x02D,
    ICM42688_BANK0_FIFO_COUNTH = 0x02E,
    ICM42688_BANK0_FIFO_COUNTL = 0x02F,
    ICM42688_BANK0_FIFO_DATA = 0x030,
    ICM42688_BANK0_APEX_DATA0 = 0x031,
    ICM42688_BANK0_APEX_DATA1 = 0x032,
    ICM42688_BANK0_APEX_DATA2 = 0x033,
    ICM42688_BANK0_APEX_DATA3 = 0x034,
    ICM42688_BANK0_APEX_DATA4 = 0x035,
    ICM42688_BANK0_APEX_DATA5 = 0x036,
    ICM42688_BANK0_INT_STATUS2 = 0x037,
    ICM42688_BANK0_INT_STATUS3 = 0x038,
    ICM42688_BANK0_SIGNAL_PATH_RESET = 0x04B,
    ICM42688_BANK0_INTF_CONFIG0 = 0x04C,
    ICM42688_BANK0_INTF_CONFIG1 = 0x04D,
    ICM42688_BANK0_PWR_MGMT0 = 0x04E,
    ICM42688_BANK0_GYRO_CONFIG0 = 0x04F,
    ICM42688_BANK0_ACCEL_CONFIG0 = 0x050,
    ICM42688_BANK0_GYRO_CONFIG1 = 0x051,
    ICM42688_BANK0_GYRO_ACCEL_CONFIG0 = 0x052,
    ICM42688_BANK0_ACCEL_CONFIG1 = 0x053,
    ICM42688_BANK0_TMST_CONFIG = 0x054,
    ICM42688_BANK0_APEX_CONFIG0 = 0x056,
    ICM42688_BANK0_SMD_CONFIG = 0x057,
    ICM42688_BANK0_FIFO_CONFIG1 = 0x05F,
    ICM42688_BANK0_FIFO_CONFIG2 = 0x060,
    ICM42688_BANK0_FIFO_CONFIG3 = 0x061,
    ICM42688_BANK0_FSYNC_CONFIG = 0x062,
    ICM42688_BANK0_INT_CONFIG0 = 0x063,
    ICM42688_BANK0_INT_CONFIG1 = 0x064,
    ICM42688_BANK0_INT_SOURCE0 = 0x065,
    ICM42688_BANK0_INT_SOURCE1 = 0x066,
    ICM42688_BANK0_INT_SOURCE3 = 0x068,
    ICM42688_BANK0_INT_SOURCE4 = 0x069,
    ICM42688_BANK0_FIFO_LOST_PKT0 = 0x06C,
    ICM42688_BANK0_FIFO_LOST_PKT1 = 0x06D,
    ICM42688_BANK0_SELF_TEST_CONFIG = 0x070,
    ICM42688_BANK0_WHO_AM_I = 0x075,

    ICM42688_BANK1_SENSOR_CONFIG0 = 0x103,
    ICM42688_BANK1_GYRO_CONFIG_STATIC2 = 0x10B,
    ICM42688_BANK1_GYRO_CONFIG_STATIC3 = 0x10C,
    ICM42688_BANK1_GYRO_CONFIG_STATIC4 = 0x10D,
    ICM42688_BANK1_GYRO_CONFIG_STATIC5 = 0x10E,
    ICM42688_BANK1_GYRO_CONFIG_STATIC6 = 0x10F,
    ICM42688_BANK1_GYRO_CONFIG_STATIC7 = 0x110,
    ICM42688_BANK1_GYRO_CONFIG_STATIC8 = 0x111,
    ICM42688_BANK1_GYRO_CONFIG_STATIC9 = 0x112,
    ICM42688_BANK1_GYRO_CONFIG_STATIC10 = 0x113,
    ICM42688_BANK1_XG_ST_DATA = 0x15F,
    ICM42688_BANK1_YG_ST_DATA = 0x160,
    ICM42688_BANK1_ZG_ST_DATA = 0x161,
    ICM42688_BANK1_TMSTVAL0 = 0x162,
    ICM42688_BANK1_TMSTVAL1 = 0x163,
    ICM42688_BANK1_TMSTVAL2 = 0x164,
    ICM42688_BANK1_INTF_CONFIG4 = 0x17A,
    ICM42688_BANK1_INTF_CONFIG5 = 0x17B,
    ICM42688_BANK1_INTF_CONFIG6 = 0x17C,

    ICM42688_BANK2_ACCEL_CONFIG_STATIC2 = 0x203,
    ICM42688_BANK2_ACCEL_CONFIG_STATIC3 = 0x204,
    ICM42688_BANK2_ACCEL_CONFIG_STATIC4 = 0x205,
    ICM42688_BANK2_XA_ST_DATA = 0x23B,
    ICM42688_BANK2_YA_ST_DATA = 0x23C,
    ICM42688_BANK2_ZA_ST_DATA = 0x23D,

    ICM42688_BANK4_APEX_CONFIG1 = 0x440,
    ICM42688_BANK4_APEX_CONFIG2 = 0x441,
    ICM42688_BANK4_APEX_CONFIG3 = 0x442,
    ICM42688_BANK4_APEX_CONFIG4 = 0x443,
    ICM42688_BANK4_APEX_CONFIG5 = 0x444,
    ICM42688_BANK4_APEX_CONFIG6 = 0x445,
    ICM42688_BANK4_APEX_CONFIG7 = 0x446,
    ICM42688_BANK4_APEX_CONFIG8 = 0x447,
    ICM42688_BANK4_APEX_CONFIG9 = 0x448,
    ICM42688_BANK4_ACCEL_WOM_X_THR = 0x44A,
    ICM42688_BANK4_ACCEL_WOM_Y_THR = 0x44B,
    ICM42688_BANK4_ACCEL_WOM_Z_THR = 0x44C,
    ICM42688_BANK4_INT_SOURCE6 = 0x44D,
    ICM42688_BANK4_INT_SOURCE7 = 0x44E,
    ICM42688_BANK4_INT_SOURCE8 = 0x44F,
    ICM42688_BANK4_INT_SOURCE9 = 0x450,
    ICM42688_BANK4_INT_SOURCE10 = 0x451,
    ICM42688_BANK4_OFFSET_USER0 = 0x477,
    ICM42688_BANK4_OFFSET_USER1 = 0x478,
    ICM42688_BANK4_OFFSET_USER2 = 0x479,
    ICM42688_BANK4_OFFSET_USER3 = 0x47A,
    ICM42688_BANK4_OFFSET_USER4 = 0x47B,
    ICM42688_BANK4_OFFSET_USER5 = 0x47C,
    ICM42688_BANK4_OFFSET_USER6 = 0x47D,
    ICM42688_BANK4_OFFSET_USER7 = 0x47E,
    ICM42688_BANK4_OFFSET_USER8 = 0x47F,
};

bool Imu::Initialize(void) {
    IMU_SPIM_SetPassthrough(IMU_SPIM_BASE, true);
    _Bank = -1;

    // リセットする
    WriteRegister(ICM42688_BANK0_DEVICE_CONFIG, 0x01);
    usleep(1000);

    // ICM42688-Pの存在を確かめる
    if (ReadRegister(ICM42688_BANK0_WHO_AM_I) != 0x47) {
        return false;
    }

    // レジスタを初期化する
    WriteRegister(ICM42688_BANK1_INTF_CONFIG5, 0x04);  // PIN9_FUNCTION <= CLKIN
    WriteRegister(ICM42688_BANK0_INTF_CONFIG0, 0x13);  // SENSOR_DATA_ENDIAN <= Big Endian, UI_SIFS_CFG <= Disable I2C
    WriteRegister(ICM42688_BANK0_INTF_CONFIG1, 0x95);  // RTC_MODE <= RTC clock input is required
    WriteRegister(ICM42688_BANK0_PWR_MGMT0, 0x0F);     // GYRO_MODE <= LN Mode, ACCEL_MODE <= LN Mode
    usleep(200);
    WriteRegister(ICM42688_BANK0_GYRO_CONFIG1, 0xF6);  // TEMP_FILT_BW <= (DLPF BW = 5Hz; DLPF Latency = 32ms), GYRO_UI_FILT_ORD = 1 (2nd Order)
    WriteRegister(ICM42688_BANK0_GYRO_ACCEL_CONFIG0, 0x77); // ACCEL_UI_FILT_BW <= 7 (Fc = 21.3Hz), GYRO_UI_FILT_BW <= 7 (Fc = 21.3Hz)
    WriteRegister(ICM42688_BANK0_INT_CONFIG, 0x02);   // INT1_MODE <= Pulsed mode, INT1_DRIVE_CIRCUIT <= Push pull, INT1_POLARITY <= Active low
    WriteRegister(ICM42688_BANK0_INT_CONFIG1, 0x00);  // INT_ASYNC_RESET <= 0
    //WriteRegister(ICM42688_BANK0_INT_CONFIG0, 0x20); // UI_DRDY_INT_CLEAR <= Clear on Sensor Register Read
    WriteRegister(ICM42688_BANK0_INT_SOURCE0, 0x08);  // UI_DRDY_INT1_EN <= UI data ready interrupt routed to INT1

    // IMU_SPIMによる自動アクセスを有効化する
    IMU_SPIM_SetPassthrough(IMU_SPIM_BASE, false);
    _Valid = true;

    return true;
}

void Imu::ReadData(ImuResult_t *data) {
    data->TempData = IMU_SPIM_GetTempData(IMU_SPIM_BASE);
    data->AccelDataX = IMU_SPIM_GetAccelDataX(IMU_SPIM_BASE);
    data->AccelDataY = IMU_SPIM_GetAccelDataY(IMU_SPIM_BASE);
    data->AccelDataZ = IMU_SPIM_GetAccelDataZ(IMU_SPIM_BASE);
    data->GyroDataX = IMU_SPIM_GetGyroDataX(IMU_SPIM_BASE);
    data->GyroDataY = IMU_SPIM_GetGyroDataY(IMU_SPIM_BASE);
    data->GyroDataZ = IMU_SPIM_GetGyroDataZ(IMU_SPIM_BASE);
    //ReadRegisters(ICM42688_BANK0_TEMP_DATA1, sizeof(ImuResult_t), data);
}

void Imu::SetBank(uint32_t bank) {
    if (bank != _Bank) {
        _Bank = bank;
        uint8_t buffer[2];
        buffer[0] = ICM42688_REG_BANK_SEL;
        buffer[1] = bank;
        alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
    }
}

uint8_t Imu::ReadRegister(uint32_t address) {
    SetBank((address >> 8) & 0x7);
    uint8_t buffer[1];
    buffer[0] = 0x80 | (address & 0x7F);
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, sizeof(buffer), buffer, 0);
    return buffer[0];
}

void Imu::WriteRegister(uint32_t address, uint8_t value) {
    SetBank((address >> 8) & 0x7);
    uint8_t buffer[2];
    buffer[0] = address & 0x7F;
    buffer[1] = value;
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, 0, nullptr, 0);
}

void Imu::ReadRegisters(uint32_t address, uint32_t length, void *data) {
    SetBank((address >> 8) & 0x7);
    uint8_t buffer[1];
    buffer[0] = 0x80 | (address & 0x7F);
    alt_avalon_spi_command(SPI_BASE, SPI_SLAVE, sizeof(buffer), buffer, length, reinterpret_cast<alt_u8 *>(data), 0);
}

uint8_t Imu::_Bank = 0;
bool Imu::_Valid = false;
