// controller_mm_interconnect_4.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module controller_mm_interconnect_4 (
		input  wire        clk_0_clk_clk,                                 //                               clk_0_clk.clk
		input  wire        data_ram_0_reset1_reset_bridge_in_reset_reset, // data_ram_0_reset1_reset_bridge_in_reset.reset
		input  wire        msgdma_0_reset_n_reset_bridge_in_reset_reset,  //  msgdma_0_reset_n_reset_bridge_in_reset.reset
		input  wire [15:0] msgdma_0_mm_read_address,                      //                        msgdma_0_mm_read.address
		output wire        msgdma_0_mm_read_waitrequest,                  //                                        .waitrequest
		input  wire        msgdma_0_mm_read_read,                         //                                        .read
		output wire [7:0]  msgdma_0_mm_read_readdata,                     //                                        .readdata
		output wire        msgdma_0_mm_read_readdatavalid,                //                                        .readdatavalid
		output wire [10:0] data_ram_0_s2_address,                         //                           data_ram_0_s2.address
		output wire        data_ram_0_s2_write,                           //                                        .write
		input  wire [31:0] data_ram_0_s2_readdata,                        //                                        .readdata
		output wire [31:0] data_ram_0_s2_writedata,                       //                                        .writedata
		output wire [3:0]  data_ram_0_s2_byteenable,                      //                                        .byteenable
		output wire        data_ram_0_s2_chipselect,                      //                                        .chipselect
		output wire        data_ram_0_s2_clken                            //                                        .clken
	);

	wire         msgdma_0_mm_read_translator_avalon_universal_master_0_waitrequest;   // msgdma_0_mm_read_agent:av_waitrequest -> msgdma_0_mm_read_translator:uav_waitrequest
	wire   [7:0] msgdma_0_mm_read_translator_avalon_universal_master_0_readdata;      // msgdma_0_mm_read_agent:av_readdata -> msgdma_0_mm_read_translator:uav_readdata
	wire         msgdma_0_mm_read_translator_avalon_universal_master_0_debugaccess;   // msgdma_0_mm_read_translator:uav_debugaccess -> msgdma_0_mm_read_agent:av_debugaccess
	wire  [15:0] msgdma_0_mm_read_translator_avalon_universal_master_0_address;       // msgdma_0_mm_read_translator:uav_address -> msgdma_0_mm_read_agent:av_address
	wire         msgdma_0_mm_read_translator_avalon_universal_master_0_read;          // msgdma_0_mm_read_translator:uav_read -> msgdma_0_mm_read_agent:av_read
	wire   [0:0] msgdma_0_mm_read_translator_avalon_universal_master_0_byteenable;    // msgdma_0_mm_read_translator:uav_byteenable -> msgdma_0_mm_read_agent:av_byteenable
	wire         msgdma_0_mm_read_translator_avalon_universal_master_0_readdatavalid; // msgdma_0_mm_read_agent:av_readdatavalid -> msgdma_0_mm_read_translator:uav_readdatavalid
	wire         msgdma_0_mm_read_translator_avalon_universal_master_0_lock;          // msgdma_0_mm_read_translator:uav_lock -> msgdma_0_mm_read_agent:av_lock
	wire         msgdma_0_mm_read_translator_avalon_universal_master_0_write;         // msgdma_0_mm_read_translator:uav_write -> msgdma_0_mm_read_agent:av_write
	wire   [7:0] msgdma_0_mm_read_translator_avalon_universal_master_0_writedata;     // msgdma_0_mm_read_translator:uav_writedata -> msgdma_0_mm_read_agent:av_writedata
	wire   [0:0] msgdma_0_mm_read_translator_avalon_universal_master_0_burstcount;    // msgdma_0_mm_read_translator:uav_burstcount -> msgdma_0_mm_read_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                   // rsp_mux:src_valid -> msgdma_0_mm_read_agent:rp_valid
	wire  [58:0] rsp_mux_src_data;                                                    // rsp_mux:src_data -> msgdma_0_mm_read_agent:rp_data
	wire         rsp_mux_src_ready;                                                   // msgdma_0_mm_read_agent:rp_ready -> rsp_mux:src_ready
	wire   [0:0] rsp_mux_src_channel;                                                 // rsp_mux:src_channel -> msgdma_0_mm_read_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                           // rsp_mux:src_startofpacket -> msgdma_0_mm_read_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                             // rsp_mux:src_endofpacket -> msgdma_0_mm_read_agent:rp_endofpacket
	wire  [31:0] data_ram_0_s2_agent_m0_readdata;                                     // data_ram_0_s2_translator:uav_readdata -> data_ram_0_s2_agent:m0_readdata
	wire         data_ram_0_s2_agent_m0_waitrequest;                                  // data_ram_0_s2_translator:uav_waitrequest -> data_ram_0_s2_agent:m0_waitrequest
	wire         data_ram_0_s2_agent_m0_debugaccess;                                  // data_ram_0_s2_agent:m0_debugaccess -> data_ram_0_s2_translator:uav_debugaccess
	wire  [15:0] data_ram_0_s2_agent_m0_address;                                      // data_ram_0_s2_agent:m0_address -> data_ram_0_s2_translator:uav_address
	wire   [3:0] data_ram_0_s2_agent_m0_byteenable;                                   // data_ram_0_s2_agent:m0_byteenable -> data_ram_0_s2_translator:uav_byteenable
	wire         data_ram_0_s2_agent_m0_read;                                         // data_ram_0_s2_agent:m0_read -> data_ram_0_s2_translator:uav_read
	wire         data_ram_0_s2_agent_m0_readdatavalid;                                // data_ram_0_s2_translator:uav_readdatavalid -> data_ram_0_s2_agent:m0_readdatavalid
	wire         data_ram_0_s2_agent_m0_lock;                                         // data_ram_0_s2_agent:m0_lock -> data_ram_0_s2_translator:uav_lock
	wire  [31:0] data_ram_0_s2_agent_m0_writedata;                                    // data_ram_0_s2_agent:m0_writedata -> data_ram_0_s2_translator:uav_writedata
	wire         data_ram_0_s2_agent_m0_write;                                        // data_ram_0_s2_agent:m0_write -> data_ram_0_s2_translator:uav_write
	wire   [2:0] data_ram_0_s2_agent_m0_burstcount;                                   // data_ram_0_s2_agent:m0_burstcount -> data_ram_0_s2_translator:uav_burstcount
	wire         data_ram_0_s2_agent_rf_source_valid;                                 // data_ram_0_s2_agent:rf_source_valid -> data_ram_0_s2_agent_rsp_fifo:in_valid
	wire  [86:0] data_ram_0_s2_agent_rf_source_data;                                  // data_ram_0_s2_agent:rf_source_data -> data_ram_0_s2_agent_rsp_fifo:in_data
	wire         data_ram_0_s2_agent_rf_source_ready;                                 // data_ram_0_s2_agent_rsp_fifo:in_ready -> data_ram_0_s2_agent:rf_source_ready
	wire         data_ram_0_s2_agent_rf_source_startofpacket;                         // data_ram_0_s2_agent:rf_source_startofpacket -> data_ram_0_s2_agent_rsp_fifo:in_startofpacket
	wire         data_ram_0_s2_agent_rf_source_endofpacket;                           // data_ram_0_s2_agent:rf_source_endofpacket -> data_ram_0_s2_agent_rsp_fifo:in_endofpacket
	wire         data_ram_0_s2_agent_rsp_fifo_out_valid;                              // data_ram_0_s2_agent_rsp_fifo:out_valid -> data_ram_0_s2_agent:rf_sink_valid
	wire  [86:0] data_ram_0_s2_agent_rsp_fifo_out_data;                               // data_ram_0_s2_agent_rsp_fifo:out_data -> data_ram_0_s2_agent:rf_sink_data
	wire         data_ram_0_s2_agent_rsp_fifo_out_ready;                              // data_ram_0_s2_agent:rf_sink_ready -> data_ram_0_s2_agent_rsp_fifo:out_ready
	wire         data_ram_0_s2_agent_rsp_fifo_out_startofpacket;                      // data_ram_0_s2_agent_rsp_fifo:out_startofpacket -> data_ram_0_s2_agent:rf_sink_startofpacket
	wire         data_ram_0_s2_agent_rsp_fifo_out_endofpacket;                        // data_ram_0_s2_agent_rsp_fifo:out_endofpacket -> data_ram_0_s2_agent:rf_sink_endofpacket
	wire         msgdma_0_mm_read_agent_cp_valid;                                     // msgdma_0_mm_read_agent:cp_valid -> router:sink_valid
	wire  [58:0] msgdma_0_mm_read_agent_cp_data;                                      // msgdma_0_mm_read_agent:cp_data -> router:sink_data
	wire         msgdma_0_mm_read_agent_cp_ready;                                     // router:sink_ready -> msgdma_0_mm_read_agent:cp_ready
	wire         msgdma_0_mm_read_agent_cp_startofpacket;                             // msgdma_0_mm_read_agent:cp_startofpacket -> router:sink_startofpacket
	wire         msgdma_0_mm_read_agent_cp_endofpacket;                               // msgdma_0_mm_read_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                    // router:src_valid -> cmd_demux:sink_valid
	wire  [58:0] router_src_data;                                                     // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                    // cmd_demux:sink_ready -> router:src_ready
	wire   [0:0] router_src_channel;                                                  // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                            // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                              // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         data_ram_0_s2_agent_rp_valid;                                        // data_ram_0_s2_agent:rp_valid -> router_001:sink_valid
	wire  [85:0] data_ram_0_s2_agent_rp_data;                                         // data_ram_0_s2_agent:rp_data -> router_001:sink_data
	wire         data_ram_0_s2_agent_rp_ready;                                        // router_001:sink_ready -> data_ram_0_s2_agent:rp_ready
	wire         data_ram_0_s2_agent_rp_startofpacket;                                // data_ram_0_s2_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         data_ram_0_s2_agent_rp_endofpacket;                                  // data_ram_0_s2_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [58:0] cmd_demux_src0_data;                                                 // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [0:0] cmd_demux_src0_channel;                                              // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                        // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                          // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [58:0] rsp_demux_src0_data;                                                 // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [0:0] rsp_demux_src0_channel;                                              // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                        // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                          // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         cmd_mux_src_valid;                                                   // cmd_mux:src_valid -> data_ram_0_s2_cmd_width_adapter:in_valid
	wire  [58:0] cmd_mux_src_data;                                                    // cmd_mux:src_data -> data_ram_0_s2_cmd_width_adapter:in_data
	wire         cmd_mux_src_ready;                                                   // data_ram_0_s2_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [0:0] cmd_mux_src_channel;                                                 // cmd_mux:src_channel -> data_ram_0_s2_cmd_width_adapter:in_channel
	wire         cmd_mux_src_startofpacket;                                           // cmd_mux:src_startofpacket -> data_ram_0_s2_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                             // cmd_mux:src_endofpacket -> data_ram_0_s2_cmd_width_adapter:in_endofpacket
	wire         data_ram_0_s2_cmd_width_adapter_src_valid;                           // data_ram_0_s2_cmd_width_adapter:out_valid -> data_ram_0_s2_agent:cp_valid
	wire  [85:0] data_ram_0_s2_cmd_width_adapter_src_data;                            // data_ram_0_s2_cmd_width_adapter:out_data -> data_ram_0_s2_agent:cp_data
	wire         data_ram_0_s2_cmd_width_adapter_src_ready;                           // data_ram_0_s2_agent:cp_ready -> data_ram_0_s2_cmd_width_adapter:out_ready
	wire   [0:0] data_ram_0_s2_cmd_width_adapter_src_channel;                         // data_ram_0_s2_cmd_width_adapter:out_channel -> data_ram_0_s2_agent:cp_channel
	wire         data_ram_0_s2_cmd_width_adapter_src_startofpacket;                   // data_ram_0_s2_cmd_width_adapter:out_startofpacket -> data_ram_0_s2_agent:cp_startofpacket
	wire         data_ram_0_s2_cmd_width_adapter_src_endofpacket;                     // data_ram_0_s2_cmd_width_adapter:out_endofpacket -> data_ram_0_s2_agent:cp_endofpacket
	wire         router_001_src_valid;                                                // router_001:src_valid -> data_ram_0_s2_rsp_width_adapter:in_valid
	wire  [85:0] router_001_src_data;                                                 // router_001:src_data -> data_ram_0_s2_rsp_width_adapter:in_data
	wire         router_001_src_ready;                                                // data_ram_0_s2_rsp_width_adapter:in_ready -> router_001:src_ready
	wire   [0:0] router_001_src_channel;                                              // router_001:src_channel -> data_ram_0_s2_rsp_width_adapter:in_channel
	wire         router_001_src_startofpacket;                                        // router_001:src_startofpacket -> data_ram_0_s2_rsp_width_adapter:in_startofpacket
	wire         router_001_src_endofpacket;                                          // router_001:src_endofpacket -> data_ram_0_s2_rsp_width_adapter:in_endofpacket
	wire         data_ram_0_s2_rsp_width_adapter_src_valid;                           // data_ram_0_s2_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [58:0] data_ram_0_s2_rsp_width_adapter_src_data;                            // data_ram_0_s2_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire         data_ram_0_s2_rsp_width_adapter_src_ready;                           // rsp_demux:sink_ready -> data_ram_0_s2_rsp_width_adapter:out_ready
	wire   [0:0] data_ram_0_s2_rsp_width_adapter_src_channel;                         // data_ram_0_s2_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire         data_ram_0_s2_rsp_width_adapter_src_startofpacket;                   // data_ram_0_s2_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire         data_ram_0_s2_rsp_width_adapter_src_endofpacket;                     // data_ram_0_s2_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire         data_ram_0_s2_agent_rdata_fifo_src_valid;                            // data_ram_0_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] data_ram_0_s2_agent_rdata_fifo_src_data;                             // data_ram_0_s2_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         data_ram_0_s2_agent_rdata_fifo_src_ready;                            // avalon_st_adapter:in_0_ready -> data_ram_0_s2_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                       // avalon_st_adapter:out_0_valid -> data_ram_0_s2_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                        // avalon_st_adapter:out_0_data -> data_ram_0_s2_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                       // data_ram_0_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                       // avalon_st_adapter:out_0_error -> data_ram_0_s2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_0_mm_read_translator (
		.clk                    (clk_0_clk_clk),                                                       //                       clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (msgdma_0_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_0_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_0_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_0_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_0_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_0_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_0_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_0_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_0_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_0_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_0_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_0_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_0_mm_read_waitrequest),                                        //                          .waitrequest
		.av_read                (msgdma_0_mm_read_read),                                               //                          .read
		.av_readdata            (msgdma_0_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (msgdma_0_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                //               (terminated)
		.av_byteenable          (1'b1),                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                //               (terminated)
		.av_write               (1'b0),                                                                //               (terminated)
		.av_writedata           (8'b00000000),                                                         //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) data_ram_0_s2_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (data_ram_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (data_ram_0_s2_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (data_ram_0_s2_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (data_ram_0_s2_agent_m0_read),                   //                         .read
		.uav_write              (data_ram_0_s2_agent_m0_write),                  //                         .write
		.uav_waitrequest        (data_ram_0_s2_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (data_ram_0_s2_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (data_ram_0_s2_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (data_ram_0_s2_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (data_ram_0_s2_agent_m0_writedata),              //                         .writedata
		.uav_lock               (data_ram_0_s2_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (data_ram_0_s2_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (data_ram_0_s2_address),                         //      avalon_anti_slave_0.address
		.av_write               (data_ram_0_s2_write),                           //                         .write
		.av_readdata            (data_ram_0_s2_readdata),                        //                         .readdata
		.av_writedata           (data_ram_0_s2_writedata),                       //                         .writedata
		.av_byteenable          (data_ram_0_s2_byteenable),                      //                         .byteenable
		.av_chipselect          (data_ram_0_s2_chipselect),                      //                         .chipselect
		.av_clken               (data_ram_0_s2_clken),                           //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (58),
		.PKT_ORI_BURST_SIZE_L      (56),
		.PKT_RESPONSE_STATUS_H     (55),
		.PKT_RESPONSE_STATUS_L     (54),
		.PKT_QOS_H                 (43),
		.PKT_QOS_L                 (43),
		.PKT_DATA_SIDEBAND_H       (41),
		.PKT_DATA_SIDEBAND_L       (41),
		.PKT_ADDR_SIDEBAND_H       (40),
		.PKT_ADDR_SIDEBAND_L       (40),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_CACHE_H               (53),
		.PKT_CACHE_L               (50),
		.PKT_THREAD_ID_H           (46),
		.PKT_THREAD_ID_L           (46),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_EXCLUSIVE       (30),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (49),
		.PKT_PROTECTION_L          (47),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (44),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (45),
		.PKT_DEST_ID_L             (45),
		.ST_DATA_W                 (59),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_0_mm_read_agent (
		.clk                   (clk_0_clk_clk),                                                       //       clk.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (msgdma_0_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_0_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_0_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_0_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_0_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_0_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_0_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_0_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_0_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_0_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_0_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_0_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_0_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_0_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_0_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_0_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                   //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                    //          .data
		.rp_channel            (rsp_mux_src_channel),                                                 //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                   //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (72),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) data_ram_0_s2_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (data_ram_0_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (data_ram_0_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (data_ram_0_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (data_ram_0_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (data_ram_0_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (data_ram_0_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (data_ram_0_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (data_ram_0_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (data_ram_0_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (data_ram_0_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (data_ram_0_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (data_ram_0_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (data_ram_0_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (data_ram_0_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (data_ram_0_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (data_ram_0_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (data_ram_0_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (data_ram_0_s2_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (data_ram_0_s2_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (data_ram_0_s2_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (data_ram_0_s2_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (data_ram_0_s2_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (data_ram_0_s2_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (data_ram_0_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (data_ram_0_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (data_ram_0_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (data_ram_0_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (data_ram_0_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (data_ram_0_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (data_ram_0_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (data_ram_0_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (data_ram_0_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (data_ram_0_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (data_ram_0_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_ram_0_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (data_ram_0_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) data_ram_0_s2_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (data_ram_0_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (data_ram_0_s2_agent_rf_source_data),             //        in.data
		.in_valid          (data_ram_0_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (data_ram_0_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (data_ram_0_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (data_ram_0_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (data_ram_0_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (data_ram_0_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (data_ram_0_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (data_ram_0_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (data_ram_0_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	controller_mm_interconnect_4_router router (
		.sink_ready         (msgdma_0_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (msgdma_0_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (msgdma_0_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (msgdma_0_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (msgdma_0_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	controller_mm_interconnect_4_router_001 router_001 (
		.sink_ready         (data_ram_0_s2_agent_rp_ready),                  //      sink.ready
		.sink_valid         (data_ram_0_s2_agent_rp_valid),                  //          .valid
		.sink_data          (data_ram_0_s2_agent_rp_data),                   //          .data
		.sink_startofpacket (data_ram_0_s2_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (data_ram_0_s2_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (data_ram_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	controller_mm_interconnect_4_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                             //      sink.ready
		.sink_channel       (router_src_channel),                           //          .channel
		.sink_data          (router_src_data),                              //          .data
		.sink_startofpacket (router_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_src0_data),                          //          .data
		.src0_channel       (cmd_demux_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                    //          .endofpacket
	);

	controller_mm_interconnect_4_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (data_ram_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	controller_mm_interconnect_4_cmd_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (data_ram_0_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (data_ram_0_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (data_ram_0_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (data_ram_0_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (data_ram_0_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (data_ram_0_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (data_ram_0_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_src0_data),                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                         //          .endofpacket
	);

	controller_mm_interconnect_4_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                            //          .valid
		.src_data            (rsp_mux_src_data),                             //          .data
		.src_channel         (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                       //          .channel
		.sink0_data          (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (55),
		.IN_PKT_RESPONSE_STATUS_L      (54),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (56),
		.IN_PKT_ORI_BURST_SIZE_H       (58),
		.IN_ST_DATA_W                  (59),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (82),
		.OUT_PKT_RESPONSE_STATUS_L     (81),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (83),
		.OUT_PKT_ORI_BURST_SIZE_H      (85),
		.OUT_ST_DATA_W                 (86),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) data_ram_0_s2_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (data_ram_0_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                 //          .ready
		.in_data              (cmd_mux_src_data),                                  //          .data
		.out_endofpacket      (data_ram_0_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (data_ram_0_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (data_ram_0_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (data_ram_0_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (data_ram_0_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (data_ram_0_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (82),
		.IN_PKT_RESPONSE_STATUS_L      (81),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (83),
		.IN_PKT_ORI_BURST_SIZE_H       (85),
		.IN_ST_DATA_W                  (86),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (55),
		.OUT_PKT_RESPONSE_STATUS_L     (54),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (56),
		.OUT_PKT_ORI_BURST_SIZE_H      (58),
		.OUT_ST_DATA_W                 (59),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) data_ram_0_s2_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (data_ram_0_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_001_src_valid),                              //      sink.valid
		.in_channel           (router_001_src_channel),                            //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_001_src_ready),                              //          .ready
		.in_data              (router_001_src_data),                               //          .data
		.out_endofpacket      (data_ram_0_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (data_ram_0_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (data_ram_0_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (data_ram_0_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (data_ram_0_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (data_ram_0_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	controller_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (data_ram_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (data_ram_0_s2_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (data_ram_0_s2_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (data_ram_0_s2_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                  //         .error
	);

endmodule
